
// Code generated by stanc v2.28.1
#include <stan/model/model_header.hpp>
namespace or_10_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 316> locations_array__ = 
{" (found before start of program)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 7, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 8, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 9, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 10, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 11, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 12, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 13, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 14, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 15, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 16, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 20, column 1 to column 14)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 76, column 2 to column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 77, column 1 to column 14)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 78, column 1 to column 14)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 79, column 1 to column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 80, column 1 to column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 81, column 1 to column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 82, column 1 to column 12)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 83, column 1 to column 12)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 84, column 1 to column 12)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 21, column 2 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 31, column 22 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 32, column 22 to column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 34, column 24 to column 77)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 35, column 24 to column 73)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 36, column 24 to column 73)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 37, column 24 to column 73)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 38, column 24 to column 73)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 39, column 24 to column 73)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 40, column 24 to column 73)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 41, column 24 to column 73)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 42, column 24 to column 73)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 43, column 24 to column 75)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 50, column 26 to column 65)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 51, column 26 to column 65)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 49, column 28 to line 53, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 45, column 26 to column 66)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 46, column 26 to column 66)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 44, column 111 to line 48, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 44, column 24 to line 53, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 33, column 42 to line 54, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 33, column 22 to line 54, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 55, column 22 to column 140)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 31, column 20 to line 56, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 30, column 35 to line 58, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 30, column 18 to line 58, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 29, column 32 to line 60, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 29, column 16 to line 60, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 28, column 30 to line 62, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 28, column 14 to line 62, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 27, column 28 to line 64, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 27, column 12 to line 64, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 26, column 26 to line 66, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 26, column 10 to line 66, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 25, column 24 to line 68, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 25, column 8 to line 68, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 24, column 22 to line 70, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 24, column 6 to line 70, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 23, column 20 to line 72, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 23, column 4 to line 72, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 22, column 18 to line 74, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 22, column 2 to line 74, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 85, column 2 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 94, column 20 to column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 95, column 20 to column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 97, column 22 to column 139)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 96, column 40 to line 99, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 96, column 20 to line 99, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 100, column 20 to column 127)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 94, column 18 to line 101, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 93, column 33 to line 103, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 93, column 16 to line 103, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 92, column 30 to line 105, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 92, column 14 to line 105, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 91, column 28 to line 107, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 91, column 12 to line 107, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 90, column 26 to line 109, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 90, column 10 to line 109, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 89, column 24 to line 111, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 89, column 8 to line 111, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 88, column 22 to line 113, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 88, column 6 to line 113, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 87, column 20 to line 115, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 87, column 4 to line 115, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 86, column 18 to line 117, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 86, column 2 to line 117, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 118, column 2 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 126, column 18 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 127, column 18 to column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 129, column 20 to column 126)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 128, column 38 to line 131, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 128, column 18 to line 131, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 132, column 18 to column 114)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 126, column 16 to line 133, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 125, column 31 to line 135, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 125, column 14 to line 135, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 124, column 28 to line 137, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 124, column 12 to line 137, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 123, column 26 to line 139, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 123, column 10 to line 139, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 122, column 24 to line 141, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 122, column 8 to line 141, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 121, column 22 to line 143, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 121, column 6 to line 143, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 120, column 20 to line 145, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 120, column 4 to line 145, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 119, column 18 to line 147, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 119, column 2 to line 147, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 148, column 2 to column 24)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 155, column 16 to column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 156, column 16 to column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 158, column 18 to column 113)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 157, column 36 to line 160, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 157, column 16 to line 160, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 161, column 16 to column 102)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 155, column 14 to line 162, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 154, column 29 to line 164, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 154, column 12 to line 164, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 153, column 26 to line 166, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 153, column 10 to line 166, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 152, column 24 to line 168, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 152, column 8 to line 168, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 151, column 22 to line 170, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 151, column 6 to line 170, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 150, column 20 to line 172, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 150, column 4 to line 172, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 149, column 18 to line 174, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 149, column 2 to line 174, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 175, column 2 to column 24)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 181, column 14 to column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 182, column 14 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 184, column 16 to column 101)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 183, column 34 to line 186, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 183, column 14 to line 186, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 187, column 14 to column 90)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 181, column 12 to line 188, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 180, column 27 to line 190, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 180, column 10 to line 190, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 179, column 24 to line 192, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 179, column 8 to line 192, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 178, column 22 to line 194, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 178, column 6 to line 194, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 177, column 20 to line 196, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 177, column 4 to line 196, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 176, column 18 to line 198, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 176, column 2 to line 198, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 199, column 2 to column 24)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 204, column 12 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 205, column 12 to column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 207, column 14 to column 89)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 206, column 32 to line 209, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 206, column 12 to line 209, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 210, column 12 to column 78)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 204, column 10 to line 211, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 203, column 25 to line 213, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 203, column 8 to line 213, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 202, column 22 to line 215, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 202, column 6 to line 215, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 201, column 20 to line 217, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 201, column 4 to line 217, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 200, column 18 to line 219, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 200, column 2 to line 219, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 220, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 224, column 10 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 225, column 10 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 227, column 12 to column 77)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 226, column 30 to line 229, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 226, column 10 to line 229, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 230, column 10 to column 67)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 224, column 8 to line 231, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 223, column 23 to line 233, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 223, column 6 to line 233, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 222, column 20 to line 235, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 222, column 4 to line 235, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 221, column 18 to line 237, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 221, column 2 to line 237, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 238, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 241, column 8 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 242, column 8 to column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 244, column 10 to column 66)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 243, column 28 to line 246, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 243, column 8 to line 246, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 247, column 8 to column 56)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 241, column 6 to line 248, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 240, column 21 to line 250, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 240, column 4 to line 250, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 239, column 18 to line 252, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 239, column 2 to line 252, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 253, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 255, column 6 to column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 256, column 6 to column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 258, column 8 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 257, column 26 to line 260, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 257, column 6 to line 260, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 261, column 6 to column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 255, column 4 to line 262, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 254, column 19 to line 264, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 254, column 2 to line 264, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 265, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 266, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 267, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 269, column 6 to column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 268, column 25 to line 271, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 268, column 4 to line 271, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 272, column 4 to column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 266, column 2 to line 273, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 292, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 293, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 294, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 295, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 296, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 297, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 298, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 299, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 300, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 301, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 302, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 303, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 305, column 6 to column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 304, column 25 to line 307, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 304, column 4 to line 307, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 308, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 302, column 2 to line 309, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 310, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 311, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 313, column 6 to column 53)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 312, column 24 to line 315, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 312, column 4 to line 315, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 316, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 310, column 2 to line 317, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 318, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 319, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 321, column 6 to column 62)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 320, column 24 to line 323, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 320, column 4 to line 323, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 324, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 318, column 2 to line 325, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 326, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 327, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 329, column 6 to column 71)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 328, column 24 to line 331, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 328, column 4 to line 331, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 332, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 326, column 2 to line 333, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 334, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 335, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 337, column 6 to column 81)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 336, column 24 to line 339, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 336, column 4 to line 339, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 340, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 334, column 2 to line 341, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 342, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 343, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 345, column 6 to column 91)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 344, column 24 to line 347, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 344, column 4 to line 347, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 348, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 342, column 2 to line 349, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 350, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 351, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 353, column 6 to column 101)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 352, column 24 to line 355, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 352, column 4 to line 355, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 356, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 350, column 2 to line 357, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 358, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 359, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 361, column 6 to column 112)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 360, column 24 to line 363, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 360, column 4 to line 363, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 364, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 358, column 2 to line 365, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 366, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 367, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 369, column 6 to column 123)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 368, column 24 to line 371, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 368, column 4 to line 371, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 372, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 366, column 2 to line 373, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 374, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 375, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 377, column 6 to column 59)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 378, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 379, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 380, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 381, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 382, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 383, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 384, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 385, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 386, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 393, column 8 to column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 394, column 8 to column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 392, column 10 to line 396, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 388, column 8 to column 48)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 389, column 8 to column 48)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 387, column 93 to line 391, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 387, column 6 to line 396, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 376, column 24 to line 397, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 376, column 4 to line 397, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 398, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 374, column 2 to line 399, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 278, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 279, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 280, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 281, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 282, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 283, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 284, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 285, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 286, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 287, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 288, column 2 to column 16)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 2, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_10.stan', line 3, column 2 to column 10)"};



class or_10_model final : public model_base_crtp<or_10_model> {

 private:
  double d1;
  double d2; 
  
 
 public:
  ~or_10_model() { }
  
  inline std::string model_name() const final { return "or_10_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.1", "stancflags = "};
  }
  
  
  or_10_model(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "or_10_model_namespace::or_10_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 314;
      context__.validate_dims("data initialization","d1","double",
           std::vector<size_t>{});
      d1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 314;
      d1 = context__.vals_r("d1")[(1 - 1)];
      current_statement__ = 315;
      context__.validate_dims("data initialization","d2","double",
           std::vector<size_t>{});
      d2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 315;
      d2 = context__.vals_r("d2")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "or_10_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ prior1;
      prior1 = DUMMY_VAR__;
      
      current_statement__ = 1;
      prior1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior10;
      prior10 = DUMMY_VAR__;
      
      current_statement__ = 2;
      prior10 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior2;
      prior2 = DUMMY_VAR__;
      
      current_statement__ = 3;
      prior2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior3;
      prior3 = DUMMY_VAR__;
      
      current_statement__ = 4;
      prior3 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior4;
      prior4 = DUMMY_VAR__;
      
      current_statement__ = 5;
      prior4 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior5;
      prior5 = DUMMY_VAR__;
      
      current_statement__ = 6;
      prior5 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior6;
      prior6 = DUMMY_VAR__;
      
      current_statement__ = 7;
      prior6 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior7;
      prior7 = DUMMY_VAR__;
      
      current_statement__ = 8;
      prior7 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior8;
      prior8 = DUMMY_VAR__;
      
      current_statement__ = 9;
      prior8 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior9;
      prior9 = DUMMY_VAR__;
      
      current_statement__ = 10;
      prior9 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      std::vector<local_scalar_t__> m1;
      m1 = std::vector<local_scalar_t__>(512, DUMMY_VAR__);
      
      current_statement__ = 21;
      assign(m1, rep_array(0, 512), "assigning variable m1");
      current_statement__ = 62;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 60;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 58;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 56;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 54;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 52;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 50;
                  for (int z3 = 1; z3 <= 2; ++z3) {
                    current_statement__ = 48;
                    for (int z2 = 1; z2 <= 2; ++z2) {
                      current_statement__ = 46;
                      for (int z10 = 1; z10 <= 2; ++z10) {
                        {
                          Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                          acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                          stan::math::fill(acc0, DUMMY_VAR__);
                          
                          current_statement__ = 23;
                          assign(acc0, rep_vector(0, 2),
                            "assigning variable acc0");
                          current_statement__ = 42;
                          for (int z1_val = 1; z1_val <= 2; ++z1_val) {
                            current_statement__ = 24;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z1_val - 1), prior1)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 25;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z2 - 1), prior2)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 26;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z3 - 1), prior3)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 27;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z4 - 1), prior4)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 28;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z5 - 1), prior5)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 29;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z6 - 1), prior6)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 30;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z7 - 1), prior7)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 31;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z8 - 1), prior8)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 32;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z9 - 1), prior9)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 33;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z10 - 1), prior10)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 40;
                            if (logical_gt(
                                  ((((((((((z1_val + z2) + z3) + z4) + z5) +
                                         z6) + z7) + z8) + z9) + z10) - 10),
                                  0)) {
                              current_statement__ = 37;
                              assign(acc0,
                                (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                  normal_lpdf<false>(d1, 135, 8)),
                                "assigning variable acc0", index_uni(z1_val));
                              current_statement__ = 38;
                              assign(acc0,
                                (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                  normal_lpdf<false>(d2, 135, 8)),
                                "assigning variable acc0", index_uni(z1_val));
                            } else {
                              current_statement__ = 34;
                              assign(acc0,
                                (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                  normal_lpdf<false>(d1, 80, 8)),
                                "assigning variable acc0", index_uni(z1_val));
                              current_statement__ = 35;
                              assign(acc0,
                                (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                  normal_lpdf<false>(d2, 80, 8)),
                                "assigning variable acc0", index_uni(z1_val));
                            }
                          }
                          current_statement__ = 43;
                          assign(m1,
                            (rvalue(m1, "m1",
                               index_uni((((((((((((z10 - 1) * 256) +
                                                   ((z2 - 1) * 128)) +
                                                  ((z3 - 1) * 64)) +
                                                 ((z4 - 1) * 32)) +
                                                ((z5 - 1) * 16)) +
                                               ((z6 - 1) * 8)) +
                                              ((z7 - 1) * 4)) +
                                             ((z8 - 1) * 2)) +
                                            ((z9 - 1) * 1)) + 1))) +
                              log_sum_exp(acc0)),
                            "assigning variable m1", index_uni((((((((((((z10
                                                                    - 1) *
                                                                    256) +
                                                                    ((z2 - 1)
                                                                    * 128)) +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                   ((z8 - 1)
                                                                    * 2)) +
                                                                  ((z9 - 1) *
                                                                    1)) + 1)));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      local_scalar_t__ m10;
      m10 = DUMMY_VAR__;
      
      std::vector<local_scalar_t__> m2;
      m2 = std::vector<local_scalar_t__>(256, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m3;
      m3 = std::vector<local_scalar_t__>(128, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m4;
      m4 = std::vector<local_scalar_t__>(64, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m5;
      m5 = std::vector<local_scalar_t__>(32, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m6;
      m6 = std::vector<local_scalar_t__>(16, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m7;
      m7 = std::vector<local_scalar_t__>(8, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m8;
      m8 = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m9;
      m9 = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
      
      current_statement__ = 63;
      assign(m2, rep_array(0, 256), "assigning variable m2");
      current_statement__ = 86;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 84;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 82;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 80;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 78;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 76;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 74;
                  for (int z3 = 1; z3 <= 2; ++z3) {
                    current_statement__ = 72;
                    for (int z10 = 1; z10 <= 2; ++z10) {
                      {
                        Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                        acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                        stan::math::fill(acc0, DUMMY_VAR__);
                        
                        current_statement__ = 65;
                        assign(acc0, rep_vector(0, 2),
                          "assigning variable acc0");
                        current_statement__ = 68;
                        for (int z2_val = 1; z2_val <= 2; ++z2_val) {
                          current_statement__ = 66;
                          assign(acc0,
                            (rvalue(acc0, "acc0", index_uni(z2_val)) +
                              rvalue(m1, "m1",
                                index_uni((((((((((((z10 - 1) * 256) +
                                                    ((z2_val - 1) * 128)) +
                                                   ((z3 - 1) * 64)) +
                                                  ((z4 - 1) * 32)) +
                                                 ((z5 - 1) * 16)) +
                                                ((z6 - 1) * 8)) +
                                               ((z7 - 1) * 4)) +
                                              ((z8 - 1) * 2)) +
                                             ((z9 - 1) * 1)) + 1)))),
                            "assigning variable acc0", index_uni(z2_val));
                        }
                        current_statement__ = 69;
                        assign(m2,
                          (rvalue(m2, "m2",
                             index_uni(((((((((((z10 - 1) * 128) +
                                                ((z3 - 1) * 64)) +
                                               ((z4 - 1) * 32)) +
                                              ((z5 - 1) * 16)) +
                                             ((z6 - 1) * 8)) +
                                            ((z7 - 1) * 4)) + ((z8 - 1) * 2))
                                          + ((z9 - 1) * 1)) + 1))) +
                            log_sum_exp(acc0)),
                          "assigning variable m2", index_uni(((((((((((z10 -
                                                                    1) * 128)
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                   ((z6 - 1)
                                                                    * 8)) +
                                                                  ((z7 - 1) *
                                                                    4)) +
                                                                 ((z8 - 1) *
                                                                   2)) +
                                                                ((z9 - 1) *
                                                                  1)) + 1)));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 87;
      assign(m3, rep_array(0, 128), "assigning variable m3");
      current_statement__ = 108;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 106;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 104;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 102;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 100;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 98;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 96;
                  for (int z10 = 1; z10 <= 2; ++z10) {
                    {
                      Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                      acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                      stan::math::fill(acc0, DUMMY_VAR__);
                      
                      current_statement__ = 89;
                      assign(acc0, rep_vector(0, 2),
                        "assigning variable acc0");
                      current_statement__ = 92;
                      for (int z3_val = 1; z3_val <= 2; ++z3_val) {
                        current_statement__ = 90;
                        assign(acc0,
                          (rvalue(acc0, "acc0", index_uni(z3_val)) +
                            rvalue(m2, "m2",
                              index_uni(((((((((((z10 - 1) * 128) +
                                                 ((z3_val - 1) * 64)) +
                                                ((z4 - 1) * 32)) +
                                               ((z5 - 1) * 16)) +
                                              ((z6 - 1) * 8)) +
                                             ((z7 - 1) * 4)) +
                                            ((z8 - 1) * 2)) + ((z9 - 1) * 1))
                                          + 1)))),
                          "assigning variable acc0", index_uni(z3_val));
                      }
                      current_statement__ = 93;
                      assign(m3,
                        (rvalue(m3, "m3",
                           index_uni((((((((((z10 - 1) * 64) +
                                             ((z4 - 1) * 32)) +
                                            ((z5 - 1) * 16)) +
                                           ((z6 - 1) * 8)) + ((z7 - 1) * 4))
                                         + ((z8 - 1) * 2)) + ((z9 - 1) * 1))
                                       + 1))) + log_sum_exp(acc0)),
                        "assigning variable m3", index_uni((((((((((z10 - 1)
                                                                    * 64) +
                                                                   ((z4 - 1)
                                                                    * 32)) +
                                                                  ((z5 - 1) *
                                                                    16)) +
                                                                 ((z6 - 1) *
                                                                   8)) +
                                                                ((z7 - 1) *
                                                                  4)) +
                                                               ((z8 - 1) * 2))
                                                              +
                                                              ((z9 - 1) * 1))
                                                             + 1)));
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 109;
      assign(m4, rep_array(0, 64), "assigning variable m4");
      current_statement__ = 128;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 126;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 124;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 122;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 120;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 118;
                for (int z10 = 1; z10 <= 2; ++z10) {
                  {
                    Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                    acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                    stan::math::fill(acc0, DUMMY_VAR__);
                    
                    current_statement__ = 111;
                    assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                    current_statement__ = 114;
                    for (int z4_val = 1; z4_val <= 2; ++z4_val) {
                      current_statement__ = 112;
                      assign(acc0,
                        (rvalue(acc0, "acc0", index_uni(z4_val)) +
                          rvalue(m3, "m3",
                            index_uni((((((((((z10 - 1) * 64) +
                                              ((z4_val - 1) * 32)) +
                                             ((z5 - 1) * 16)) +
                                            ((z6 - 1) * 8)) + ((z7 - 1) * 4))
                                          + ((z8 - 1) * 2)) + ((z9 - 1) * 1))
                                        + 1)))),
                        "assigning variable acc0", index_uni(z4_val));
                    }
                    current_statement__ = 115;
                    assign(m4,
                      (rvalue(m4, "m4",
                         index_uni(((((((((z10 - 1) * 32) + ((z5 - 1) * 16))
                                         + ((z6 - 1) * 8)) + ((z7 - 1) * 4))
                                       + ((z8 - 1) * 2)) + ((z9 - 1) * 1)) +
                                     1))) + log_sum_exp(acc0)),
                      "assigning variable m4", index_uni(((((((((z10 - 1) *
                                                                 32) +
                                                                ((z5 - 1) *
                                                                  16)) +
                                                               ((z6 - 1) * 8))
                                                              +
                                                              ((z7 - 1) * 4))
                                                             +
                                                             ((z8 - 1) * 2))
                                                            + ((z9 - 1) * 1))
                                                           + 1)));
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 129;
      assign(m5, rep_array(0, 32), "assigning variable m5");
      current_statement__ = 146;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 144;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 142;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 140;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 138;
              for (int z10 = 1; z10 <= 2; ++z10) {
                {
                  Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                  acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                  stan::math::fill(acc0, DUMMY_VAR__);
                  
                  current_statement__ = 131;
                  assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                  current_statement__ = 134;
                  for (int z5_val = 1; z5_val <= 2; ++z5_val) {
                    current_statement__ = 132;
                    assign(acc0,
                      (rvalue(acc0, "acc0", index_uni(z5_val)) +
                        rvalue(m4, "m4",
                          index_uni(((((((((z10 - 1) * 32) +
                                           ((z5_val - 1) * 16)) +
                                          ((z6 - 1) * 8)) + ((z7 - 1) * 4)) +
                                        ((z8 - 1) * 2)) + ((z9 - 1) * 1)) +
                                      1)))),
                      "assigning variable acc0", index_uni(z5_val));
                  }
                  current_statement__ = 135;
                  assign(m5,
                    (rvalue(m5, "m5",
                       index_uni((((((((z10 - 1) * 16) + ((z6 - 1) * 8)) +
                                      ((z7 - 1) * 4)) + ((z8 - 1) * 2)) +
                                    ((z9 - 1) * 1)) + 1))) +
                      log_sum_exp(acc0)),
                    "assigning variable m5", index_uni((((((((z10 - 1) * 16)
                                                             +
                                                             ((z6 - 1) * 8))
                                                            + ((z7 - 1) * 4))
                                                           + ((z8 - 1) * 2))
                                                          + ((z9 - 1) * 1)) +
                                                         1)));
                }
              }
            }
          }
        }
      }
      current_statement__ = 147;
      assign(m6, rep_array(0, 16), "assigning variable m6");
      current_statement__ = 162;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 160;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 158;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 156;
            for (int z10 = 1; z10 <= 2; ++z10) {
              {
                Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                stan::math::fill(acc0, DUMMY_VAR__);
                
                current_statement__ = 149;
                assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                current_statement__ = 152;
                for (int z6_val = 1; z6_val <= 2; ++z6_val) {
                  current_statement__ = 150;
                  assign(acc0,
                    (rvalue(acc0, "acc0", index_uni(z6_val)) +
                      rvalue(m5, "m5",
                        index_uni((((((((z10 - 1) * 16) + ((z6_val - 1) * 8))
                                       + ((z7 - 1) * 4)) + ((z8 - 1) * 2)) +
                                     ((z9 - 1) * 1)) + 1)))),
                    "assigning variable acc0", index_uni(z6_val));
                }
                current_statement__ = 153;
                assign(m6,
                  (rvalue(m6, "m6",
                     index_uni(((((((z10 - 1) * 8) + ((z7 - 1) * 4)) +
                                   ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1))) +
                    log_sum_exp(acc0)),
                  "assigning variable m6", index_uni(((((((z10 - 1) * 8) +
                                                          ((z7 - 1) * 4)) +
                                                         ((z8 - 1) * 2)) +
                                                        ((z9 - 1) * 1)) + 1)));
              }
            }
          }
        }
      }
      current_statement__ = 163;
      assign(m7, rep_array(0, 8), "assigning variable m7");
      current_statement__ = 176;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 174;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 172;
          for (int z10 = 1; z10 <= 2; ++z10) {
            {
              Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
              acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
              stan::math::fill(acc0, DUMMY_VAR__);
              
              current_statement__ = 165;
              assign(acc0, rep_vector(0, 2), "assigning variable acc0");
              current_statement__ = 168;
              for (int z7_val = 1; z7_val <= 2; ++z7_val) {
                current_statement__ = 166;
                assign(acc0,
                  (rvalue(acc0, "acc0", index_uni(z7_val)) +
                    rvalue(m6, "m6",
                      index_uni(((((((z10 - 1) * 8) + ((z7_val - 1) * 4)) +
                                    ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
                  "assigning variable acc0", index_uni(z7_val));
              }
              current_statement__ = 169;
              assign(m7,
                (rvalue(m7, "m7",
                   index_uni((((((z10 - 1) * 4) + ((z8 - 1) * 2)) +
                                ((z9 - 1) * 1)) + 1))) + log_sum_exp(acc0)),
                "assigning variable m7", index_uni((((((z10 - 1) * 4) +
                                                       ((z8 - 1) * 2)) +
                                                      ((z9 - 1) * 1)) + 1)));
            }
          }
        }
      }
      current_statement__ = 177;
      assign(m8, rep_array(0, 4), "assigning variable m8");
      current_statement__ = 188;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 186;
        for (int z10 = 1; z10 <= 2; ++z10) {
          {
            Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
            acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
            stan::math::fill(acc0, DUMMY_VAR__);
            
            current_statement__ = 179;
            assign(acc0, rep_vector(0, 2), "assigning variable acc0");
            current_statement__ = 182;
            for (int z8_val = 1; z8_val <= 2; ++z8_val) {
              current_statement__ = 180;
              assign(acc0,
                (rvalue(acc0, "acc0", index_uni(z8_val)) +
                  rvalue(m7, "m7",
                    index_uni((((((z10 - 1) * 4) + ((z8_val - 1) * 2)) +
                                 ((z9 - 1) * 1)) + 1)))),
                "assigning variable acc0", index_uni(z8_val));
            }
            current_statement__ = 183;
            assign(m8,
              (rvalue(m8, "m8",
                 index_uni(((((z10 - 1) * 2) + ((z9 - 1) * 1)) + 1))) +
                log_sum_exp(acc0)),
              "assigning variable m8", index_uni(((((z10 - 1) * 2) +
                                                    ((z9 - 1) * 1)) + 1)));
          }
        }
      }
      current_statement__ = 189;
      assign(m9, rep_array(0, 2), "assigning variable m9");
      current_statement__ = 198;
      for (int z10 = 1; z10 <= 2; ++z10) {
        {
          Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
          acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
          stan::math::fill(acc0, DUMMY_VAR__);
          
          current_statement__ = 191;
          assign(acc0, rep_vector(0, 2), "assigning variable acc0");
          current_statement__ = 194;
          for (int z9_val = 1; z9_val <= 2; ++z9_val) {
            current_statement__ = 192;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z9_val)) +
                rvalue(m8, "m8",
                  index_uni(((((z10 - 1) * 2) + ((z9_val - 1) * 1)) + 1)))),
              "assigning variable acc0", index_uni(z9_val));
          }
          current_statement__ = 195;
          assign(m9, (rvalue(m9, "m9", index_uni(z10)) + log_sum_exp(acc0)),
            "assigning variable m9", index_uni(z10));
        }
      }
      current_statement__ = 199;
      m10 = 0;
      {
        Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
        acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
        stan::math::fill(acc0, DUMMY_VAR__);
        
        current_statement__ = 201;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 204;
        for (int z10_val = 1; z10_val <= 2; ++z10_val) {
          current_statement__ = 202;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z10_val)) +
              rvalue(m9, "m9", index_uni((((z10_val - 1) * 1) + 1)))),
            "assigning variable acc0", index_uni(z10_val));
        }
        current_statement__ = 205;
        m10 = (m10 + log_sum_exp(acc0));
      }
      {
        current_statement__ = 303;
        lp_accum__.add(beta_lpdf<propto__>(prior1, 1, 1));
        current_statement__ = 304;
        lp_accum__.add(beta_lpdf<propto__>(prior2, 1, 1));
        current_statement__ = 305;
        lp_accum__.add(beta_lpdf<propto__>(prior3, 1, 1));
        current_statement__ = 306;
        lp_accum__.add(beta_lpdf<propto__>(prior4, 1, 1));
        current_statement__ = 307;
        lp_accum__.add(beta_lpdf<propto__>(prior5, 1, 1));
        current_statement__ = 308;
        lp_accum__.add(beta_lpdf<propto__>(prior6, 1, 1));
        current_statement__ = 309;
        lp_accum__.add(beta_lpdf<propto__>(prior7, 1, 1));
        current_statement__ = 310;
        lp_accum__.add(beta_lpdf<propto__>(prior8, 1, 1));
        current_statement__ = 311;
        lp_accum__.add(beta_lpdf<propto__>(prior9, 1, 1));
        current_statement__ = 312;
        lp_accum__.add(beta_lpdf<propto__>(prior10, 1, 1));
        current_statement__ = 313;
        lp_accum__.add(m10);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "or_10_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double prior1;
      prior1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      prior1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior10;
      prior10 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      prior10 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior2;
      prior2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      prior2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior3;
      prior3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      prior3 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior4;
      prior4 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      prior4 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior5;
      prior5 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      prior5 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior6;
      prior6 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      prior6 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior7;
      prior7 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      prior7 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior8;
      prior8 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      prior8 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior9;
      prior9 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      prior9 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      std::vector<double> m1;
      m1 = std::vector<double>(512, std::numeric_limits<double>::quiet_NaN());
      
      double m10;
      m10 = std::numeric_limits<double>::quiet_NaN();
      
      std::vector<double> m2;
      m2 = std::vector<double>(256, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m3;
      m3 = std::vector<double>(128, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m4;
      m4 = std::vector<double>(64, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m5;
      m5 = std::vector<double>(32, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m6;
      m6 = std::vector<double>(16, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m7;
      m7 = std::vector<double>(8, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m8;
      m8 = std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m9;
      m9 = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      out__.write(prior1);
      out__.write(prior10);
      out__.write(prior2);
      out__.write(prior3);
      out__.write(prior4);
      out__.write(prior5);
      out__.write(prior6);
      out__.write(prior7);
      out__.write(prior8);
      out__.write(prior9);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 21;
      assign(m1, rep_array(0, 512), "assigning variable m1");
      current_statement__ = 62;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 60;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 58;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 56;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 54;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 52;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 50;
                  for (int z3 = 1; z3 <= 2; ++z3) {
                    current_statement__ = 48;
                    for (int z2 = 1; z2 <= 2; ++z2) {
                      current_statement__ = 46;
                      for (int z10 = 1; z10 <= 2; ++z10) {
                        {
                          Eigen::Matrix<double, -1, 1> acc0;
                          acc0 = Eigen::Matrix<double, -1, 1>(2);
                          stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                          
                          
                          current_statement__ = 23;
                          assign(acc0, rep_vector(0, 2),
                            "assigning variable acc0");
                          current_statement__ = 42;
                          for (int z1_val = 1; z1_val <= 2; ++z1_val) {
                            current_statement__ = 24;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z1_val - 1), prior1)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 25;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z2 - 1), prior2)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 26;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z3 - 1), prior3)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 27;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z4 - 1), prior4)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 28;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z5 - 1), prior5)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 29;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z6 - 1), prior6)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 30;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z7 - 1), prior7)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 31;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z8 - 1), prior8)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 32;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z9 - 1), prior9)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 33;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                bernoulli_lpmf<false>((z10 - 1), prior10)),
                              "assigning variable acc0", index_uni(z1_val));
                            current_statement__ = 40;
                            if (logical_gt(
                                  ((((((((((z1_val + z2) + z3) + z4) + z5) +
                                         z6) + z7) + z8) + z9) + z10) - 10),
                                  0)) {
                              current_statement__ = 37;
                              assign(acc0,
                                (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                  normal_lpdf<false>(d1, 135, 8)),
                                "assigning variable acc0", index_uni(z1_val));
                              current_statement__ = 38;
                              assign(acc0,
                                (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                  normal_lpdf<false>(d2, 135, 8)),
                                "assigning variable acc0", index_uni(z1_val));
                            } else {
                              current_statement__ = 34;
                              assign(acc0,
                                (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                  normal_lpdf<false>(d1, 80, 8)),
                                "assigning variable acc0", index_uni(z1_val));
                              current_statement__ = 35;
                              assign(acc0,
                                (rvalue(acc0, "acc0", index_uni(z1_val)) +
                                  normal_lpdf<false>(d2, 80, 8)),
                                "assigning variable acc0", index_uni(z1_val));
                            }
                          }
                          current_statement__ = 43;
                          assign(m1,
                            (rvalue(m1, "m1",
                               index_uni((((((((((((z10 - 1) * 256) +
                                                   ((z2 - 1) * 128)) +
                                                  ((z3 - 1) * 64)) +
                                                 ((z4 - 1) * 32)) +
                                                ((z5 - 1) * 16)) +
                                               ((z6 - 1) * 8)) +
                                              ((z7 - 1) * 4)) +
                                             ((z8 - 1) * 2)) +
                                            ((z9 - 1) * 1)) + 1))) +
                              log_sum_exp(acc0)),
                            "assigning variable m1", index_uni((((((((((((z10
                                                                    - 1) *
                                                                    256) +
                                                                    ((z2 - 1)
                                                                    * 128)) +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                   ((z8 - 1)
                                                                    * 2)) +
                                                                  ((z9 - 1) *
                                                                    1)) + 1)));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 63;
      assign(m2, rep_array(0, 256), "assigning variable m2");
      current_statement__ = 86;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 84;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 82;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 80;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 78;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 76;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 74;
                  for (int z3 = 1; z3 <= 2; ++z3) {
                    current_statement__ = 72;
                    for (int z10 = 1; z10 <= 2; ++z10) {
                      {
                        Eigen::Matrix<double, -1, 1> acc0;
                        acc0 = Eigen::Matrix<double, -1, 1>(2);
                        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                        
                        
                        current_statement__ = 65;
                        assign(acc0, rep_vector(0, 2),
                          "assigning variable acc0");
                        current_statement__ = 68;
                        for (int z2_val = 1; z2_val <= 2; ++z2_val) {
                          current_statement__ = 66;
                          assign(acc0,
                            (rvalue(acc0, "acc0", index_uni(z2_val)) +
                              rvalue(m1, "m1",
                                index_uni((((((((((((z10 - 1) * 256) +
                                                    ((z2_val - 1) * 128)) +
                                                   ((z3 - 1) * 64)) +
                                                  ((z4 - 1) * 32)) +
                                                 ((z5 - 1) * 16)) +
                                                ((z6 - 1) * 8)) +
                                               ((z7 - 1) * 4)) +
                                              ((z8 - 1) * 2)) +
                                             ((z9 - 1) * 1)) + 1)))),
                            "assigning variable acc0", index_uni(z2_val));
                        }
                        current_statement__ = 69;
                        assign(m2,
                          (rvalue(m2, "m2",
                             index_uni(((((((((((z10 - 1) * 128) +
                                                ((z3 - 1) * 64)) +
                                               ((z4 - 1) * 32)) +
                                              ((z5 - 1) * 16)) +
                                             ((z6 - 1) * 8)) +
                                            ((z7 - 1) * 4)) + ((z8 - 1) * 2))
                                          + ((z9 - 1) * 1)) + 1))) +
                            log_sum_exp(acc0)),
                          "assigning variable m2", index_uni(((((((((((z10 -
                                                                    1) * 128)
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                   ((z6 - 1)
                                                                    * 8)) +
                                                                  ((z7 - 1) *
                                                                    4)) +
                                                                 ((z8 - 1) *
                                                                   2)) +
                                                                ((z9 - 1) *
                                                                  1)) + 1)));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 87;
      assign(m3, rep_array(0, 128), "assigning variable m3");
      current_statement__ = 108;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 106;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 104;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 102;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 100;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 98;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 96;
                  for (int z10 = 1; z10 <= 2; ++z10) {
                    {
                      Eigen::Matrix<double, -1, 1> acc0;
                      acc0 = Eigen::Matrix<double, -1, 1>(2);
                      stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                      
                      
                      current_statement__ = 89;
                      assign(acc0, rep_vector(0, 2),
                        "assigning variable acc0");
                      current_statement__ = 92;
                      for (int z3_val = 1; z3_val <= 2; ++z3_val) {
                        current_statement__ = 90;
                        assign(acc0,
                          (rvalue(acc0, "acc0", index_uni(z3_val)) +
                            rvalue(m2, "m2",
                              index_uni(((((((((((z10 - 1) * 128) +
                                                 ((z3_val - 1) * 64)) +
                                                ((z4 - 1) * 32)) +
                                               ((z5 - 1) * 16)) +
                                              ((z6 - 1) * 8)) +
                                             ((z7 - 1) * 4)) +
                                            ((z8 - 1) * 2)) + ((z9 - 1) * 1))
                                          + 1)))),
                          "assigning variable acc0", index_uni(z3_val));
                      }
                      current_statement__ = 93;
                      assign(m3,
                        (rvalue(m3, "m3",
                           index_uni((((((((((z10 - 1) * 64) +
                                             ((z4 - 1) * 32)) +
                                            ((z5 - 1) * 16)) +
                                           ((z6 - 1) * 8)) + ((z7 - 1) * 4))
                                         + ((z8 - 1) * 2)) + ((z9 - 1) * 1))
                                       + 1))) + log_sum_exp(acc0)),
                        "assigning variable m3", index_uni((((((((((z10 - 1)
                                                                    * 64) +
                                                                   ((z4 - 1)
                                                                    * 32)) +
                                                                  ((z5 - 1) *
                                                                    16)) +
                                                                 ((z6 - 1) *
                                                                   8)) +
                                                                ((z7 - 1) *
                                                                  4)) +
                                                               ((z8 - 1) * 2))
                                                              +
                                                              ((z9 - 1) * 1))
                                                             + 1)));
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 109;
      assign(m4, rep_array(0, 64), "assigning variable m4");
      current_statement__ = 128;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 126;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 124;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 122;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 120;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 118;
                for (int z10 = 1; z10 <= 2; ++z10) {
                  {
                    Eigen::Matrix<double, -1, 1> acc0;
                    acc0 = Eigen::Matrix<double, -1, 1>(2);
                    stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                    
                    
                    current_statement__ = 111;
                    assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                    current_statement__ = 114;
                    for (int z4_val = 1; z4_val <= 2; ++z4_val) {
                      current_statement__ = 112;
                      assign(acc0,
                        (rvalue(acc0, "acc0", index_uni(z4_val)) +
                          rvalue(m3, "m3",
                            index_uni((((((((((z10 - 1) * 64) +
                                              ((z4_val - 1) * 32)) +
                                             ((z5 - 1) * 16)) +
                                            ((z6 - 1) * 8)) + ((z7 - 1) * 4))
                                          + ((z8 - 1) * 2)) + ((z9 - 1) * 1))
                                        + 1)))),
                        "assigning variable acc0", index_uni(z4_val));
                    }
                    current_statement__ = 115;
                    assign(m4,
                      (rvalue(m4, "m4",
                         index_uni(((((((((z10 - 1) * 32) + ((z5 - 1) * 16))
                                         + ((z6 - 1) * 8)) + ((z7 - 1) * 4))
                                       + ((z8 - 1) * 2)) + ((z9 - 1) * 1)) +
                                     1))) + log_sum_exp(acc0)),
                      "assigning variable m4", index_uni(((((((((z10 - 1) *
                                                                 32) +
                                                                ((z5 - 1) *
                                                                  16)) +
                                                               ((z6 - 1) * 8))
                                                              +
                                                              ((z7 - 1) * 4))
                                                             +
                                                             ((z8 - 1) * 2))
                                                            + ((z9 - 1) * 1))
                                                           + 1)));
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 129;
      assign(m5, rep_array(0, 32), "assigning variable m5");
      current_statement__ = 146;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 144;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 142;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 140;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 138;
              for (int z10 = 1; z10 <= 2; ++z10) {
                {
                  Eigen::Matrix<double, -1, 1> acc0;
                  acc0 = Eigen::Matrix<double, -1, 1>(2);
                  stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                  
                  
                  current_statement__ = 131;
                  assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                  current_statement__ = 134;
                  for (int z5_val = 1; z5_val <= 2; ++z5_val) {
                    current_statement__ = 132;
                    assign(acc0,
                      (rvalue(acc0, "acc0", index_uni(z5_val)) +
                        rvalue(m4, "m4",
                          index_uni(((((((((z10 - 1) * 32) +
                                           ((z5_val - 1) * 16)) +
                                          ((z6 - 1) * 8)) + ((z7 - 1) * 4)) +
                                        ((z8 - 1) * 2)) + ((z9 - 1) * 1)) +
                                      1)))),
                      "assigning variable acc0", index_uni(z5_val));
                  }
                  current_statement__ = 135;
                  assign(m5,
                    (rvalue(m5, "m5",
                       index_uni((((((((z10 - 1) * 16) + ((z6 - 1) * 8)) +
                                      ((z7 - 1) * 4)) + ((z8 - 1) * 2)) +
                                    ((z9 - 1) * 1)) + 1))) +
                      log_sum_exp(acc0)),
                    "assigning variable m5", index_uni((((((((z10 - 1) * 16)
                                                             +
                                                             ((z6 - 1) * 8))
                                                            + ((z7 - 1) * 4))
                                                           + ((z8 - 1) * 2))
                                                          + ((z9 - 1) * 1)) +
                                                         1)));
                }
              }
            }
          }
        }
      }
      current_statement__ = 147;
      assign(m6, rep_array(0, 16), "assigning variable m6");
      current_statement__ = 162;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 160;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 158;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 156;
            for (int z10 = 1; z10 <= 2; ++z10) {
              {
                Eigen::Matrix<double, -1, 1> acc0;
                acc0 = Eigen::Matrix<double, -1, 1>(2);
                stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                
                
                current_statement__ = 149;
                assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                current_statement__ = 152;
                for (int z6_val = 1; z6_val <= 2; ++z6_val) {
                  current_statement__ = 150;
                  assign(acc0,
                    (rvalue(acc0, "acc0", index_uni(z6_val)) +
                      rvalue(m5, "m5",
                        index_uni((((((((z10 - 1) * 16) + ((z6_val - 1) * 8))
                                       + ((z7 - 1) * 4)) + ((z8 - 1) * 2)) +
                                     ((z9 - 1) * 1)) + 1)))),
                    "assigning variable acc0", index_uni(z6_val));
                }
                current_statement__ = 153;
                assign(m6,
                  (rvalue(m6, "m6",
                     index_uni(((((((z10 - 1) * 8) + ((z7 - 1) * 4)) +
                                   ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1))) +
                    log_sum_exp(acc0)),
                  "assigning variable m6", index_uni(((((((z10 - 1) * 8) +
                                                          ((z7 - 1) * 4)) +
                                                         ((z8 - 1) * 2)) +
                                                        ((z9 - 1) * 1)) + 1)));
              }
            }
          }
        }
      }
      current_statement__ = 163;
      assign(m7, rep_array(0, 8), "assigning variable m7");
      current_statement__ = 176;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 174;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 172;
          for (int z10 = 1; z10 <= 2; ++z10) {
            {
              Eigen::Matrix<double, -1, 1> acc0;
              acc0 = Eigen::Matrix<double, -1, 1>(2);
              stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
              
              
              current_statement__ = 165;
              assign(acc0, rep_vector(0, 2), "assigning variable acc0");
              current_statement__ = 168;
              for (int z7_val = 1; z7_val <= 2; ++z7_val) {
                current_statement__ = 166;
                assign(acc0,
                  (rvalue(acc0, "acc0", index_uni(z7_val)) +
                    rvalue(m6, "m6",
                      index_uni(((((((z10 - 1) * 8) + ((z7_val - 1) * 4)) +
                                    ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
                  "assigning variable acc0", index_uni(z7_val));
              }
              current_statement__ = 169;
              assign(m7,
                (rvalue(m7, "m7",
                   index_uni((((((z10 - 1) * 4) + ((z8 - 1) * 2)) +
                                ((z9 - 1) * 1)) + 1))) + log_sum_exp(acc0)),
                "assigning variable m7", index_uni((((((z10 - 1) * 4) +
                                                       ((z8 - 1) * 2)) +
                                                      ((z9 - 1) * 1)) + 1)));
            }
          }
        }
      }
      current_statement__ = 177;
      assign(m8, rep_array(0, 4), "assigning variable m8");
      current_statement__ = 188;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 186;
        for (int z10 = 1; z10 <= 2; ++z10) {
          {
            Eigen::Matrix<double, -1, 1> acc0;
            acc0 = Eigen::Matrix<double, -1, 1>(2);
            stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
            
            current_statement__ = 179;
            assign(acc0, rep_vector(0, 2), "assigning variable acc0");
            current_statement__ = 182;
            for (int z8_val = 1; z8_val <= 2; ++z8_val) {
              current_statement__ = 180;
              assign(acc0,
                (rvalue(acc0, "acc0", index_uni(z8_val)) +
                  rvalue(m7, "m7",
                    index_uni((((((z10 - 1) * 4) + ((z8_val - 1) * 2)) +
                                 ((z9 - 1) * 1)) + 1)))),
                "assigning variable acc0", index_uni(z8_val));
            }
            current_statement__ = 183;
            assign(m8,
              (rvalue(m8, "m8",
                 index_uni(((((z10 - 1) * 2) + ((z9 - 1) * 1)) + 1))) +
                log_sum_exp(acc0)),
              "assigning variable m8", index_uni(((((z10 - 1) * 2) +
                                                    ((z9 - 1) * 1)) + 1)));
          }
        }
      }
      current_statement__ = 189;
      assign(m9, rep_array(0, 2), "assigning variable m9");
      current_statement__ = 198;
      for (int z10 = 1; z10 <= 2; ++z10) {
        {
          Eigen::Matrix<double, -1, 1> acc0;
          acc0 = Eigen::Matrix<double, -1, 1>(2);
          stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 191;
          assign(acc0, rep_vector(0, 2), "assigning variable acc0");
          current_statement__ = 194;
          for (int z9_val = 1; z9_val <= 2; ++z9_val) {
            current_statement__ = 192;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z9_val)) +
                rvalue(m8, "m8",
                  index_uni(((((z10 - 1) * 2) + ((z9_val - 1) * 1)) + 1)))),
              "assigning variable acc0", index_uni(z9_val));
          }
          current_statement__ = 195;
          assign(m9, (rvalue(m9, "m9", index_uni(z10)) + log_sum_exp(acc0)),
            "assigning variable m9", index_uni(z10));
        }
      }
      current_statement__ = 199;
      m10 = 0;
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 201;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 204;
        for (int z10_val = 1; z10_val <= 2; ++z10_val) {
          current_statement__ = 202;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z10_val)) +
              rvalue(m9, "m9", index_uni((((z10_val - 1) * 1) + 1)))),
            "assigning variable acc0", index_uni(z10_val));
        }
        current_statement__ = 205;
        m10 = (m10 + log_sum_exp(acc0));
      }
      if (emit_transformed_parameters__) {
        out__.write(m1);
        out__.write(m10);
        out__.write(m2);
        out__.write(m3);
        out__.write(m4);
        out__.write(m5);
        out__.write(m6);
        out__.write(m7);
        out__.write(m8);
        out__.write(m9);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      int z1;
      z1 = std::numeric_limits<int>::min();
      
      int z10;
      z10 = std::numeric_limits<int>::min();
      
      int z2;
      z2 = std::numeric_limits<int>::min();
      
      int z3;
      z3 = std::numeric_limits<int>::min();
      
      int z4;
      z4 = std::numeric_limits<int>::min();
      
      int z5;
      z5 = std::numeric_limits<int>::min();
      
      int z6;
      z6 = std::numeric_limits<int>::min();
      
      int z7;
      z7 = std::numeric_limits<int>::min();
      
      int z8;
      z8 = std::numeric_limits<int>::min();
      
      int z9;
      z9 = std::numeric_limits<int>::min();
      
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 218;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 221;
        for (int z10_val = 1; z10_val <= 2; ++z10_val) {
          current_statement__ = 219;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z10_val)) +
              rvalue(m9, "m9", index_uni((((z10_val - 1) * 1) + 1)))),
            "assigning variable acc0", index_uni(z10_val));
        }
        current_statement__ = 222;
        z10 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 225;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 228;
        for (int z9_val = 1; z9_val <= 2; ++z9_val) {
          current_statement__ = 226;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z9_val)) +
              rvalue(m8, "m8",
                index_uni(((((z10 - 1) * 2) + ((z9_val - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z9_val));
        }
        current_statement__ = 229;
        z9 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 232;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 235;
        for (int z8_val = 1; z8_val <= 2; ++z8_val) {
          current_statement__ = 233;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z8_val)) +
              rvalue(m7, "m7",
                index_uni((((((z10 - 1) * 4) + ((z8_val - 1) * 2)) +
                             ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z8_val));
        }
        current_statement__ = 236;
        z8 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 239;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 242;
        for (int z7_val = 1; z7_val <= 2; ++z7_val) {
          current_statement__ = 240;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z7_val)) +
              rvalue(m6, "m6",
                index_uni(((((((z10 - 1) * 8) + ((z7_val - 1) * 4)) +
                              ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z7_val));
        }
        current_statement__ = 243;
        z7 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 246;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 249;
        for (int z6_val = 1; z6_val <= 2; ++z6_val) {
          current_statement__ = 247;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z6_val)) +
              rvalue(m5, "m5",
                index_uni((((((((z10 - 1) * 16) + ((z6_val - 1) * 8)) +
                               ((z7 - 1) * 4)) + ((z8 - 1) * 2)) +
                             ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z6_val));
        }
        current_statement__ = 250;
        z6 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 253;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 256;
        for (int z5_val = 1; z5_val <= 2; ++z5_val) {
          current_statement__ = 254;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z5_val)) +
              rvalue(m4, "m4",
                index_uni(((((((((z10 - 1) * 32) + ((z5_val - 1) * 16)) +
                                ((z6 - 1) * 8)) + ((z7 - 1) * 4)) +
                              ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z5_val));
        }
        current_statement__ = 257;
        z5 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 260;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 263;
        for (int z4_val = 1; z4_val <= 2; ++z4_val) {
          current_statement__ = 261;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z4_val)) +
              rvalue(m3, "m3",
                index_uni((((((((((z10 - 1) * 64) + ((z4_val - 1) * 32)) +
                                 ((z5 - 1) * 16)) + ((z6 - 1) * 8)) +
                               ((z7 - 1) * 4)) + ((z8 - 1) * 2)) +
                             ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z4_val));
        }
        current_statement__ = 264;
        z4 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 267;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 270;
        for (int z3_val = 1; z3_val <= 2; ++z3_val) {
          current_statement__ = 268;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z3_val)) +
              rvalue(m2, "m2",
                index_uni(((((((((((z10 - 1) * 128) + ((z3_val - 1) * 64)) +
                                  ((z4 - 1) * 32)) + ((z5 - 1) * 16)) +
                                ((z6 - 1) * 8)) + ((z7 - 1) * 4)) +
                              ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z3_val));
        }
        current_statement__ = 271;
        z3 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 274;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 277;
        for (int z2_val = 1; z2_val <= 2; ++z2_val) {
          current_statement__ = 275;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z2_val)) +
              rvalue(m1, "m1",
                index_uni((((((((((((z10 - 1) * 256) + ((z2_val - 1) * 128))
                                   + ((z3 - 1) * 64)) + ((z4 - 1) * 32)) +
                                 ((z5 - 1) * 16)) + ((z6 - 1) * 8)) +
                               ((z7 - 1) * 4)) + ((z8 - 1) * 2)) +
                             ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z2_val));
        }
        current_statement__ = 278;
        z2 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 281;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 300;
        for (int z1_val = 1; z1_val <= 2; ++z1_val) {
          current_statement__ = 282;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z1_val - 1), prior1)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 283;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z2 - 1), prior2)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 284;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z3 - 1), prior3)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 285;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z4 - 1), prior4)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 286;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z5 - 1), prior5)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 287;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z6 - 1), prior6)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 288;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z7 - 1), prior7)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 289;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z8 - 1), prior8)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 290;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z9 - 1), prior9)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 291;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z10 - 1), prior10)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 298;
          if (logical_gt(
                ((((((((((z1_val + z2) + z3) + z4) + z5) + z6) + z7) + z8) +
                    z9) + z10) - 10), 0)) {
            current_statement__ = 295;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d1, 135, 8)),
              "assigning variable acc0", index_uni(z1_val));
            current_statement__ = 296;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d2, 135, 8)),
              "assigning variable acc0", index_uni(z1_val));
          } else {
            current_statement__ = 292;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d1, 80, 8)),
              "assigning variable acc0", index_uni(z1_val));
            current_statement__ = 293;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d2, 80, 8)),
              "assigning variable acc0", index_uni(z1_val));
          }
        }
        current_statement__ = 301;
        z1 = categorical_logit_rng(acc0, base_rng__);
      }
      out__.write(z1);
      out__.write(z10);
      out__.write(z2);
      out__.write(z3);
      out__.write(z4);
      out__.write(z5);
      out__.write(z6);
      out__.write(z7);
      out__.write(z8);
      out__.write(z9);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      local_scalar_t__ prior1;
      prior1 = DUMMY_VAR__;
      
      prior1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior1);
      local_scalar_t__ prior10;
      prior10 = DUMMY_VAR__;
      
      prior10 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior10);
      local_scalar_t__ prior2;
      prior2 = DUMMY_VAR__;
      
      prior2 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior2);
      local_scalar_t__ prior3;
      prior3 = DUMMY_VAR__;
      
      prior3 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior3);
      local_scalar_t__ prior4;
      prior4 = DUMMY_VAR__;
      
      prior4 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior4);
      local_scalar_t__ prior5;
      prior5 = DUMMY_VAR__;
      
      prior5 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior5);
      local_scalar_t__ prior6;
      prior6 = DUMMY_VAR__;
      
      prior6 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior6);
      local_scalar_t__ prior7;
      prior7 = DUMMY_VAR__;
      
      prior7 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior7);
      local_scalar_t__ prior8;
      prior8 = DUMMY_VAR__;
      
      prior8 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior8);
      local_scalar_t__ prior9;
      prior9 = DUMMY_VAR__;
      
      prior9 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior9);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"prior1", "prior10", "prior2",
      "prior3", "prior4", "prior5", "prior6", "prior7", "prior8", "prior9",
      "m1", "m10", "m2", "m3", "m4", "m5", "m6", "m7", "m8", "m9", "z1",
      "z10", "z2", "z3", "z4", "z5", "z6", "z7", "z8", "z9"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(512)},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(256)},
      std::vector<size_t>{static_cast<size_t>(128)},
      std::vector<size_t>{static_cast<size_t>(64)},
      std::vector<size_t>{static_cast<size_t>(32)},
      std::vector<size_t>{static_cast<size_t>(16)},
      std::vector<size_t>{static_cast<size_t>(8)},
      std::vector<size_t>{static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(2)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "prior1");
    param_names__.emplace_back(std::string() + "prior10");
    param_names__.emplace_back(std::string() + "prior2");
    param_names__.emplace_back(std::string() + "prior3");
    param_names__.emplace_back(std::string() + "prior4");
    param_names__.emplace_back(std::string() + "prior5");
    param_names__.emplace_back(std::string() + "prior6");
    param_names__.emplace_back(std::string() + "prior7");
    param_names__.emplace_back(std::string() + "prior8");
    param_names__.emplace_back(std::string() + "prior9");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 512; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m1" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "m10");
      for (int sym1__ = 1; sym1__ <= 256; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 128; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m3" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 64; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m4" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 32; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m5" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 16; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m6" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m7" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m8" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m9" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "z1");
      param_names__.emplace_back(std::string() + "z10");
      param_names__.emplace_back(std::string() + "z2");
      param_names__.emplace_back(std::string() + "z3");
      param_names__.emplace_back(std::string() + "z4");
      param_names__.emplace_back(std::string() + "z5");
      param_names__.emplace_back(std::string() + "z6");
      param_names__.emplace_back(std::string() + "z7");
      param_names__.emplace_back(std::string() + "z8");
      param_names__.emplace_back(std::string() + "z9");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "prior1");
    param_names__.emplace_back(std::string() + "prior10");
    param_names__.emplace_back(std::string() + "prior2");
    param_names__.emplace_back(std::string() + "prior3");
    param_names__.emplace_back(std::string() + "prior4");
    param_names__.emplace_back(std::string() + "prior5");
    param_names__.emplace_back(std::string() + "prior6");
    param_names__.emplace_back(std::string() + "prior7");
    param_names__.emplace_back(std::string() + "prior8");
    param_names__.emplace_back(std::string() + "prior9");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 512; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m1" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "m10");
      for (int sym1__ = 1; sym1__ <= 256; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 128; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m3" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 64; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m4" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 32; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m5" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 16; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m6" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m7" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m8" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m9" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "z1");
      param_names__.emplace_back(std::string() + "z10");
      param_names__.emplace_back(std::string() + "z2");
      param_names__.emplace_back(std::string() + "z3");
      param_names__.emplace_back(std::string() + "z4");
      param_names__.emplace_back(std::string() + "z5");
      param_names__.emplace_back(std::string() + "z6");
      param_names__.emplace_back(std::string() + "z7");
      param_names__.emplace_back(std::string() + "z8");
      param_names__.emplace_back(std::string() + "z9");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"prior1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior10\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior5\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior6\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior7\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior8\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior9\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(512) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m10\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"m2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(256) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(128) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(64) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(32) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(16) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m9\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"z1\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z10\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z2\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z3\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z4\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z5\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z6\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z7\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z8\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z9\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"prior1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior10\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior5\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior6\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior7\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior8\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior9\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(512) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m10\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"m2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(256) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(128) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(64) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(32) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(16) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m9\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"z1\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z10\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z2\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z3\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z4\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z5\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z6\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z7\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z8\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z9\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  (((((((((512 + 1) + 256) + 128) + 64) + 32) + 16) + 8) + 4) + 2);
      const size_t num_gen_quantities = 
  (((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  (((((((((512 + 1) + 256) + 128) + 64) + 32) + 16) + 8) + 4) + 2);
      const size_t num_gen_quantities = 
  (((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 10> names__{"prior1", "prior10",
      "prior2", "prior3", "prior4", "prior5", "prior6", "prior7", "prior8",
      "prior9"};
      const std::array<Eigen::Index, 10> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = or_10_model_namespace::or_10_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return or_10_model_namespace::profiles__;
}

#endif


