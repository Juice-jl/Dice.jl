
// Code generated by stanc v2.28.1
#include <stan/model/model_header.hpp>
namespace or_25_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 1141> locations_array__ = 
{" (found before start of program)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 7, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 8, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 9, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 10, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 11, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 12, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 13, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 14, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 15, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 16, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 17, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 18, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 19, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 20, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 21, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 22, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 23, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 24, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 25, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 26, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 27, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 28, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 29, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 30, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 31, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 35, column 1 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 151, column 1 to column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 152, column 1 to column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 153, column 1 to column 16)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 154, column 1 to column 16)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 155, column 1 to column 16)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 156, column 1 to column 16)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 157, column 1 to column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 158, column 1 to column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 159, column 1 to column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 160, column 1 to column 14)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 161, column 1 to column 18)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 162, column 1 to column 14)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 163, column 1 to column 14)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 164, column 1 to column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 165, column 1 to column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 166, column 1 to column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 167, column 2 to column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 168, column 1 to column 18)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 169, column 1 to column 18)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 170, column 1 to column 18)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 171, column 1 to column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 172, column 1 to column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 173, column 1 to column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 174, column 1 to column 16)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 36, column 2 to column 30)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 61, column 52 to column 67)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 62, column 52 to column 75)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 64, column 54 to column 107)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 65, column 54 to column 103)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 66, column 54 to column 103)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 67, column 54 to column 103)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 68, column 54 to column 103)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 69, column 54 to column 103)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 70, column 54 to column 103)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 71, column 54 to column 103)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 72, column 54 to column 103)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 73, column 54 to column 105)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 74, column 54 to column 105)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 75, column 54 to column 105)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 76, column 54 to column 105)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 77, column 54 to column 105)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 78, column 54 to column 105)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 79, column 54 to column 105)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 80, column 54 to column 105)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 81, column 54 to column 105)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 82, column 54 to column 105)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 83, column 54 to column 105)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 84, column 54 to column 105)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 85, column 54 to column 105)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 86, column 54 to column 105)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 87, column 54 to column 105)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 88, column 54 to column 105)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 95, column 56 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 96, column 56 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 94, column 58 to line 98, column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 90, column 56 to column 96)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 91, column 56 to column 96)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 89, column 261 to line 93, column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 89, column 54 to line 98, column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 63, column 72 to line 99, column 53)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 63, column 52 to line 99, column 53)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 100, column 52 to column 385)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 61, column 50 to line 101, column 51)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 60, column 65 to line 103, column 49)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 60, column 48 to line 103, column 49)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 59, column 63 to line 105, column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 59, column 46 to line 105, column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 58, column 61 to line 107, column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 58, column 44 to line 107, column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 57, column 59 to line 109, column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 57, column 42 to line 109, column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 56, column 57 to line 111, column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 56, column 40 to line 111, column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 55, column 55 to line 113, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 55, column 38 to line 113, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 54, column 53 to line 115, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 54, column 36 to line 115, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 53, column 51 to line 117, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 53, column 34 to line 117, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 52, column 49 to line 119, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 52, column 32 to line 119, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 51, column 47 to line 121, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 51, column 30 to line 121, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 50, column 44 to line 123, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 50, column 28 to line 123, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 49, column 43 to line 125, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 49, column 26 to line 125, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 48, column 41 to line 127, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 48, column 24 to line 127, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 47, column 39 to line 129, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 47, column 22 to line 129, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 46, column 37 to line 131, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 46, column 20 to line 131, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 45, column 35 to line 133, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 45, column 18 to line 133, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 44, column 33 to line 135, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 44, column 16 to line 135, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 43, column 30 to line 137, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 43, column 14 to line 137, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 42, column 28 to line 139, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 42, column 12 to line 139, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 41, column 26 to line 141, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 41, column 10 to line 141, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 40, column 24 to line 143, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 40, column 8 to line 143, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 39, column 22 to line 145, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 39, column 6 to line 145, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 38, column 20 to line 147, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 38, column 4 to line 147, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 37, column 18 to line 149, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 37, column 2 to line 149, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 175, column 2 to column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 199, column 50 to column 65)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 200, column 50 to column 73)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 202, column 52 to column 384)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 201, column 70 to line 204, column 51)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 201, column 50 to line 204, column 51)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 205, column 50 to column 368)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 199, column 48 to line 206, column 49)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 198, column 63 to line 208, column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 198, column 46 to line 208, column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 197, column 61 to line 210, column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 197, column 44 to line 210, column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 196, column 59 to line 212, column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 196, column 42 to line 212, column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 195, column 57 to line 214, column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 195, column 40 to line 214, column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 194, column 55 to line 216, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 194, column 38 to line 216, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 193, column 53 to line 218, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 193, column 36 to line 218, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 192, column 51 to line 220, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 192, column 34 to line 220, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 191, column 49 to line 222, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 191, column 32 to line 222, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 190, column 47 to line 224, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 190, column 30 to line 224, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 189, column 45 to line 226, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 189, column 28 to line 226, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 188, column 43 to line 228, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 188, column 26 to line 228, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 187, column 41 to line 230, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 187, column 24 to line 230, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 186, column 39 to line 232, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 186, column 22 to line 232, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 185, column 37 to line 234, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 185, column 20 to line 234, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 184, column 35 to line 236, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 184, column 18 to line 236, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 183, column 33 to line 238, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 183, column 16 to line 238, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 182, column 30 to line 240, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 182, column 14 to line 240, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 181, column 28 to line 242, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 181, column 12 to line 242, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 180, column 26 to line 244, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 180, column 10 to line 244, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 179, column 24 to line 246, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 179, column 8 to line 246, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 178, column 22 to line 248, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 178, column 6 to line 248, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 177, column 20 to line 250, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 177, column 4 to line 250, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 176, column 18 to line 252, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 176, column 2 to line 252, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 253, column 2 to column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 276, column 48 to column 63)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 277, column 48 to column 71)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 279, column 50 to column 367)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 278, column 68 to line 281, column 49)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 278, column 48 to line 281, column 49)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 282, column 48 to column 351)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 276, column 46 to line 283, column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 275, column 61 to line 285, column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 275, column 44 to line 285, column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 274, column 59 to line 287, column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 274, column 42 to line 287, column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 273, column 57 to line 289, column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 273, column 40 to line 289, column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 272, column 55 to line 291, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 272, column 38 to line 291, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 271, column 53 to line 293, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 271, column 36 to line 293, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 270, column 51 to line 295, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 270, column 34 to line 295, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 269, column 49 to line 297, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 269, column 32 to line 297, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 268, column 47 to line 299, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 268, column 30 to line 299, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 267, column 45 to line 301, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 267, column 28 to line 301, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 266, column 43 to line 303, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 266, column 26 to line 303, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 265, column 41 to line 305, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 265, column 24 to line 305, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 264, column 39 to line 307, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 264, column 22 to line 307, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 263, column 37 to line 309, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 263, column 20 to line 309, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 262, column 35 to line 311, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 262, column 18 to line 311, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 261, column 33 to line 313, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 261, column 16 to line 313, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 260, column 31 to line 315, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 260, column 14 to line 315, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 259, column 28 to line 317, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 259, column 12 to line 317, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 258, column 26 to line 319, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 258, column 10 to line 319, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 257, column 24 to line 321, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 257, column 8 to line 321, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 256, column 22 to line 323, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 256, column 6 to line 323, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 255, column 20 to line 325, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 255, column 4 to line 325, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 254, column 18 to line 327, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 254, column 2 to line 327, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 328, column 2 to column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 350, column 46 to column 61)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 351, column 46 to column 69)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 353, column 48 to column 350)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 352, column 66 to line 355, column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 352, column 46 to line 355, column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 356, column 46 to column 334)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 350, column 44 to line 357, column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 349, column 59 to line 359, column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 349, column 42 to line 359, column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 348, column 57 to line 361, column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 348, column 40 to line 361, column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 347, column 55 to line 363, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 347, column 38 to line 363, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 346, column 53 to line 365, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 346, column 36 to line 365, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 345, column 51 to line 367, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 345, column 34 to line 367, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 344, column 49 to line 369, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 344, column 32 to line 369, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 343, column 47 to line 371, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 343, column 30 to line 371, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 342, column 45 to line 373, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 342, column 28 to line 373, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 341, column 43 to line 375, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 341, column 26 to line 375, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 340, column 41 to line 377, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 340, column 24 to line 377, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 339, column 39 to line 379, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 339, column 22 to line 379, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 338, column 37 to line 381, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 338, column 20 to line 381, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 337, column 35 to line 383, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 337, column 18 to line 383, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 336, column 33 to line 385, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 336, column 16 to line 385, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 335, column 31 to line 387, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 335, column 14 to line 387, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 334, column 29 to line 389, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 334, column 12 to line 389, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 333, column 26 to line 391, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 333, column 10 to line 391, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 332, column 24 to line 393, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 332, column 8 to line 393, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 331, column 22 to line 395, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 331, column 6 to line 395, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 330, column 20 to line 397, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 330, column 4 to line 397, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 329, column 18 to line 399, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 329, column 2 to line 399, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 400, column 2 to column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 421, column 44 to column 59)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 422, column 44 to column 67)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 424, column 46 to column 333)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 423, column 64 to line 426, column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 423, column 44 to line 426, column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 427, column 44 to column 317)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 421, column 42 to line 428, column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 420, column 57 to line 430, column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 420, column 40 to line 430, column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 419, column 55 to line 432, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 419, column 38 to line 432, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 418, column 53 to line 434, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 418, column 36 to line 434, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 417, column 51 to line 436, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 417, column 34 to line 436, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 416, column 49 to line 438, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 416, column 32 to line 438, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 415, column 47 to line 440, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 415, column 30 to line 440, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 414, column 45 to line 442, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 414, column 28 to line 442, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 413, column 43 to line 444, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 413, column 26 to line 444, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 412, column 41 to line 446, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 412, column 24 to line 446, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 411, column 39 to line 448, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 411, column 22 to line 448, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 410, column 37 to line 450, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 410, column 20 to line 450, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 409, column 35 to line 452, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 409, column 18 to line 452, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 408, column 33 to line 454, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 408, column 16 to line 454, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 407, column 31 to line 456, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 407, column 14 to line 456, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 406, column 29 to line 458, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 406, column 12 to line 458, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 405, column 27 to line 460, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 405, column 10 to line 460, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 404, column 24 to line 462, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 404, column 8 to line 462, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 403, column 22 to line 464, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 403, column 6 to line 464, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 402, column 20 to line 466, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 402, column 4 to line 466, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 401, column 18 to line 468, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 401, column 2 to line 468, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 469, column 2 to column 28)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 489, column 42 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 490, column 42 to column 65)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 492, column 44 to column 316)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 491, column 62 to line 494, column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 491, column 42 to line 494, column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 495, column 42 to column 301)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 489, column 40 to line 496, column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 488, column 55 to line 498, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 488, column 38 to line 498, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 487, column 53 to line 500, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 487, column 36 to line 500, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 486, column 51 to line 502, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 486, column 34 to line 502, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 485, column 49 to line 504, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 485, column 32 to line 504, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 484, column 47 to line 506, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 484, column 30 to line 506, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 483, column 45 to line 508, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 483, column 28 to line 508, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 482, column 43 to line 510, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 482, column 26 to line 510, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 481, column 41 to line 512, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 481, column 24 to line 512, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 480, column 39 to line 514, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 480, column 22 to line 514, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 479, column 37 to line 516, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 479, column 20 to line 516, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 478, column 35 to line 518, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 478, column 18 to line 518, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 477, column 33 to line 520, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 477, column 16 to line 520, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 476, column 31 to line 522, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 476, column 14 to line 522, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 475, column 29 to line 524, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 475, column 12 to line 524, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 474, column 27 to line 526, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 474, column 10 to line 526, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 473, column 25 to line 528, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 473, column 8 to line 528, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 472, column 22 to line 530, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 472, column 6 to line 530, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 471, column 20 to line 532, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 471, column 4 to line 532, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 470, column 18 to line 534, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 470, column 2 to line 534, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 535, column 2 to column 28)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 554, column 40 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 555, column 40 to column 63)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 557, column 42 to column 300)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 556, column 60 to line 559, column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 556, column 40 to line 559, column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 560, column 40 to column 285)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 554, column 38 to line 561, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 553, column 53 to line 563, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 553, column 36 to line 563, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 552, column 51 to line 565, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 552, column 34 to line 565, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 551, column 49 to line 567, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 551, column 32 to line 567, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 550, column 47 to line 569, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 550, column 30 to line 569, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 549, column 45 to line 571, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 549, column 28 to line 571, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 548, column 43 to line 573, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 548, column 26 to line 573, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 547, column 41 to line 575, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 547, column 24 to line 575, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 546, column 39 to line 577, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 546, column 22 to line 577, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 545, column 37 to line 579, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 545, column 20 to line 579, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 544, column 35 to line 581, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 544, column 18 to line 581, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 543, column 33 to line 583, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 543, column 16 to line 583, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 542, column 31 to line 585, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 542, column 14 to line 585, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 541, column 29 to line 587, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 541, column 12 to line 587, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 540, column 27 to line 589, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 540, column 10 to line 589, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 539, column 25 to line 591, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 539, column 8 to line 591, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 538, column 23 to line 593, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 538, column 6 to line 593, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 537, column 20 to line 595, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 537, column 4 to line 595, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 536, column 18 to line 597, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 536, column 2 to line 597, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 598, column 2 to column 28)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 616, column 38 to column 53)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 617, column 38 to column 61)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 619, column 40 to column 284)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 618, column 58 to line 621, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 618, column 38 to line 621, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 622, column 38 to column 269)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 616, column 36 to line 623, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 615, column 51 to line 625, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 615, column 34 to line 625, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 614, column 49 to line 627, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 614, column 32 to line 627, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 613, column 47 to line 629, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 613, column 30 to line 629, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 612, column 45 to line 631, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 612, column 28 to line 631, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 611, column 43 to line 633, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 611, column 26 to line 633, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 610, column 41 to line 635, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 610, column 24 to line 635, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 609, column 39 to line 637, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 609, column 22 to line 637, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 608, column 37 to line 639, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 608, column 20 to line 639, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 607, column 35 to line 641, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 607, column 18 to line 641, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 606, column 33 to line 643, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 606, column 16 to line 643, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 605, column 31 to line 645, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 605, column 14 to line 645, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 604, column 29 to line 647, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 604, column 12 to line 647, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 603, column 27 to line 649, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 603, column 10 to line 649, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 602, column 25 to line 651, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 602, column 8 to line 651, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 601, column 23 to line 653, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 601, column 6 to line 653, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 600, column 21 to line 655, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 600, column 4 to line 655, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 599, column 18 to line 657, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 599, column 2 to line 657, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 658, column 2 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 675, column 36 to column 51)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 676, column 36 to column 59)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 678, column 38 to column 268)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 677, column 56 to line 680, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 677, column 36 to line 680, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 681, column 36 to column 254)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 675, column 34 to line 682, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 674, column 49 to line 684, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 674, column 32 to line 684, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 673, column 47 to line 686, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 673, column 30 to line 686, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 672, column 45 to line 688, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 672, column 28 to line 688, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 671, column 43 to line 690, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 671, column 26 to line 690, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 670, column 41 to line 692, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 670, column 24 to line 692, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 669, column 39 to line 694, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 669, column 22 to line 694, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 668, column 37 to line 696, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 668, column 20 to line 696, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 667, column 35 to line 698, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 667, column 18 to line 698, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 666, column 33 to line 700, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 666, column 16 to line 700, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 665, column 31 to line 702, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 665, column 14 to line 702, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 664, column 29 to line 704, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 664, column 12 to line 704, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 663, column 27 to line 706, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 663, column 10 to line 706, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 662, column 25 to line 708, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 662, column 8 to line 708, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 661, column 23 to line 710, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 661, column 6 to line 710, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 660, column 21 to line 712, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 660, column 4 to line 712, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 659, column 19 to line 714, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 659, column 2 to line 714, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 715, column 2 to column 28)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 731, column 34 to column 49)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 732, column 34 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 734, column 36 to column 254)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 733, column 55 to line 736, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 733, column 34 to line 736, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 737, column 34 to column 239)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 731, column 32 to line 738, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 730, column 47 to line 740, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 730, column 30 to line 740, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 729, column 45 to line 742, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 729, column 28 to line 742, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 728, column 43 to line 744, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 728, column 26 to line 744, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 727, column 41 to line 746, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 727, column 24 to line 746, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 726, column 39 to line 748, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 726, column 22 to line 748, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 725, column 37 to line 750, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 725, column 20 to line 750, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 724, column 35 to line 752, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 724, column 18 to line 752, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 723, column 33 to line 754, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 723, column 16 to line 754, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 722, column 31 to line 756, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 722, column 14 to line 756, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 721, column 29 to line 758, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 721, column 12 to line 758, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 720, column 27 to line 760, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 720, column 10 to line 760, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 719, column 25 to line 762, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 719, column 8 to line 762, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 718, column 23 to line 764, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 718, column 6 to line 764, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 717, column 21 to line 766, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 717, column 4 to line 766, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 716, column 19 to line 768, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 716, column 2 to line 768, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 769, column 2 to column 28)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 784, column 32 to column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 785, column 32 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 787, column 34 to column 239)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 786, column 53 to line 789, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 786, column 32 to line 789, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 790, column 32 to column 223)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 784, column 30 to line 791, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 783, column 45 to line 793, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 783, column 28 to line 793, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 782, column 43 to line 795, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 782, column 26 to line 795, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 781, column 41 to line 797, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 781, column 24 to line 797, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 780, column 39 to line 799, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 780, column 22 to line 799, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 779, column 37 to line 801, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 779, column 20 to line 801, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 778, column 35 to line 803, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 778, column 18 to line 803, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 777, column 33 to line 805, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 777, column 16 to line 805, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 776, column 31 to line 807, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 776, column 14 to line 807, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 775, column 29 to line 809, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 775, column 12 to line 809, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 774, column 27 to line 811, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 774, column 10 to line 811, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 773, column 25 to line 813, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 773, column 8 to line 813, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 772, column 23 to line 815, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 772, column 6 to line 815, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 771, column 21 to line 817, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 771, column 4 to line 817, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 770, column 19 to line 819, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 770, column 2 to line 819, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 820, column 2 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 834, column 30 to column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 835, column 30 to column 53)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 837, column 32 to column 223)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 836, column 51 to line 839, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 836, column 30 to line 839, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 840, column 30 to column 208)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 834, column 28 to line 841, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 833, column 43 to line 843, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 833, column 26 to line 843, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 832, column 41 to line 845, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 832, column 24 to line 845, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 831, column 39 to line 847, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 831, column 22 to line 847, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 830, column 37 to line 849, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 830, column 20 to line 849, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 829, column 35 to line 851, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 829, column 18 to line 851, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 828, column 33 to line 853, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 828, column 16 to line 853, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 827, column 31 to line 855, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 827, column 14 to line 855, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 826, column 29 to line 857, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 826, column 12 to line 857, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 825, column 27 to line 859, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 825, column 10 to line 859, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 824, column 25 to line 861, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 824, column 8 to line 861, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 823, column 23 to line 863, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 823, column 6 to line 863, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 822, column 21 to line 865, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 822, column 4 to line 865, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 821, column 19 to line 867, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 821, column 2 to line 867, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 868, column 2 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 881, column 28 to column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 882, column 28 to column 51)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 884, column 30 to column 208)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 883, column 49 to line 886, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 883, column 28 to line 886, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 887, column 28 to column 193)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 881, column 26 to line 888, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 880, column 41 to line 890, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 880, column 24 to line 890, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 879, column 39 to line 892, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 879, column 22 to line 892, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 878, column 37 to line 894, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 878, column 20 to line 894, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 877, column 35 to line 896, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 877, column 18 to line 896, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 876, column 33 to line 898, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 876, column 16 to line 898, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 875, column 31 to line 900, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 875, column 14 to line 900, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 874, column 29 to line 902, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 874, column 12 to line 902, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 873, column 27 to line 904, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 873, column 10 to line 904, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 872, column 25 to line 906, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 872, column 8 to line 906, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 871, column 23 to line 908, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 871, column 6 to line 908, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 870, column 21 to line 910, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 870, column 4 to line 910, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 869, column 19 to line 912, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 869, column 2 to line 912, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 913, column 2 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 925, column 26 to column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 926, column 26 to column 49)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 928, column 28 to column 193)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 927, column 47 to line 930, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 927, column 26 to line 930, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 931, column 26 to column 178)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 925, column 24 to line 932, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 924, column 39 to line 934, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 924, column 22 to line 934, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 923, column 37 to line 936, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 923, column 20 to line 936, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 922, column 35 to line 938, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 922, column 18 to line 938, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 921, column 33 to line 940, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 921, column 16 to line 940, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 920, column 31 to line 942, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 920, column 14 to line 942, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 919, column 29 to line 944, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 919, column 12 to line 944, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 918, column 27 to line 946, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 918, column 10 to line 946, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 917, column 25 to line 948, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 917, column 8 to line 948, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 916, column 23 to line 950, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 916, column 6 to line 950, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 915, column 21 to line 952, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 915, column 4 to line 952, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 914, column 19 to line 954, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 914, column 2 to line 954, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 955, column 2 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 966, column 24 to column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 967, column 24 to column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 969, column 26 to column 178)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 968, column 45 to line 971, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 968, column 24 to line 971, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 972, column 24 to column 163)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 966, column 22 to line 973, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 965, column 37 to line 975, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 965, column 20 to line 975, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 964, column 35 to line 977, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 964, column 18 to line 977, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 963, column 33 to line 979, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 963, column 16 to line 979, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 962, column 31 to line 981, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 962, column 14 to line 981, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 961, column 29 to line 983, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 961, column 12 to line 983, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 960, column 27 to line 985, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 960, column 10 to line 985, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 959, column 25 to line 987, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 959, column 8 to line 987, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 958, column 23 to line 989, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 958, column 6 to line 989, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 957, column 21 to line 991, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 957, column 4 to line 991, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 956, column 19 to line 993, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 956, column 2 to line 993, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 994, column 2 to column 26)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1004, column 22 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1005, column 22 to column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1007, column 24 to column 163)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1006, column 43 to line 1009, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1006, column 22 to line 1009, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1010, column 22 to column 149)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1004, column 20 to line 1011, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1003, column 35 to line 1013, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1003, column 18 to line 1013, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1002, column 33 to line 1015, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1002, column 16 to line 1015, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1001, column 31 to line 1017, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1001, column 14 to line 1017, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1000, column 29 to line 1019, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1000, column 12 to line 1019, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 999, column 27 to line 1021, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 999, column 10 to line 1021, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 998, column 25 to line 1023, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 998, column 8 to line 1023, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 997, column 23 to line 1025, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 997, column 6 to line 1025, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 996, column 21 to line 1027, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 996, column 4 to line 1027, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 995, column 19 to line 1029, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 995, column 2 to line 1029, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1030, column 2 to column 26)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1039, column 20 to column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1040, column 20 to column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1042, column 22 to column 149)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1041, column 41 to line 1044, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1041, column 20 to line 1044, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1045, column 20 to column 135)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1039, column 18 to line 1046, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1038, column 33 to line 1048, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1038, column 16 to line 1048, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1037, column 31 to line 1050, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1037, column 14 to line 1050, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1036, column 29 to line 1052, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1036, column 12 to line 1052, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1035, column 27 to line 1054, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1035, column 10 to line 1054, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1034, column 25 to line 1056, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1034, column 8 to line 1056, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1033, column 23 to line 1058, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1033, column 6 to line 1058, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1032, column 21 to line 1060, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1032, column 4 to line 1060, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1031, column 19 to line 1062, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1031, column 2 to line 1062, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1063, column 2 to column 26)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1071, column 18 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1072, column 18 to column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1074, column 20 to column 135)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1073, column 39 to line 1076, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1073, column 18 to line 1076, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1077, column 18 to column 121)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1071, column 16 to line 1078, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1070, column 31 to line 1080, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1070, column 14 to line 1080, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1069, column 29 to line 1082, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1069, column 12 to line 1082, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1068, column 27 to line 1084, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1068, column 10 to line 1084, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1067, column 25 to line 1086, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1067, column 8 to line 1086, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1066, column 23 to line 1088, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1066, column 6 to line 1088, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1065, column 21 to line 1090, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1065, column 4 to line 1090, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1064, column 19 to line 1092, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1064, column 2 to line 1092, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1093, column 2 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1100, column 16 to column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1101, column 16 to column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1103, column 18 to column 121)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1102, column 37 to line 1105, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1102, column 16 to line 1105, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1106, column 16 to column 108)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1100, column 14 to line 1107, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1099, column 29 to line 1109, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1099, column 12 to line 1109, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1098, column 27 to line 1111, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1098, column 10 to line 1111, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1097, column 25 to line 1113, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1097, column 8 to line 1113, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1096, column 23 to line 1115, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1096, column 6 to line 1115, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1095, column 21 to line 1117, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1095, column 4 to line 1117, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1094, column 19 to line 1119, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1094, column 2 to line 1119, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1120, column 2 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1126, column 14 to column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1127, column 14 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1129, column 16 to column 108)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1128, column 35 to line 1131, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1128, column 14 to line 1131, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1132, column 14 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1126, column 12 to line 1133, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1125, column 27 to line 1135, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1125, column 10 to line 1135, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1124, column 25 to line 1137, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1124, column 8 to line 1137, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1123, column 23 to line 1139, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1123, column 6 to line 1139, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1122, column 21 to line 1141, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1122, column 4 to line 1141, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1121, column 19 to line 1143, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1121, column 2 to line 1143, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1144, column 2 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1149, column 12 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1150, column 12 to column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1152, column 14 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1151, column 33 to line 1154, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1151, column 12 to line 1154, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1155, column 12 to column 82)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1149, column 10 to line 1156, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1148, column 25 to line 1158, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1148, column 8 to line 1158, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1147, column 23 to line 1160, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1147, column 6 to line 1160, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1146, column 21 to line 1162, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1146, column 4 to line 1162, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1145, column 19 to line 1164, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1145, column 2 to line 1164, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1165, column 2 to column 24)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1169, column 10 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1170, column 10 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1172, column 12 to column 82)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1171, column 31 to line 1174, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1171, column 10 to line 1174, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1175, column 10 to column 70)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1169, column 8 to line 1176, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1168, column 23 to line 1178, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1168, column 6 to line 1178, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1167, column 21 to line 1180, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1167, column 4 to line 1180, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1166, column 19 to line 1182, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1166, column 2 to line 1182, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1183, column 2 to column 24)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1186, column 8 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1187, column 8 to column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1189, column 10 to column 70)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1188, column 29 to line 1191, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1188, column 8 to line 1191, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1192, column 8 to column 58)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1186, column 6 to line 1193, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1185, column 21 to line 1195, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1185, column 4 to line 1195, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1184, column 19 to line 1197, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1184, column 2 to line 1197, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1198, column 2 to column 24)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1200, column 6 to column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1201, column 6 to column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1203, column 8 to column 58)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1202, column 27 to line 1205, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1202, column 6 to line 1205, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1206, column 6 to column 36)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1200, column 4 to line 1207, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1199, column 19 to line 1209, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1199, column 2 to line 1209, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1210, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1211, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1212, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1214, column 6 to column 46)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1213, column 25 to line 1216, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1213, column 4 to line 1216, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1217, column 4 to column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1211, column 2 to line 1218, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1252, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1253, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1254, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1255, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1256, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1257, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1258, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1259, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1260, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1261, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1262, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1263, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1264, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1265, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1266, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1267, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1268, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1269, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1270, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1271, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1272, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1273, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1274, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1275, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1276, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1277, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1278, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1280, column 6 to column 46)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1279, column 25 to line 1282, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1279, column 4 to line 1282, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1283, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1277, column 2 to line 1284, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1285, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1286, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1288, column 6 to column 56)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1287, column 25 to line 1290, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1287, column 4 to line 1290, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1291, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1285, column 2 to line 1292, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1293, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1294, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1296, column 6 to column 66)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1295, column 25 to line 1298, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1295, column 4 to line 1298, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1299, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1293, column 2 to line 1300, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1301, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1302, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1304, column 6 to column 76)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1303, column 25 to line 1306, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1303, column 4 to line 1306, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1307, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1301, column 2 to line 1308, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1309, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1310, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1312, column 6 to column 87)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1311, column 25 to line 1314, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1311, column 4 to line 1314, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1315, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1309, column 2 to line 1316, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1317, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1318, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1320, column 6 to column 98)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1319, column 25 to line 1322, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1319, column 4 to line 1322, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1323, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1317, column 2 to line 1324, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1325, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1326, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1328, column 6 to column 109)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1327, column 25 to line 1330, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1327, column 4 to line 1330, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1331, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1325, column 2 to line 1332, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1333, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1334, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1336, column 6 to column 121)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1335, column 25 to line 1338, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1335, column 4 to line 1338, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1339, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1333, column 2 to line 1340, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1341, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1342, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1344, column 6 to column 133)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1343, column 25 to line 1346, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1343, column 4 to line 1346, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1347, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1341, column 2 to line 1348, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1349, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1350, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1352, column 6 to column 145)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1351, column 25 to line 1354, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1351, column 4 to line 1354, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1355, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1349, column 2 to line 1356, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1357, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1358, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1360, column 6 to column 158)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1359, column 25 to line 1362, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1359, column 4 to line 1362, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1363, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1357, column 2 to line 1364, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1365, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1366, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1368, column 6 to column 171)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1367, column 25 to line 1370, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1367, column 4 to line 1370, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1371, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1365, column 2 to line 1372, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1373, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1374, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1376, column 6 to column 184)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1375, column 25 to line 1378, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1375, column 4 to line 1378, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1379, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1373, column 2 to line 1380, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1381, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1382, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1384, column 6 to column 197)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1383, column 25 to line 1386, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1383, column 4 to line 1386, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1387, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1381, column 2 to line 1388, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1389, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1390, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1392, column 6 to column 211)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1391, column 25 to line 1394, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1391, column 4 to line 1394, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1395, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1389, column 2 to line 1396, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1397, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1398, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1400, column 6 to column 224)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1399, column 25 to line 1402, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1399, column 4 to line 1402, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1403, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1397, column 2 to line 1404, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1405, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1406, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1408, column 6 to column 236)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1407, column 24 to line 1410, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1407, column 4 to line 1410, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1411, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1405, column 2 to line 1412, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1413, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1414, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1416, column 6 to column 250)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1415, column 24 to line 1418, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1415, column 4 to line 1418, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1419, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1413, column 2 to line 1420, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1421, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1422, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1424, column 6 to column 264)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1423, column 24 to line 1426, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1423, column 4 to line 1426, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1427, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1421, column 2 to line 1428, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1429, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1430, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1432, column 6 to column 278)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1431, column 24 to line 1434, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1431, column 4 to line 1434, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1435, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1429, column 2 to line 1436, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1437, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1438, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1440, column 6 to column 293)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1439, column 24 to line 1442, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1439, column 4 to line 1442, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1443, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1437, column 2 to line 1444, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1445, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1446, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1448, column 6 to column 308)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1447, column 24 to line 1450, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1447, column 4 to line 1450, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1451, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1445, column 2 to line 1452, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1453, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1454, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1456, column 6 to column 323)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1455, column 24 to line 1458, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1455, column 4 to line 1458, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1459, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1453, column 2 to line 1460, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1461, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1462, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1464, column 6 to column 338)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1463, column 24 to line 1466, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1463, column 4 to line 1466, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1467, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1461, column 2 to line 1468, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1469, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1470, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1472, column 6 to column 59)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1473, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1474, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1475, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1476, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1477, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1478, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1479, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1480, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1481, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1482, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1483, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1484, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1485, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1486, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1487, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1488, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1489, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1490, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1491, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1492, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1493, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1494, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1495, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1496, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1503, column 8 to column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1504, column 8 to column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1502, column 10 to line 1506, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1498, column 8 to column 48)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1499, column 8 to column 48)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1497, column 213 to line 1501, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1497, column 6 to line 1506, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1471, column 24 to line 1507, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1471, column 4 to line 1507, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1508, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1469, column 2 to line 1509, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1223, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1224, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1225, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1226, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1227, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1228, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1229, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1230, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1231, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1232, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1233, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1234, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1235, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1236, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1237, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1238, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1239, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1240, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1241, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1242, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1243, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1244, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1245, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1246, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1247, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 1248, column 2 to column 16)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 2, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_25.stan', line 3, column 2 to column 10)"};



class or_25_model final : public model_base_crtp<or_25_model> {

 private:
  double d1;
  double d2; 
  
 
 public:
  ~or_25_model() { }
  
  inline std::string model_name() const final { return "or_25_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.1", "stancflags = "};
  }
  
  
  or_25_model(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "or_25_model_namespace::or_25_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 1139;
      context__.validate_dims("data initialization","d1","double",
           std::vector<size_t>{});
      d1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1139;
      d1 = context__.vals_r("d1")[(1 - 1)];
      current_statement__ = 1140;
      context__.validate_dims("data initialization","d2","double",
           std::vector<size_t>{});
      d2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1140;
      d2 = context__.vals_r("d2")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 
      1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "or_25_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ prior1;
      prior1 = DUMMY_VAR__;
      
      current_statement__ = 1;
      prior1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior10;
      prior10 = DUMMY_VAR__;
      
      current_statement__ = 2;
      prior10 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior11;
      prior11 = DUMMY_VAR__;
      
      current_statement__ = 3;
      prior11 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior12;
      prior12 = DUMMY_VAR__;
      
      current_statement__ = 4;
      prior12 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior13;
      prior13 = DUMMY_VAR__;
      
      current_statement__ = 5;
      prior13 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior14;
      prior14 = DUMMY_VAR__;
      
      current_statement__ = 6;
      prior14 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior15;
      prior15 = DUMMY_VAR__;
      
      current_statement__ = 7;
      prior15 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior16;
      prior16 = DUMMY_VAR__;
      
      current_statement__ = 8;
      prior16 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior17;
      prior17 = DUMMY_VAR__;
      
      current_statement__ = 9;
      prior17 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior18;
      prior18 = DUMMY_VAR__;
      
      current_statement__ = 10;
      prior18 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior19;
      prior19 = DUMMY_VAR__;
      
      current_statement__ = 11;
      prior19 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior2;
      prior2 = DUMMY_VAR__;
      
      current_statement__ = 12;
      prior2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior20;
      prior20 = DUMMY_VAR__;
      
      current_statement__ = 13;
      prior20 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior21;
      prior21 = DUMMY_VAR__;
      
      current_statement__ = 14;
      prior21 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior22;
      prior22 = DUMMY_VAR__;
      
      current_statement__ = 15;
      prior22 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior23;
      prior23 = DUMMY_VAR__;
      
      current_statement__ = 16;
      prior23 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior24;
      prior24 = DUMMY_VAR__;
      
      current_statement__ = 17;
      prior24 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior25;
      prior25 = DUMMY_VAR__;
      
      current_statement__ = 18;
      prior25 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior3;
      prior3 = DUMMY_VAR__;
      
      current_statement__ = 19;
      prior3 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior4;
      prior4 = DUMMY_VAR__;
      
      current_statement__ = 20;
      prior4 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior5;
      prior5 = DUMMY_VAR__;
      
      current_statement__ = 21;
      prior5 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior6;
      prior6 = DUMMY_VAR__;
      
      current_statement__ = 22;
      prior6 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior7;
      prior7 = DUMMY_VAR__;
      
      current_statement__ = 23;
      prior7 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior8;
      prior8 = DUMMY_VAR__;
      
      current_statement__ = 24;
      prior8 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior9;
      prior9 = DUMMY_VAR__;
      
      current_statement__ = 25;
      prior9 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      std::vector<local_scalar_t__> m1;
      m1 = std::vector<local_scalar_t__>(16777216, DUMMY_VAR__);
      
      current_statement__ = 51;
      assign(m1, rep_array(0, 16777216), "assigning variable m1");
      current_statement__ = 137;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 135;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 133;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 131;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 129;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 127;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 125;
                  for (int z3 = 1; z3 <= 2; ++z3) {
                    current_statement__ = 123;
                    for (int z25 = 1; z25 <= 2; ++z25) {
                      current_statement__ = 121;
                      for (int z24 = 1; z24 <= 2; ++z24) {
                        current_statement__ = 119;
                        for (int z23 = 1; z23 <= 2; ++z23) {
                          current_statement__ = 117;
                          for (int z22 = 1; z22 <= 2; ++z22) {
                            current_statement__ = 115;
                            for (int z21 = 1; z21 <= 2; ++z21) {
                              current_statement__ = 113;
                              for (int z20 = 1; z20 <= 2; ++z20) {
                                current_statement__ = 111;
                                for (int z2 = 1; z2 <= 2; ++z2) {
                                  current_statement__ = 109;
                                  for (int z19 = 1; z19 <= 2; ++z19) {
                                    current_statement__ = 107;
                                    for (int z18 = 1; z18 <= 2; ++z18) {
                                      current_statement__ = 105;
                                      for (int z17 = 1; z17 <= 2; ++z17) {
                                        current_statement__ = 103;
                                        for (int z16 = 1; z16 <= 2; ++z16) {
                                          current_statement__ = 101;
                                          for (int z15 = 1; z15 <= 2; ++z15) {
                                            current_statement__ = 99;
                                            for (int z14 = 1; z14 <= 2; ++z14) {
                                              current_statement__ = 97;
                                              for (int z13 = 1; z13 <= 2;
                                                   ++z13) {
                                                current_statement__ = 95;
                                                for (int z12 = 1; z12 <= 2;
                                                     ++z12) {
                                                  current_statement__ = 93;
                                                  for (int z11 = 1; z11 <= 2;
                                                       ++z11) {
                                                    current_statement__ = 91;
                                                    for (int z10 = 1;
                                                         z10 <= 2; ++z10) {
                                                      {
                                                        Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                                        acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                                        stan::math::fill(acc0, DUMMY_VAR__);
                                                        
                                                        
                                                        current_statement__ = 53;
                                                        assign(acc0,
                                                          rep_vector(0, 2),
                                                          "assigning variable acc0");
                                                        current_statement__ = 87;
                                                        for (int z1_val = 1;
                                                             z1_val <= 2;
                                                             ++z1_val) {
                                                          current_statement__ = 54;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z1_val - 1),
                                                                prior1)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 55;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z2 - 1),
                                                                prior2)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 56;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z3 - 1),
                                                                prior3)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 57;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z4 - 1),
                                                                prior4)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 58;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z5 - 1),
                                                                prior5)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 59;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z6 - 1),
                                                                prior6)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 60;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z7 - 1),
                                                                prior7)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 61;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z8 - 1),
                                                                prior8)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 62;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z9 - 1),
                                                                prior9)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 63;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z10 - 1),
                                                                prior10)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 64;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z11 - 1),
                                                                prior11)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 65;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z12 - 1),
                                                                prior12)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 66;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z13 - 1),
                                                                prior13)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 67;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z14 - 1),
                                                                prior14)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 68;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z15 - 1),
                                                                prior15)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 69;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z16 - 1),
                                                                prior16)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 70;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z17 - 1),
                                                                prior17)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 71;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z18 - 1),
                                                                prior18)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 72;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z19 - 1),
                                                                prior19)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 73;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z20 - 1),
                                                                prior20)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 74;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z21 - 1),
                                                                prior21)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 75;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z22 - 1),
                                                                prior22)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 76;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z23 - 1),
                                                                prior23)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 77;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z24 - 1),
                                                                prior24)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 78;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z25 - 1),
                                                                prior25)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 85;
                                                          if (logical_gt(
                                                                (((((((((((((((((((((((((z1_val
                                                                    + z2) +
                                                                    z3) + z4)
                                                                    + z5) +
                                                                    z6) + z7)
                                                                    + z8) +
                                                                    z9) +
                                                                    z10) +
                                                                    z11) +
                                                                    z12) +
                                                                    z13) +
                                                                    z14) +
                                                                    z15) +
                                                                    z16) +
                                                                    z17) +
                                                                    z18) +
                                                                    z19) +
                                                                    z20) +
                                                                    z21) +
                                                                    z22) +
                                                                    z23) +
                                                                    z24) +
                                                                   z25) - 25),
                                                                0)) {
                                                            current_statement__ = 82;
                                                            assign(acc0,
                                                              (rvalue(acc0,
                                                                 "acc0",
                                                                 index_uni(z1_val))
                                                                +
                                                                normal_lpdf<false>(
                                                                  d1, 135, 8)),
                                                              "assigning variable acc0", 
                                                              index_uni(z1_val));
                                                            current_statement__ = 83;
                                                            assign(acc0,
                                                              (rvalue(acc0,
                                                                 "acc0",
                                                                 index_uni(z1_val))
                                                                +
                                                                normal_lpdf<false>(
                                                                  d2, 135, 8)),
                                                              "assigning variable acc0", 
                                                              index_uni(z1_val));
                                                          } else {
                                                            current_statement__ = 79;
                                                            assign(acc0,
                                                              (rvalue(acc0,
                                                                 "acc0",
                                                                 index_uni(z1_val))
                                                                +
                                                                normal_lpdf<false>(
                                                                  d1, 80, 8)),
                                                              "assigning variable acc0", 
                                                              index_uni(z1_val));
                                                            current_statement__ = 80;
                                                            assign(acc0,
                                                              (rvalue(acc0,
                                                                 "acc0",
                                                                 index_uni(z1_val))
                                                                +
                                                                normal_lpdf<false>(
                                                                  d2, 80, 8)),
                                                              "assigning variable acc0", 
                                                              index_uni(z1_val));
                                                          }
                                                        }
                                                        current_statement__ = 88;
                                                        assign(m1,
                                                          (rvalue(m1, "m1",
                                                             index_uni(
                                                               ((((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    8388608)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    4194304))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    2097152))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z16 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z17 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z2 - 1)
                                                                    * 8192))
                                                                    +
                                                                    ((z20 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z22 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z23 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                   ((z8 - 1)
                                                                    * 2)) +
                                                                  ((z9 - 1) *
                                                                    1)) + 1)))
                                                            +
                                                            log_sum_exp(acc0)),
                                                          "assigning variable m1", 
                                                          index_uni(((((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    8388608)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    4194304))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    2097152))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z16 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z17 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z2 - 1)
                                                                    * 8192))
                                                                    +
                                                                    ((z20 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z22 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z23 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                    1)));
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      std::vector<local_scalar_t__> m10;
      m10 = std::vector<local_scalar_t__>(32768, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m11;
      m11 = std::vector<local_scalar_t__>(16384, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m12;
      m12 = std::vector<local_scalar_t__>(8192, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m13;
      m13 = std::vector<local_scalar_t__>(4096, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m14;
      m14 = std::vector<local_scalar_t__>(2048, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m15;
      m15 = std::vector<local_scalar_t__>(1024, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m16;
      m16 = std::vector<local_scalar_t__>(512, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m17;
      m17 = std::vector<local_scalar_t__>(256, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m18;
      m18 = std::vector<local_scalar_t__>(128, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m19;
      m19 = std::vector<local_scalar_t__>(64, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m2;
      m2 = std::vector<local_scalar_t__>(8388608, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m20;
      m20 = std::vector<local_scalar_t__>(32, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m21;
      m21 = std::vector<local_scalar_t__>(16, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m22;
      m22 = std::vector<local_scalar_t__>(8, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m23;
      m23 = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m24;
      m24 = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
      
      local_scalar_t__ m25;
      m25 = DUMMY_VAR__;
      
      std::vector<local_scalar_t__> m3;
      m3 = std::vector<local_scalar_t__>(4194304, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m4;
      m4 = std::vector<local_scalar_t__>(2097152, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m5;
      m5 = std::vector<local_scalar_t__>(1048576, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m6;
      m6 = std::vector<local_scalar_t__>(524288, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m7;
      m7 = std::vector<local_scalar_t__>(262144, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m8;
      m8 = std::vector<local_scalar_t__>(131072, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m9;
      m9 = std::vector<local_scalar_t__>(65536, DUMMY_VAR__);
      
      current_statement__ = 138;
      assign(m2, rep_array(0, 8388608), "assigning variable m2");
      current_statement__ = 191;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 189;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 187;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 185;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 183;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 181;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 179;
                  for (int z3 = 1; z3 <= 2; ++z3) {
                    current_statement__ = 177;
                    for (int z25 = 1; z25 <= 2; ++z25) {
                      current_statement__ = 175;
                      for (int z24 = 1; z24 <= 2; ++z24) {
                        current_statement__ = 173;
                        for (int z23 = 1; z23 <= 2; ++z23) {
                          current_statement__ = 171;
                          for (int z22 = 1; z22 <= 2; ++z22) {
                            current_statement__ = 169;
                            for (int z21 = 1; z21 <= 2; ++z21) {
                              current_statement__ = 167;
                              for (int z20 = 1; z20 <= 2; ++z20) {
                                current_statement__ = 165;
                                for (int z19 = 1; z19 <= 2; ++z19) {
                                  current_statement__ = 163;
                                  for (int z18 = 1; z18 <= 2; ++z18) {
                                    current_statement__ = 161;
                                    for (int z17 = 1; z17 <= 2; ++z17) {
                                      current_statement__ = 159;
                                      for (int z16 = 1; z16 <= 2; ++z16) {
                                        current_statement__ = 157;
                                        for (int z15 = 1; z15 <= 2; ++z15) {
                                          current_statement__ = 155;
                                          for (int z14 = 1; z14 <= 2; ++z14) {
                                            current_statement__ = 153;
                                            for (int z13 = 1; z13 <= 2; ++z13) {
                                              current_statement__ = 151;
                                              for (int z12 = 1; z12 <= 2;
                                                   ++z12) {
                                                current_statement__ = 149;
                                                for (int z11 = 1; z11 <= 2;
                                                     ++z11) {
                                                  current_statement__ = 147;
                                                  for (int z10 = 1; z10 <= 2;
                                                       ++z10) {
                                                    {
                                                      Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                                      acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                                      stan::math::fill(acc0, DUMMY_VAR__);
                                                      
                                                      
                                                      current_statement__ = 140;
                                                      assign(acc0,
                                                        rep_vector(0, 2),
                                                        "assigning variable acc0");
                                                      current_statement__ = 143;
                                                      for (int z2_val = 1;
                                                           z2_val <= 2;
                                                           ++z2_val) {
                                                        current_statement__ = 141;
                                                        assign(acc0,
                                                          (rvalue(acc0,
                                                             "acc0",
                                                             index_uni(z2_val))
                                                            +
                                                            rvalue(m1, "m1",
                                                              index_uni(
                                                                ((((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    8388608)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    4194304))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    2097152))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z16 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z17 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z2_val
                                                                    - 1) *
                                                                    8192)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z22 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z23 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                   ((z9 - 1)
                                                                    * 1)) +
                                                                  1)))),
                                                          "assigning variable acc0", 
                                                          index_uni(z2_val));
                                                      }
                                                      current_statement__ = 144;
                                                      assign(m2,
                                                        (rvalue(m2, "m2",
                                                           index_uni(
                                                             (((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    4194304)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    2097152))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z16 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z22 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z23 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                   ((z6 - 1)
                                                                    * 8)) +
                                                                  ((z7 - 1) *
                                                                    4)) +
                                                                 ((z8 - 1) *
                                                                   2)) +
                                                                ((z9 - 1) *
                                                                  1)) + 1)))
                                                          +
                                                          log_sum_exp(acc0)),
                                                        "assigning variable m2", 
                                                        index_uni((((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    4194304)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    2097152))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z16 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z22 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z23 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                    1)));
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 192;
      assign(m3, rep_array(0, 4194304), "assigning variable m3");
      current_statement__ = 243;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 241;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 239;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 237;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 235;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 233;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 231;
                  for (int z25 = 1; z25 <= 2; ++z25) {
                    current_statement__ = 229;
                    for (int z24 = 1; z24 <= 2; ++z24) {
                      current_statement__ = 227;
                      for (int z23 = 1; z23 <= 2; ++z23) {
                        current_statement__ = 225;
                        for (int z22 = 1; z22 <= 2; ++z22) {
                          current_statement__ = 223;
                          for (int z21 = 1; z21 <= 2; ++z21) {
                            current_statement__ = 221;
                            for (int z20 = 1; z20 <= 2; ++z20) {
                              current_statement__ = 219;
                              for (int z19 = 1; z19 <= 2; ++z19) {
                                current_statement__ = 217;
                                for (int z18 = 1; z18 <= 2; ++z18) {
                                  current_statement__ = 215;
                                  for (int z17 = 1; z17 <= 2; ++z17) {
                                    current_statement__ = 213;
                                    for (int z16 = 1; z16 <= 2; ++z16) {
                                      current_statement__ = 211;
                                      for (int z15 = 1; z15 <= 2; ++z15) {
                                        current_statement__ = 209;
                                        for (int z14 = 1; z14 <= 2; ++z14) {
                                          current_statement__ = 207;
                                          for (int z13 = 1; z13 <= 2; ++z13) {
                                            current_statement__ = 205;
                                            for (int z12 = 1; z12 <= 2; ++z12) {
                                              current_statement__ = 203;
                                              for (int z11 = 1; z11 <= 2;
                                                   ++z11) {
                                                current_statement__ = 201;
                                                for (int z10 = 1; z10 <= 2;
                                                     ++z10) {
                                                  {
                                                    Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                                    acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                                    stan::math::fill(acc0, DUMMY_VAR__);
                                                    
                                                    
                                                    current_statement__ = 194;
                                                    assign(acc0,
                                                      rep_vector(0, 2),
                                                      "assigning variable acc0");
                                                    current_statement__ = 197;
                                                    for (int z3_val = 1;
                                                         z3_val <= 2;
                                                         ++z3_val) {
                                                      current_statement__ = 195;
                                                      assign(acc0,
                                                        (rvalue(acc0, "acc0",
                                                           index_uni(z3_val))
                                                          +
                                                          rvalue(m2, "m2",
                                                            index_uni(
                                                              (((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    4194304)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    2097152))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z16 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z22 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z23 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3_val
                                                                    - 1) *
                                                                    64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                   ((z7 - 1)
                                                                    * 4)) +
                                                                  ((z8 - 1) *
                                                                    2)) +
                                                                 ((z9 - 1) *
                                                                   1)) + 1)))),
                                                        "assigning variable acc0", 
                                                        index_uni(z3_val));
                                                    }
                                                    current_statement__ = 198;
                                                    assign(m3,
                                                      (rvalue(m3, "m3",
                                                         index_uni(((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    2097152)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z22 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                    1))) +
                                                        log_sum_exp(acc0)),
                                                      "assigning variable m3", 
                                                      index_uni(((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    2097152)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z22 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                   ((z9 - 1)
                                                                    * 1)) +
                                                                  1)));
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 244;
      assign(m4, rep_array(0, 2097152), "assigning variable m4");
      current_statement__ = 293;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 291;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 289;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 287;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 285;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 283;
                for (int z25 = 1; z25 <= 2; ++z25) {
                  current_statement__ = 281;
                  for (int z24 = 1; z24 <= 2; ++z24) {
                    current_statement__ = 279;
                    for (int z23 = 1; z23 <= 2; ++z23) {
                      current_statement__ = 277;
                      for (int z22 = 1; z22 <= 2; ++z22) {
                        current_statement__ = 275;
                        for (int z21 = 1; z21 <= 2; ++z21) {
                          current_statement__ = 273;
                          for (int z20 = 1; z20 <= 2; ++z20) {
                            current_statement__ = 271;
                            for (int z19 = 1; z19 <= 2; ++z19) {
                              current_statement__ = 269;
                              for (int z18 = 1; z18 <= 2; ++z18) {
                                current_statement__ = 267;
                                for (int z17 = 1; z17 <= 2; ++z17) {
                                  current_statement__ = 265;
                                  for (int z16 = 1; z16 <= 2; ++z16) {
                                    current_statement__ = 263;
                                    for (int z15 = 1; z15 <= 2; ++z15) {
                                      current_statement__ = 261;
                                      for (int z14 = 1; z14 <= 2; ++z14) {
                                        current_statement__ = 259;
                                        for (int z13 = 1; z13 <= 2; ++z13) {
                                          current_statement__ = 257;
                                          for (int z12 = 1; z12 <= 2; ++z12) {
                                            current_statement__ = 255;
                                            for (int z11 = 1; z11 <= 2; ++z11) {
                                              current_statement__ = 253;
                                              for (int z10 = 1; z10 <= 2;
                                                   ++z10) {
                                                {
                                                  Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                                  acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                                  stan::math::fill(acc0, DUMMY_VAR__);
                                                  
                                                  
                                                  current_statement__ = 246;
                                                  assign(acc0,
                                                    rep_vector(0, 2),
                                                    "assigning variable acc0");
                                                  current_statement__ = 249;
                                                  for (int z4_val = 1;
                                                       z4_val <= 2; ++z4_val) {
                                                    current_statement__ = 247;
                                                    assign(acc0,
                                                      (rvalue(acc0, "acc0",
                                                         index_uni(z4_val)) +
                                                        rvalue(m3, "m3",
                                                          index_uni(((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    2097152)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z22 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z4_val
                                                                    - 1) *
                                                                    32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                    1)))),
                                                      "assigning variable acc0", 
                                                      index_uni(z4_val));
                                                  }
                                                  current_statement__ = 250;
                                                  assign(m4,
                                                    (rvalue(m4, "m4",
                                                       index_uni((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    1048576)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z21 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                   1))) +
                                                      log_sum_exp(acc0)),
                                                    "assigning variable m4", 
                                                    index_uni((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    1048576)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z21 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                   ((z7 - 1)
                                                                    * 4)) +
                                                                  ((z8 - 1) *
                                                                    2)) +
                                                                 ((z9 - 1) *
                                                                   1)) + 1)));
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 294;
      assign(m5, rep_array(0, 1048576), "assigning variable m5");
      current_statement__ = 341;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 339;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 337;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 335;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 333;
              for (int z25 = 1; z25 <= 2; ++z25) {
                current_statement__ = 331;
                for (int z24 = 1; z24 <= 2; ++z24) {
                  current_statement__ = 329;
                  for (int z23 = 1; z23 <= 2; ++z23) {
                    current_statement__ = 327;
                    for (int z22 = 1; z22 <= 2; ++z22) {
                      current_statement__ = 325;
                      for (int z21 = 1; z21 <= 2; ++z21) {
                        current_statement__ = 323;
                        for (int z20 = 1; z20 <= 2; ++z20) {
                          current_statement__ = 321;
                          for (int z19 = 1; z19 <= 2; ++z19) {
                            current_statement__ = 319;
                            for (int z18 = 1; z18 <= 2; ++z18) {
                              current_statement__ = 317;
                              for (int z17 = 1; z17 <= 2; ++z17) {
                                current_statement__ = 315;
                                for (int z16 = 1; z16 <= 2; ++z16) {
                                  current_statement__ = 313;
                                  for (int z15 = 1; z15 <= 2; ++z15) {
                                    current_statement__ = 311;
                                    for (int z14 = 1; z14 <= 2; ++z14) {
                                      current_statement__ = 309;
                                      for (int z13 = 1; z13 <= 2; ++z13) {
                                        current_statement__ = 307;
                                        for (int z12 = 1; z12 <= 2; ++z12) {
                                          current_statement__ = 305;
                                          for (int z11 = 1; z11 <= 2; ++z11) {
                                            current_statement__ = 303;
                                            for (int z10 = 1; z10 <= 2; ++z10) {
                                              {
                                                Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                                acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                                stan::math::fill(acc0, DUMMY_VAR__);
                                                
                                                
                                                current_statement__ = 296;
                                                assign(acc0,
                                                  rep_vector(0, 2),
                                                  "assigning variable acc0");
                                                current_statement__ = 299;
                                                for (int z5_val = 1;
                                                     z5_val <= 2; ++z5_val) {
                                                  current_statement__ = 297;
                                                  assign(acc0,
                                                    (rvalue(acc0, "acc0",
                                                       index_uni(z5_val)) +
                                                      rvalue(m4, "m4",
                                                        index_uni((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    1048576)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z21 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z5_val
                                                                    - 1) *
                                                                    16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                    1)))),
                                                    "assigning variable acc0", 
                                                    index_uni(z5_val));
                                                }
                                                current_statement__ = 300;
                                                assign(m5,
                                                  (rvalue(m5, "m5",
                                                     index_uni(((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    524288) +
                                                                    ((z11 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z20 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                   ((z8 - 1)
                                                                    * 2)) +
                                                                  ((z9 - 1) *
                                                                    1)) + 1)))
                                                    + log_sum_exp(acc0)),
                                                  "assigning variable m5", 
                                                  index_uni(((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    524288) +
                                                                    ((z11 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z20 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 32))
                                                                   +
                                                                   ((z25 - 1)
                                                                    * 16)) +
                                                                  ((z6 - 1) *
                                                                    8)) +
                                                                 ((z7 - 1) *
                                                                   4)) +
                                                                ((z8 - 1) *
                                                                  2)) +
                                                               ((z9 - 1) * 1))
                                                              + 1)));
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 342;
      assign(m6, rep_array(0, 524288), "assigning variable m6");
      current_statement__ = 387;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 385;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 383;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 381;
            for (int z25 = 1; z25 <= 2; ++z25) {
              current_statement__ = 379;
              for (int z24 = 1; z24 <= 2; ++z24) {
                current_statement__ = 377;
                for (int z23 = 1; z23 <= 2; ++z23) {
                  current_statement__ = 375;
                  for (int z22 = 1; z22 <= 2; ++z22) {
                    current_statement__ = 373;
                    for (int z21 = 1; z21 <= 2; ++z21) {
                      current_statement__ = 371;
                      for (int z20 = 1; z20 <= 2; ++z20) {
                        current_statement__ = 369;
                        for (int z19 = 1; z19 <= 2; ++z19) {
                          current_statement__ = 367;
                          for (int z18 = 1; z18 <= 2; ++z18) {
                            current_statement__ = 365;
                            for (int z17 = 1; z17 <= 2; ++z17) {
                              current_statement__ = 363;
                              for (int z16 = 1; z16 <= 2; ++z16) {
                                current_statement__ = 361;
                                for (int z15 = 1; z15 <= 2; ++z15) {
                                  current_statement__ = 359;
                                  for (int z14 = 1; z14 <= 2; ++z14) {
                                    current_statement__ = 357;
                                    for (int z13 = 1; z13 <= 2; ++z13) {
                                      current_statement__ = 355;
                                      for (int z12 = 1; z12 <= 2; ++z12) {
                                        current_statement__ = 353;
                                        for (int z11 = 1; z11 <= 2; ++z11) {
                                          current_statement__ = 351;
                                          for (int z10 = 1; z10 <= 2; ++z10) {
                                            {
                                              Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                              acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                              stan::math::fill(acc0, DUMMY_VAR__);
                                              
                                              
                                              current_statement__ = 344;
                                              assign(acc0, rep_vector(0, 2),
                                                "assigning variable acc0");
                                              current_statement__ = 347;
                                              for (int z6_val = 1;
                                                   z6_val <= 2; ++z6_val) {
                                                current_statement__ = 345;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z6_val)) +
                                                    rvalue(m5, "m5",
                                                      index_uni(((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    524288) +
                                                                    ((z11 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z20 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z6_val
                                                                    - 1) * 8))
                                                                    +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                   ((z9 - 1)
                                                                    * 1)) +
                                                                  1)))),
                                                  "assigning variable acc0", 
                                                  index_uni(z6_val));
                                              }
                                              current_statement__ = 348;
                                              assign(m6,
                                                (rvalue(m6, "m6",
                                                   index_uni((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    262144) +
                                                                    ((z11 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z19 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 16))
                                                                   +
                                                                   ((z25 - 1)
                                                                    * 8)) +
                                                                  ((z7 - 1) *
                                                                    4)) +
                                                                 ((z8 - 1) *
                                                                   2)) +
                                                                ((z9 - 1) *
                                                                  1)) + 1)))
                                                  + log_sum_exp(acc0)),
                                                "assigning variable m6", 
                                                index_uni((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    262144) +
                                                                    ((z11 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z19 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 128))
                                                                   +
                                                                   ((z22 - 1)
                                                                    * 64)) +
                                                                  ((z23 - 1)
                                                                    * 32)) +
                                                                 ((z24 - 1) *
                                                                   16)) +
                                                                ((z25 - 1) *
                                                                  8)) +
                                                               ((z7 - 1) * 4))
                                                              +
                                                              ((z8 - 1) * 2))
                                                             +
                                                             ((z9 - 1) * 1))
                                                            + 1)));
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 388;
      assign(m7, rep_array(0, 262144), "assigning variable m7");
      current_statement__ = 431;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 429;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 427;
          for (int z25 = 1; z25 <= 2; ++z25) {
            current_statement__ = 425;
            for (int z24 = 1; z24 <= 2; ++z24) {
              current_statement__ = 423;
              for (int z23 = 1; z23 <= 2; ++z23) {
                current_statement__ = 421;
                for (int z22 = 1; z22 <= 2; ++z22) {
                  current_statement__ = 419;
                  for (int z21 = 1; z21 <= 2; ++z21) {
                    current_statement__ = 417;
                    for (int z20 = 1; z20 <= 2; ++z20) {
                      current_statement__ = 415;
                      for (int z19 = 1; z19 <= 2; ++z19) {
                        current_statement__ = 413;
                        for (int z18 = 1; z18 <= 2; ++z18) {
                          current_statement__ = 411;
                          for (int z17 = 1; z17 <= 2; ++z17) {
                            current_statement__ = 409;
                            for (int z16 = 1; z16 <= 2; ++z16) {
                              current_statement__ = 407;
                              for (int z15 = 1; z15 <= 2; ++z15) {
                                current_statement__ = 405;
                                for (int z14 = 1; z14 <= 2; ++z14) {
                                  current_statement__ = 403;
                                  for (int z13 = 1; z13 <= 2; ++z13) {
                                    current_statement__ = 401;
                                    for (int z12 = 1; z12 <= 2; ++z12) {
                                      current_statement__ = 399;
                                      for (int z11 = 1; z11 <= 2; ++z11) {
                                        current_statement__ = 397;
                                        for (int z10 = 1; z10 <= 2; ++z10) {
                                          {
                                            Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                            acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                            stan::math::fill(acc0, DUMMY_VAR__);
                                            
                                            
                                            current_statement__ = 390;
                                            assign(acc0, rep_vector(0, 2),
                                              "assigning variable acc0");
                                            current_statement__ = 393;
                                            for (int z7_val = 1; z7_val <= 2;
                                                 ++z7_val) {
                                              current_statement__ = 391;
                                              assign(acc0,
                                                (rvalue(acc0, "acc0",
                                                   index_uni(z7_val)) +
                                                  rvalue(m6, "m6",
                                                    index_uni((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    262144) +
                                                                    ((z11 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z19 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 8))
                                                                   +
                                                                   ((z7_val -
                                                                    1) * 4))
                                                                  +
                                                                  ((z8 - 1) *
                                                                    2)) +
                                                                 ((z9 - 1) *
                                                                   1)) + 1)))),
                                                "assigning variable acc0", 
                                                index_uni(z7_val));
                                            }
                                            current_statement__ = 394;
                                            assign(m7,
                                              (rvalue(m7, "m7",
                                                 index_uni(((((((((((((((((((((z10
                                                                    - 1) *
                                                                    131072) +
                                                                    ((z11 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z18 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 64))
                                                                   +
                                                                   ((z22 - 1)
                                                                    * 32)) +
                                                                  ((z23 - 1)
                                                                    * 16)) +
                                                                 ((z24 - 1) *
                                                                   8)) +
                                                                ((z25 - 1) *
                                                                  4)) +
                                                               ((z8 - 1) * 2))
                                                              +
                                                              ((z9 - 1) * 1))
                                                             + 1))) +
                                                log_sum_exp(acc0)),
                                              "assigning variable m7", 
                                              index_uni(((((((((((((((((((((z10
                                                                    - 1) *
                                                                    131072) +
                                                                    ((z11 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z18 -
                                                                    1) * 512))
                                                                   +
                                                                   ((z19 - 1)
                                                                    * 256)) +
                                                                  ((z20 - 1)
                                                                    * 128)) +
                                                                 ((z21 - 1) *
                                                                   64)) +
                                                                ((z22 - 1) *
                                                                  32)) +
                                                               ((z23 - 1) *
                                                                 16)) +
                                                              ((z24 - 1) * 8))
                                                             +
                                                             ((z25 - 1) * 4))
                                                            + ((z8 - 1) * 2))
                                                           + ((z9 - 1) * 1))
                                                          + 1)));
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 432;
      assign(m8, rep_array(0, 131072), "assigning variable m8");
      current_statement__ = 473;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 471;
        for (int z25 = 1; z25 <= 2; ++z25) {
          current_statement__ = 469;
          for (int z24 = 1; z24 <= 2; ++z24) {
            current_statement__ = 467;
            for (int z23 = 1; z23 <= 2; ++z23) {
              current_statement__ = 465;
              for (int z22 = 1; z22 <= 2; ++z22) {
                current_statement__ = 463;
                for (int z21 = 1; z21 <= 2; ++z21) {
                  current_statement__ = 461;
                  for (int z20 = 1; z20 <= 2; ++z20) {
                    current_statement__ = 459;
                    for (int z19 = 1; z19 <= 2; ++z19) {
                      current_statement__ = 457;
                      for (int z18 = 1; z18 <= 2; ++z18) {
                        current_statement__ = 455;
                        for (int z17 = 1; z17 <= 2; ++z17) {
                          current_statement__ = 453;
                          for (int z16 = 1; z16 <= 2; ++z16) {
                            current_statement__ = 451;
                            for (int z15 = 1; z15 <= 2; ++z15) {
                              current_statement__ = 449;
                              for (int z14 = 1; z14 <= 2; ++z14) {
                                current_statement__ = 447;
                                for (int z13 = 1; z13 <= 2; ++z13) {
                                  current_statement__ = 445;
                                  for (int z12 = 1; z12 <= 2; ++z12) {
                                    current_statement__ = 443;
                                    for (int z11 = 1; z11 <= 2; ++z11) {
                                      current_statement__ = 441;
                                      for (int z10 = 1; z10 <= 2; ++z10) {
                                        {
                                          Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                          acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                          stan::math::fill(acc0, DUMMY_VAR__);
                                          
                                          current_statement__ = 434;
                                          assign(acc0, rep_vector(0, 2),
                                            "assigning variable acc0");
                                          current_statement__ = 437;
                                          for (int z8_val = 1; z8_val <= 2;
                                               ++z8_val) {
                                            current_statement__ = 435;
                                            assign(acc0,
                                              (rvalue(acc0, "acc0",
                                                 index_uni(z8_val)) +
                                                rvalue(m7, "m7",
                                                  index_uni(((((((((((((((((((((z10
                                                                    - 1) *
                                                                    131072) +
                                                                    ((z11 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z18 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 32))
                                                                   +
                                                                   ((z23 - 1)
                                                                    * 16)) +
                                                                  ((z24 - 1)
                                                                    * 8)) +
                                                                 ((z25 - 1) *
                                                                   4)) +
                                                                ((z8_val - 1)
                                                                  * 2)) +
                                                               ((z9 - 1) * 1))
                                                              + 1)))),
                                              "assigning variable acc0", 
                                              index_uni(z8_val));
                                          }
                                          current_statement__ = 438;
                                          assign(m8,
                                            (rvalue(m8, "m8",
                                               index_uni((((((((((((((((((((z10
                                                                    - 1) *
                                                                    65536) +
                                                                    ((z11 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z17 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 256))
                                                                   +
                                                                   ((z19 - 1)
                                                                    * 128)) +
                                                                  ((z20 - 1)
                                                                    * 64)) +
                                                                 ((z21 - 1) *
                                                                   32)) +
                                                                ((z22 - 1) *
                                                                  16)) +
                                                               ((z23 - 1) *
                                                                 8)) +
                                                              ((z24 - 1) * 4))
                                                             +
                                                             ((z25 - 1) * 2))
                                                            + ((z9 - 1) * 1))
                                                           + 1))) +
                                              log_sum_exp(acc0)),
                                            "assigning variable m8", 
                                            index_uni((((((((((((((((((((z10
                                                                    - 1) *
                                                                    65536) +
                                                                    ((z11 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    2048)) +
                                                                   ((z16 - 1)
                                                                    * 1024))
                                                                  +
                                                                  ((z17 - 1)
                                                                    * 512)) +
                                                                 ((z18 - 1) *
                                                                   256)) +
                                                                ((z19 - 1) *
                                                                  128)) +
                                                               ((z20 - 1) *
                                                                 64)) +
                                                              ((z21 - 1) *
                                                                32)) +
                                                             ((z22 - 1) * 16))
                                                            +
                                                            ((z23 - 1) * 8))
                                                           + ((z24 - 1) * 4))
                                                          + ((z25 - 1) * 2))
                                                         + ((z9 - 1) * 1)) +
                                                        1)));
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 474;
      assign(m9, rep_array(0, 65536), "assigning variable m9");
      current_statement__ = 513;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 511;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 509;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 507;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 505;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 503;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 501;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 499;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 497;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        current_statement__ = 495;
                        for (int z16 = 1; z16 <= 2; ++z16) {
                          current_statement__ = 493;
                          for (int z15 = 1; z15 <= 2; ++z15) {
                            current_statement__ = 491;
                            for (int z14 = 1; z14 <= 2; ++z14) {
                              current_statement__ = 489;
                              for (int z13 = 1; z13 <= 2; ++z13) {
                                current_statement__ = 487;
                                for (int z12 = 1; z12 <= 2; ++z12) {
                                  current_statement__ = 485;
                                  for (int z11 = 1; z11 <= 2; ++z11) {
                                    current_statement__ = 483;
                                    for (int z10 = 1; z10 <= 2; ++z10) {
                                      {
                                        Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                        acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                        stan::math::fill(acc0, DUMMY_VAR__);
                                        
                                        current_statement__ = 476;
                                        assign(acc0, rep_vector(0, 2),
                                          "assigning variable acc0");
                                        current_statement__ = 479;
                                        for (int z9_val = 1; z9_val <= 2;
                                             ++z9_val) {
                                          current_statement__ = 477;
                                          assign(acc0,
                                            (rvalue(acc0, "acc0",
                                               index_uni(z9_val)) +
                                              rvalue(m8, "m8",
                                                index_uni((((((((((((((((((((z10
                                                                    - 1) *
                                                                    65536) +
                                                                    ((z11 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z17 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 128))
                                                                   +
                                                                   ((z20 - 1)
                                                                    * 64)) +
                                                                  ((z21 - 1)
                                                                    * 32)) +
                                                                 ((z22 - 1) *
                                                                   16)) +
                                                                ((z23 - 1) *
                                                                  8)) +
                                                               ((z24 - 1) *
                                                                 4)) +
                                                              ((z25 - 1) * 2))
                                                             +
                                                             ((z9_val - 1) *
                                                               1)) + 1)))),
                                            "assigning variable acc0", 
                                            index_uni(z9_val));
                                        }
                                        current_statement__ = 480;
                                        assign(m9,
                                          (rvalue(m9, "m9",
                                             index_uni(((((((((((((((((((z10
                                                                    - 1) *
                                                                    32768) +
                                                                    ((z11 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                   ((z16 - 1)
                                                                    * 512)) +
                                                                  ((z17 - 1)
                                                                    * 256)) +
                                                                 ((z18 - 1) *
                                                                   128)) +
                                                                ((z19 - 1) *
                                                                  64)) +
                                                               ((z20 - 1) *
                                                                 32)) +
                                                              ((z21 - 1) *
                                                                16)) +
                                                             ((z22 - 1) * 8))
                                                            +
                                                            ((z23 - 1) * 4))
                                                           + ((z24 - 1) * 2))
                                                          + ((z25 - 1) * 1))
                                                         + 1))) +
                                            log_sum_exp(acc0)),
                                          "assigning variable m9", index_uni(
                                                                    ((((((((((((((((((z10
                                                                    - 1) *
                                                                    32768) +
                                                                    ((z11 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 2))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 1))
                                                                    + 1)));
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 514;
      assign(m10, rep_array(0, 32768), "assigning variable m10");
      current_statement__ = 551;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 549;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 547;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 545;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 543;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 541;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 539;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 537;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 535;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        current_statement__ = 533;
                        for (int z16 = 1; z16 <= 2; ++z16) {
                          current_statement__ = 531;
                          for (int z15 = 1; z15 <= 2; ++z15) {
                            current_statement__ = 529;
                            for (int z14 = 1; z14 <= 2; ++z14) {
                              current_statement__ = 527;
                              for (int z13 = 1; z13 <= 2; ++z13) {
                                current_statement__ = 525;
                                for (int z12 = 1; z12 <= 2; ++z12) {
                                  current_statement__ = 523;
                                  for (int z11 = 1; z11 <= 2; ++z11) {
                                    {
                                      Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                      acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                      stan::math::fill(acc0, DUMMY_VAR__);
                                      
                                      current_statement__ = 516;
                                      assign(acc0, rep_vector(0, 2),
                                        "assigning variable acc0");
                                      current_statement__ = 519;
                                      for (int z10_val = 1; z10_val <= 2;
                                           ++z10_val) {
                                        current_statement__ = 517;
                                        assign(acc0,
                                          (rvalue(acc0, "acc0",
                                             index_uni(z10_val)) +
                                            rvalue(m9, "m9",
                                              index_uni(((((((((((((((((((z10_val
                                                                    - 1) *
                                                                    32768) +
                                                                    ((z11 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                   +
                                                                   ((z17 - 1)
                                                                    * 256)) +
                                                                  ((z18 - 1)
                                                                    * 128)) +
                                                                 ((z19 - 1) *
                                                                   64)) +
                                                                ((z20 - 1) *
                                                                  32)) +
                                                               ((z21 - 1) *
                                                                 16)) +
                                                              ((z22 - 1) * 8))
                                                             +
                                                             ((z23 - 1) * 4))
                                                            +
                                                            ((z24 - 1) * 2))
                                                           + ((z25 - 1) * 1))
                                                          + 1)))),
                                          "assigning variable acc0", 
                                          index_uni(z10_val));
                                      }
                                      current_statement__ = 520;
                                      assign(m10,
                                        (rvalue(m10, "m10",
                                           index_uni((((((((((((((((((z11 -
                                                                    1) *
                                                                    16384) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                   ((z14 - 1)
                                                                    * 2048))
                                                                  +
                                                                  ((z15 - 1)
                                                                    * 1024))
                                                                 +
                                                                 ((z16 - 1) *
                                                                   512)) +
                                                                ((z17 - 1) *
                                                                  256)) +
                                                               ((z18 - 1) *
                                                                 128)) +
                                                              ((z19 - 1) *
                                                                64)) +
                                                             ((z20 - 1) * 32))
                                                            +
                                                            ((z21 - 1) * 16))
                                                           + ((z22 - 1) * 8))
                                                          + ((z23 - 1) * 4))
                                                         + ((z24 - 1) * 2)) +
                                                        ((z25 - 1) * 1)) + 1)))
                                          + log_sum_exp(acc0)),
                                        "assigning variable m10", index_uni(
                                                                    (((((((((((((((((z11
                                                                    - 1) *
                                                                    16384) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 2))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 1))
                                                                    + 1)));
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 552;
      assign(m11, rep_array(0, 16384), "assigning variable m11");
      current_statement__ = 587;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 585;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 583;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 581;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 579;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 577;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 575;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 573;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 571;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        current_statement__ = 569;
                        for (int z16 = 1; z16 <= 2; ++z16) {
                          current_statement__ = 567;
                          for (int z15 = 1; z15 <= 2; ++z15) {
                            current_statement__ = 565;
                            for (int z14 = 1; z14 <= 2; ++z14) {
                              current_statement__ = 563;
                              for (int z13 = 1; z13 <= 2; ++z13) {
                                current_statement__ = 561;
                                for (int z12 = 1; z12 <= 2; ++z12) {
                                  {
                                    Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                    acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                    stan::math::fill(acc0, DUMMY_VAR__);
                                    
                                    current_statement__ = 554;
                                    assign(acc0, rep_vector(0, 2),
                                      "assigning variable acc0");
                                    current_statement__ = 557;
                                    for (int z11_val = 1; z11_val <= 2;
                                         ++z11_val) {
                                      current_statement__ = 555;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z11_val)) +
                                          rvalue(m10, "m10",
                                            index_uni((((((((((((((((((z11_val
                                                                    - 1) *
                                                                    16384) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                   ((z15 - 1)
                                                                    * 1024))
                                                                  +
                                                                  ((z16 - 1)
                                                                    * 512)) +
                                                                 ((z17 - 1) *
                                                                   256)) +
                                                                ((z18 - 1) *
                                                                  128)) +
                                                               ((z19 - 1) *
                                                                 64)) +
                                                              ((z20 - 1) *
                                                                32)) +
                                                             ((z21 - 1) * 16))
                                                            +
                                                            ((z22 - 1) * 8))
                                                           + ((z23 - 1) * 4))
                                                          + ((z24 - 1) * 2))
                                                         + ((z25 - 1) * 1)) +
                                                        1)))),
                                        "assigning variable acc0", index_uni(z11_val));
                                    }
                                    current_statement__ = 558;
                                    assign(m11,
                                      (rvalue(m11, "m11",
                                         index_uni(((((((((((((((((z12 - 1) *
                                                                   8192) +
                                                                  ((z13 - 1)
                                                                    * 4096))
                                                                 +
                                                                 ((z14 - 1) *
                                                                   2048)) +
                                                                ((z15 - 1) *
                                                                  1024)) +
                                                               ((z16 - 1) *
                                                                 512)) +
                                                              ((z17 - 1) *
                                                                256)) +
                                                             ((z18 - 1) *
                                                               128)) +
                                                            ((z19 - 1) * 64))
                                                           +
                                                           ((z20 - 1) * 32))
                                                          + ((z21 - 1) * 16))
                                                         + ((z22 - 1) * 8)) +
                                                        ((z23 - 1) * 4)) +
                                                       ((z24 - 1) * 2)) +
                                                      ((z25 - 1) * 1)) + 1)))
                                        + log_sum_exp(acc0)),
                                      "assigning variable m11", index_uni(
                                                                  ((((((((((((((((z12
                                                                    - 1) *
                                                                    8192) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 2))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 1))
                                                                    + 1)));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 588;
      assign(m12, rep_array(0, 8192), "assigning variable m12");
      current_statement__ = 621;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 619;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 617;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 615;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 613;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 611;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 609;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 607;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 605;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        current_statement__ = 603;
                        for (int z16 = 1; z16 <= 2; ++z16) {
                          current_statement__ = 601;
                          for (int z15 = 1; z15 <= 2; ++z15) {
                            current_statement__ = 599;
                            for (int z14 = 1; z14 <= 2; ++z14) {
                              current_statement__ = 597;
                              for (int z13 = 1; z13 <= 2; ++z13) {
                                {
                                  Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                  acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                  stan::math::fill(acc0, DUMMY_VAR__);
                                  
                                  current_statement__ = 590;
                                  assign(acc0, rep_vector(0, 2),
                                    "assigning variable acc0");
                                  current_statement__ = 593;
                                  for (int z12_val = 1; z12_val <= 2;
                                       ++z12_val) {
                                    current_statement__ = 591;
                                    assign(acc0,
                                      (rvalue(acc0, "acc0",
                                         index_uni(z12_val)) +
                                        rvalue(m11, "m11",
                                          index_uni(((((((((((((((((z12_val -
                                                                    1) *
                                                                    8192) +
                                                                   ((z13 - 1)
                                                                    * 4096))
                                                                  +
                                                                  ((z14 - 1)
                                                                    * 2048))
                                                                 +
                                                                 ((z15 - 1) *
                                                                   1024)) +
                                                                ((z16 - 1) *
                                                                  512)) +
                                                               ((z17 - 1) *
                                                                 256)) +
                                                              ((z18 - 1) *
                                                                128)) +
                                                             ((z19 - 1) * 64))
                                                            +
                                                            ((z20 - 1) * 32))
                                                           +
                                                           ((z21 - 1) * 16))
                                                          + ((z22 - 1) * 8))
                                                         + ((z23 - 1) * 4)) +
                                                        ((z24 - 1) * 2)) +
                                                       ((z25 - 1) * 1)) + 1)))),
                                      "assigning variable acc0", index_uni(z12_val));
                                  }
                                  current_statement__ = 594;
                                  assign(m12,
                                    (rvalue(m12, "m12",
                                       index_uni((((((((((((((((z13 - 1) *
                                                                4096) +
                                                               ((z14 - 1) *
                                                                 2048)) +
                                                              ((z15 - 1) *
                                                                1024)) +
                                                             ((z16 - 1) *
                                                               512)) +
                                                            ((z17 - 1) * 256))
                                                           +
                                                           ((z18 - 1) * 128))
                                                          + ((z19 - 1) * 64))
                                                         + ((z20 - 1) * 32))
                                                        + ((z21 - 1) * 16)) +
                                                       ((z22 - 1) * 8)) +
                                                      ((z23 - 1) * 4)) +
                                                     ((z24 - 1) * 2)) +
                                                    ((z25 - 1) * 1)) + 1))) +
                                      log_sum_exp(acc0)),
                                    "assigning variable m12", index_uni(
                                                                (((((((((((((((z13
                                                                    - 1) *
                                                                    4096) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 2))
                                                                   +
                                                                   ((z25 - 1)
                                                                    * 1)) +
                                                                  1)));
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 622;
      assign(m13, rep_array(0, 4096), "assigning variable m13");
      current_statement__ = 653;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 651;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 649;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 647;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 645;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 643;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 641;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 639;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 637;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        current_statement__ = 635;
                        for (int z16 = 1; z16 <= 2; ++z16) {
                          current_statement__ = 633;
                          for (int z15 = 1; z15 <= 2; ++z15) {
                            current_statement__ = 631;
                            for (int z14 = 1; z14 <= 2; ++z14) {
                              {
                                Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                stan::math::fill(acc0, DUMMY_VAR__);
                                
                                current_statement__ = 624;
                                assign(acc0, rep_vector(0, 2),
                                  "assigning variable acc0");
                                current_statement__ = 627;
                                for (int z13_val = 1; z13_val <= 2; ++z13_val) {
                                  current_statement__ = 625;
                                  assign(acc0,
                                    (rvalue(acc0, "acc0", index_uni(z13_val))
                                      +
                                      rvalue(m12, "m12",
                                        index_uni((((((((((((((((z13_val - 1)
                                                                 * 4096) +
                                                                ((z14 - 1) *
                                                                  2048)) +
                                                               ((z15 - 1) *
                                                                 1024)) +
                                                              ((z16 - 1) *
                                                                512)) +
                                                             ((z17 - 1) *
                                                               256)) +
                                                            ((z18 - 1) * 128))
                                                           +
                                                           ((z19 - 1) * 64))
                                                          + ((z20 - 1) * 32))
                                                         + ((z21 - 1) * 16))
                                                        + ((z22 - 1) * 8)) +
                                                       ((z23 - 1) * 4)) +
                                                      ((z24 - 1) * 2)) +
                                                     ((z25 - 1) * 1)) + 1)))),
                                    "assigning variable acc0", index_uni(z13_val));
                                }
                                current_statement__ = 628;
                                assign(m13,
                                  (rvalue(m13, "m13",
                                     index_uni(((((((((((((((z14 - 1) * 2048)
                                                            +
                                                            ((z15 - 1) *
                                                              1024)) +
                                                           ((z16 - 1) * 512))
                                                          +
                                                          ((z17 - 1) * 256))
                                                         + ((z18 - 1) * 128))
                                                        + ((z19 - 1) * 64)) +
                                                       ((z20 - 1) * 32)) +
                                                      ((z21 - 1) * 16)) +
                                                     ((z22 - 1) * 8)) +
                                                    ((z23 - 1) * 4)) +
                                                   ((z24 - 1) * 2)) +
                                                  ((z25 - 1) * 1)) + 1))) +
                                    log_sum_exp(acc0)),
                                  "assigning variable m13", index_uni(
                                                              ((((((((((((((z14
                                                                    - 1) *
                                                                    2048) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                   +
                                                                   ((z23 - 1)
                                                                    * 4)) +
                                                                  ((z24 - 1)
                                                                    * 2)) +
                                                                 ((z25 - 1) *
                                                                   1)) + 1)));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 654;
      assign(m14, rep_array(0, 2048), "assigning variable m14");
      current_statement__ = 683;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 681;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 679;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 677;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 675;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 673;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 671;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 669;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 667;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        current_statement__ = 665;
                        for (int z16 = 1; z16 <= 2; ++z16) {
                          current_statement__ = 663;
                          for (int z15 = 1; z15 <= 2; ++z15) {
                            {
                              Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                              acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                              stan::math::fill(acc0, DUMMY_VAR__);
                              
                              current_statement__ = 656;
                              assign(acc0, rep_vector(0, 2),
                                "assigning variable acc0");
                              current_statement__ = 659;
                              for (int z14_val = 1; z14_val <= 2; ++z14_val) {
                                current_statement__ = 657;
                                assign(acc0,
                                  (rvalue(acc0, "acc0", index_uni(z14_val)) +
                                    rvalue(m13, "m13",
                                      index_uni(((((((((((((((z14_val - 1) *
                                                              2048) +
                                                             ((z15 - 1) *
                                                               1024)) +
                                                            ((z16 - 1) * 512))
                                                           +
                                                           ((z17 - 1) * 256))
                                                          +
                                                          ((z18 - 1) * 128))
                                                         + ((z19 - 1) * 64))
                                                        + ((z20 - 1) * 32)) +
                                                       ((z21 - 1) * 16)) +
                                                      ((z22 - 1) * 8)) +
                                                     ((z23 - 1) * 4)) +
                                                    ((z24 - 1) * 2)) +
                                                   ((z25 - 1) * 1)) + 1)))),
                                  "assigning variable acc0", index_uni(z14_val));
                              }
                              current_statement__ = 660;
                              assign(m14,
                                (rvalue(m14, "m14",
                                   index_uni((((((((((((((z15 - 1) * 1024) +
                                                         ((z16 - 1) * 512)) +
                                                        ((z17 - 1) * 256)) +
                                                       ((z18 - 1) * 128)) +
                                                      ((z19 - 1) * 64)) +
                                                     ((z20 - 1) * 32)) +
                                                    ((z21 - 1) * 16)) +
                                                   ((z22 - 1) * 8)) +
                                                  ((z23 - 1) * 4)) +
                                                 ((z24 - 1) * 2)) +
                                                ((z25 - 1) * 1)) + 1))) +
                                  log_sum_exp(acc0)),
                                "assigning variable m14", index_uni((((((((((((((z15
                                                                    - 1) *
                                                                    1024) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 2))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 1))
                                                                    + 1)));
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 684;
      assign(m15, rep_array(0, 1024), "assigning variable m15");
      current_statement__ = 711;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 709;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 707;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 705;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 703;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 701;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 699;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 697;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 695;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        current_statement__ = 693;
                        for (int z16 = 1; z16 <= 2; ++z16) {
                          {
                            Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                            acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                            stan::math::fill(acc0, DUMMY_VAR__);
                            
                            current_statement__ = 686;
                            assign(acc0, rep_vector(0, 2),
                              "assigning variable acc0");
                            current_statement__ = 689;
                            for (int z15_val = 1; z15_val <= 2; ++z15_val) {
                              current_statement__ = 687;
                              assign(acc0,
                                (rvalue(acc0, "acc0", index_uni(z15_val)) +
                                  rvalue(m14, "m14",
                                    index_uni((((((((((((((z15_val - 1) *
                                                           1024) +
                                                          ((z16 - 1) * 512))
                                                         + ((z17 - 1) * 256))
                                                        + ((z18 - 1) * 128))
                                                       + ((z19 - 1) * 64)) +
                                                      ((z20 - 1) * 32)) +
                                                     ((z21 - 1) * 16)) +
                                                    ((z22 - 1) * 8)) +
                                                   ((z23 - 1) * 4)) +
                                                  ((z24 - 1) * 2)) +
                                                 ((z25 - 1) * 1)) + 1)))),
                                "assigning variable acc0", index_uni(z15_val));
                            }
                            current_statement__ = 690;
                            assign(m15,
                              (rvalue(m15, "m15",
                                 index_uni(((((((((((((z16 - 1) * 512) +
                                                      ((z17 - 1) * 256)) +
                                                     ((z18 - 1) * 128)) +
                                                    ((z19 - 1) * 64)) +
                                                   ((z20 - 1) * 32)) +
                                                  ((z21 - 1) * 16)) +
                                                 ((z22 - 1) * 8)) +
                                                ((z23 - 1) * 4)) +
                                               ((z24 - 1) * 2)) +
                                              ((z25 - 1) * 1)) + 1))) +
                                log_sum_exp(acc0)),
                              "assigning variable m15", index_uni(((((((((((((z16
                                                                    - 1) *
                                                                    512) +
                                                                    ((z17 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 2))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 1))
                                                                    + 1)));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 712;
      assign(m16, rep_array(0, 512), "assigning variable m16");
      current_statement__ = 737;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 735;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 733;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 731;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 729;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 727;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 725;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 723;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 721;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        {
                          Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                          acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                          stan::math::fill(acc0, DUMMY_VAR__);
                          
                          current_statement__ = 714;
                          assign(acc0, rep_vector(0, 2),
                            "assigning variable acc0");
                          current_statement__ = 717;
                          for (int z16_val = 1; z16_val <= 2; ++z16_val) {
                            current_statement__ = 715;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z16_val)) +
                                rvalue(m15, "m15",
                                  index_uni(((((((((((((z16_val - 1) * 512) +
                                                       ((z17 - 1) * 256)) +
                                                      ((z18 - 1) * 128)) +
                                                     ((z19 - 1) * 64)) +
                                                    ((z20 - 1) * 32)) +
                                                   ((z21 - 1) * 16)) +
                                                  ((z22 - 1) * 8)) +
                                                 ((z23 - 1) * 4)) +
                                                ((z24 - 1) * 2)) +
                                               ((z25 - 1) * 1)) + 1)))),
                              "assigning variable acc0", index_uni(z16_val));
                          }
                          current_statement__ = 718;
                          assign(m16,
                            (rvalue(m16, "m16",
                               index_uni((((((((((((z17 - 1) * 256) +
                                                   ((z18 - 1) * 128)) +
                                                  ((z19 - 1) * 64)) +
                                                 ((z20 - 1) * 32)) +
                                                ((z21 - 1) * 16)) +
                                               ((z22 - 1) * 8)) +
                                              ((z23 - 1) * 4)) +
                                             ((z24 - 1) * 2)) +
                                            ((z25 - 1) * 1)) + 1))) +
                              log_sum_exp(acc0)),
                            "assigning variable m16", index_uni((((((((((((z17
                                                                    - 1) *
                                                                    256) +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 2))
                                                                   +
                                                                   ((z25 - 1)
                                                                    * 1)) +
                                                                  1)));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 738;
      assign(m17, rep_array(0, 256), "assigning variable m17");
      current_statement__ = 761;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 759;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 757;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 755;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 753;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 751;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 749;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 747;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      {
                        Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                        acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                        stan::math::fill(acc0, DUMMY_VAR__);
                        
                        current_statement__ = 740;
                        assign(acc0, rep_vector(0, 2),
                          "assigning variable acc0");
                        current_statement__ = 743;
                        for (int z17_val = 1; z17_val <= 2; ++z17_val) {
                          current_statement__ = 741;
                          assign(acc0,
                            (rvalue(acc0, "acc0", index_uni(z17_val)) +
                              rvalue(m16, "m16",
                                index_uni((((((((((((z17_val - 1) * 256) +
                                                    ((z18 - 1) * 128)) +
                                                   ((z19 - 1) * 64)) +
                                                  ((z20 - 1) * 32)) +
                                                 ((z21 - 1) * 16)) +
                                                ((z22 - 1) * 8)) +
                                               ((z23 - 1) * 4)) +
                                              ((z24 - 1) * 2)) +
                                             ((z25 - 1) * 1)) + 1)))),
                            "assigning variable acc0", index_uni(z17_val));
                        }
                        current_statement__ = 744;
                        assign(m17,
                          (rvalue(m17, "m17",
                             index_uni(((((((((((z18 - 1) * 128) +
                                                ((z19 - 1) * 64)) +
                                               ((z20 - 1) * 32)) +
                                              ((z21 - 1) * 16)) +
                                             ((z22 - 1) * 8)) +
                                            ((z23 - 1) * 4)) +
                                           ((z24 - 1) * 2)) +
                                          ((z25 - 1) * 1)) + 1))) +
                            log_sum_exp(acc0)),
                          "assigning variable m17", index_uni(((((((((((z18 -
                                                                    1) * 128)
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                   +
                                                                   ((z23 - 1)
                                                                    * 4)) +
                                                                  ((z24 - 1)
                                                                    * 2)) +
                                                                 ((z25 - 1) *
                                                                   1)) + 1)));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 762;
      assign(m18, rep_array(0, 128), "assigning variable m18");
      current_statement__ = 783;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 781;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 779;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 777;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 775;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 773;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 771;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    {
                      Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                      acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                      stan::math::fill(acc0, DUMMY_VAR__);
                      
                      current_statement__ = 764;
                      assign(acc0, rep_vector(0, 2),
                        "assigning variable acc0");
                      current_statement__ = 767;
                      for (int z18_val = 1; z18_val <= 2; ++z18_val) {
                        current_statement__ = 765;
                        assign(acc0,
                          (rvalue(acc0, "acc0", index_uni(z18_val)) +
                            rvalue(m17, "m17",
                              index_uni(((((((((((z18_val - 1) * 128) +
                                                 ((z19 - 1) * 64)) +
                                                ((z20 - 1) * 32)) +
                                               ((z21 - 1) * 16)) +
                                              ((z22 - 1) * 8)) +
                                             ((z23 - 1) * 4)) +
                                            ((z24 - 1) * 2)) +
                                           ((z25 - 1) * 1)) + 1)))),
                          "assigning variable acc0", index_uni(z18_val));
                      }
                      current_statement__ = 768;
                      assign(m18,
                        (rvalue(m18, "m18",
                           index_uni((((((((((z19 - 1) * 64) +
                                             ((z20 - 1) * 32)) +
                                            ((z21 - 1) * 16)) +
                                           ((z22 - 1) * 8)) +
                                          ((z23 - 1) * 4)) + ((z24 - 1) * 2))
                                        + ((z25 - 1) * 1)) + 1))) +
                          log_sum_exp(acc0)),
                        "assigning variable m18", index_uni((((((((((z19 - 1)
                                                                    * 64) +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                   +
                                                                   ((z21 - 1)
                                                                    * 16)) +
                                                                  ((z22 - 1)
                                                                    * 8)) +
                                                                 ((z23 - 1) *
                                                                   4)) +
                                                                ((z24 - 1) *
                                                                  2)) +
                                                               ((z25 - 1) *
                                                                 1)) + 1)));
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 784;
      assign(m19, rep_array(0, 64), "assigning variable m19");
      current_statement__ = 803;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 801;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 799;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 797;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 795;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 793;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  {
                    Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                    acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                    stan::math::fill(acc0, DUMMY_VAR__);
                    
                    current_statement__ = 786;
                    assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                    current_statement__ = 789;
                    for (int z19_val = 1; z19_val <= 2; ++z19_val) {
                      current_statement__ = 787;
                      assign(acc0,
                        (rvalue(acc0, "acc0", index_uni(z19_val)) +
                          rvalue(m18, "m18",
                            index_uni((((((((((z19_val - 1) * 64) +
                                              ((z20 - 1) * 32)) +
                                             ((z21 - 1) * 16)) +
                                            ((z22 - 1) * 8)) +
                                           ((z23 - 1) * 4)) +
                                          ((z24 - 1) * 2)) + ((z25 - 1) * 1))
                                        + 1)))),
                        "assigning variable acc0", index_uni(z19_val));
                    }
                    current_statement__ = 790;
                    assign(m19,
                      (rvalue(m19, "m19",
                         index_uni(((((((((z20 - 1) * 32) + ((z21 - 1) * 16))
                                         + ((z22 - 1) * 8)) +
                                        ((z23 - 1) * 4)) + ((z24 - 1) * 2)) +
                                      ((z25 - 1) * 1)) + 1))) +
                        log_sum_exp(acc0)),
                      "assigning variable m19", index_uni(((((((((z20 - 1) *
                                                                  32) +
                                                                 ((z21 - 1) *
                                                                   16)) +
                                                                ((z22 - 1) *
                                                                  8)) +
                                                               ((z23 - 1) *
                                                                 4)) +
                                                              ((z24 - 1) * 2))
                                                             +
                                                             ((z25 - 1) * 1))
                                                            + 1)));
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 804;
      assign(m20, rep_array(0, 32), "assigning variable m20");
      current_statement__ = 821;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 819;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 817;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 815;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 813;
              for (int z21 = 1; z21 <= 2; ++z21) {
                {
                  Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                  acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                  stan::math::fill(acc0, DUMMY_VAR__);
                  
                  current_statement__ = 806;
                  assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                  current_statement__ = 809;
                  for (int z20_val = 1; z20_val <= 2; ++z20_val) {
                    current_statement__ = 807;
                    assign(acc0,
                      (rvalue(acc0, "acc0", index_uni(z20_val)) +
                        rvalue(m19, "m19",
                          index_uni(((((((((z20_val - 1) * 32) +
                                           ((z21 - 1) * 16)) +
                                          ((z22 - 1) * 8)) + ((z23 - 1) * 4))
                                        + ((z24 - 1) * 2)) + ((z25 - 1) * 1))
                                      + 1)))),
                      "assigning variable acc0", index_uni(z20_val));
                  }
                  current_statement__ = 810;
                  assign(m20,
                    (rvalue(m20, "m20",
                       index_uni((((((((z21 - 1) * 16) + ((z22 - 1) * 8)) +
                                      ((z23 - 1) * 4)) + ((z24 - 1) * 2)) +
                                    ((z25 - 1) * 1)) + 1))) +
                      log_sum_exp(acc0)),
                    "assigning variable m20", index_uni((((((((z21 - 1) * 16)
                                                              +
                                                              ((z22 - 1) * 8))
                                                             +
                                                             ((z23 - 1) * 4))
                                                            +
                                                            ((z24 - 1) * 2))
                                                           + ((z25 - 1) * 1))
                                                          + 1)));
                }
              }
            }
          }
        }
      }
      current_statement__ = 822;
      assign(m21, rep_array(0, 16), "assigning variable m21");
      current_statement__ = 837;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 835;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 833;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 831;
            for (int z22 = 1; z22 <= 2; ++z22) {
              {
                Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                stan::math::fill(acc0, DUMMY_VAR__);
                
                current_statement__ = 824;
                assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                current_statement__ = 827;
                for (int z21_val = 1; z21_val <= 2; ++z21_val) {
                  current_statement__ = 825;
                  assign(acc0,
                    (rvalue(acc0, "acc0", index_uni(z21_val)) +
                      rvalue(m20, "m20",
                        index_uni((((((((z21_val - 1) * 16) +
                                        ((z22 - 1) * 8)) + ((z23 - 1) * 4)) +
                                      ((z24 - 1) * 2)) + ((z25 - 1) * 1)) +
                                    1)))),
                    "assigning variable acc0", index_uni(z21_val));
                }
                current_statement__ = 828;
                assign(m21,
                  (rvalue(m21, "m21",
                     index_uni(((((((z22 - 1) * 8) + ((z23 - 1) * 4)) +
                                   ((z24 - 1) * 2)) + ((z25 - 1) * 1)) + 1)))
                    + log_sum_exp(acc0)),
                  "assigning variable m21", index_uni(((((((z22 - 1) * 8) +
                                                           ((z23 - 1) * 4)) +
                                                          ((z24 - 1) * 2)) +
                                                         ((z25 - 1) * 1)) +
                                                        1)));
              }
            }
          }
        }
      }
      current_statement__ = 838;
      assign(m22, rep_array(0, 8), "assigning variable m22");
      current_statement__ = 851;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 849;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 847;
          for (int z23 = 1; z23 <= 2; ++z23) {
            {
              Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
              acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
              stan::math::fill(acc0, DUMMY_VAR__);
              
              current_statement__ = 840;
              assign(acc0, rep_vector(0, 2), "assigning variable acc0");
              current_statement__ = 843;
              for (int z22_val = 1; z22_val <= 2; ++z22_val) {
                current_statement__ = 841;
                assign(acc0,
                  (rvalue(acc0, "acc0", index_uni(z22_val)) +
                    rvalue(m21, "m21",
                      index_uni(((((((z22_val - 1) * 8) + ((z23 - 1) * 4)) +
                                    ((z24 - 1) * 2)) + ((z25 - 1) * 1)) + 1)))),
                  "assigning variable acc0", index_uni(z22_val));
              }
              current_statement__ = 844;
              assign(m22,
                (rvalue(m22, "m22",
                   index_uni((((((z23 - 1) * 4) + ((z24 - 1) * 2)) +
                                ((z25 - 1) * 1)) + 1))) + log_sum_exp(acc0)),
                "assigning variable m22", index_uni((((((z23 - 1) * 4) +
                                                        ((z24 - 1) * 2)) +
                                                       ((z25 - 1) * 1)) + 1)));
            }
          }
        }
      }
      current_statement__ = 852;
      assign(m23, rep_array(0, 4), "assigning variable m23");
      current_statement__ = 863;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 861;
        for (int z24 = 1; z24 <= 2; ++z24) {
          {
            Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
            acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
            stan::math::fill(acc0, DUMMY_VAR__);
            
            current_statement__ = 854;
            assign(acc0, rep_vector(0, 2), "assigning variable acc0");
            current_statement__ = 857;
            for (int z23_val = 1; z23_val <= 2; ++z23_val) {
              current_statement__ = 855;
              assign(acc0,
                (rvalue(acc0, "acc0", index_uni(z23_val)) +
                  rvalue(m22, "m22",
                    index_uni((((((z23_val - 1) * 4) + ((z24 - 1) * 2)) +
                                 ((z25 - 1) * 1)) + 1)))),
                "assigning variable acc0", index_uni(z23_val));
            }
            current_statement__ = 858;
            assign(m23,
              (rvalue(m23, "m23",
                 index_uni(((((z24 - 1) * 2) + ((z25 - 1) * 1)) + 1))) +
                log_sum_exp(acc0)),
              "assigning variable m23", index_uni(((((z24 - 1) * 2) +
                                                     ((z25 - 1) * 1)) + 1)));
          }
        }
      }
      current_statement__ = 864;
      assign(m24, rep_array(0, 2), "assigning variable m24");
      current_statement__ = 873;
      for (int z25 = 1; z25 <= 2; ++z25) {
        {
          Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
          acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
          stan::math::fill(acc0, DUMMY_VAR__);
          
          current_statement__ = 866;
          assign(acc0, rep_vector(0, 2), "assigning variable acc0");
          current_statement__ = 869;
          for (int z24_val = 1; z24_val <= 2; ++z24_val) {
            current_statement__ = 867;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z24_val)) +
                rvalue(m23, "m23",
                  index_uni(((((z24_val - 1) * 2) + ((z25 - 1) * 1)) + 1)))),
              "assigning variable acc0", index_uni(z24_val));
          }
          current_statement__ = 870;
          assign(m24,
            (rvalue(m24, "m24", index_uni(z25)) + log_sum_exp(acc0)),
            "assigning variable m24", index_uni(z25));
        }
      }
      current_statement__ = 874;
      m25 = 0;
      {
        Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
        acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
        stan::math::fill(acc0, DUMMY_VAR__);
        
        current_statement__ = 876;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 879;
        for (int z25_val = 1; z25_val <= 2; ++z25_val) {
          current_statement__ = 877;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z25_val)) +
              rvalue(m24, "m24", index_uni((((z25_val - 1) * 1) + 1)))),
            "assigning variable acc0", index_uni(z25_val));
        }
        current_statement__ = 880;
        m25 = (m25 + log_sum_exp(acc0));
      }
      {
        current_statement__ = 1113;
        lp_accum__.add(beta_lpdf<propto__>(prior1, 1, 1));
        current_statement__ = 1114;
        lp_accum__.add(beta_lpdf<propto__>(prior2, 1, 1));
        current_statement__ = 1115;
        lp_accum__.add(beta_lpdf<propto__>(prior3, 1, 1));
        current_statement__ = 1116;
        lp_accum__.add(beta_lpdf<propto__>(prior4, 1, 1));
        current_statement__ = 1117;
        lp_accum__.add(beta_lpdf<propto__>(prior5, 1, 1));
        current_statement__ = 1118;
        lp_accum__.add(beta_lpdf<propto__>(prior6, 1, 1));
        current_statement__ = 1119;
        lp_accum__.add(beta_lpdf<propto__>(prior7, 1, 1));
        current_statement__ = 1120;
        lp_accum__.add(beta_lpdf<propto__>(prior8, 1, 1));
        current_statement__ = 1121;
        lp_accum__.add(beta_lpdf<propto__>(prior9, 1, 1));
        current_statement__ = 1122;
        lp_accum__.add(beta_lpdf<propto__>(prior10, 1, 1));
        current_statement__ = 1123;
        lp_accum__.add(beta_lpdf<propto__>(prior11, 1, 1));
        current_statement__ = 1124;
        lp_accum__.add(beta_lpdf<propto__>(prior12, 1, 1));
        current_statement__ = 1125;
        lp_accum__.add(beta_lpdf<propto__>(prior13, 1, 1));
        current_statement__ = 1126;
        lp_accum__.add(beta_lpdf<propto__>(prior14, 1, 1));
        current_statement__ = 1127;
        lp_accum__.add(beta_lpdf<propto__>(prior15, 1, 1));
        current_statement__ = 1128;
        lp_accum__.add(beta_lpdf<propto__>(prior16, 1, 1));
        current_statement__ = 1129;
        lp_accum__.add(beta_lpdf<propto__>(prior17, 1, 1));
        current_statement__ = 1130;
        lp_accum__.add(beta_lpdf<propto__>(prior18, 1, 1));
        current_statement__ = 1131;
        lp_accum__.add(beta_lpdf<propto__>(prior19, 1, 1));
        current_statement__ = 1132;
        lp_accum__.add(beta_lpdf<propto__>(prior20, 1, 1));
        current_statement__ = 1133;
        lp_accum__.add(beta_lpdf<propto__>(prior21, 1, 1));
        current_statement__ = 1134;
        lp_accum__.add(beta_lpdf<propto__>(prior22, 1, 1));
        current_statement__ = 1135;
        lp_accum__.add(beta_lpdf<propto__>(prior23, 1, 1));
        current_statement__ = 1136;
        lp_accum__.add(beta_lpdf<propto__>(prior24, 1, 1));
        current_statement__ = 1137;
        lp_accum__.add(beta_lpdf<propto__>(prior25, 1, 1));
        current_statement__ = 1138;
        lp_accum__.add(m25);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "or_25_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double prior1;
      prior1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      prior1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior10;
      prior10 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      prior10 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior11;
      prior11 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      prior11 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior12;
      prior12 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      prior12 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior13;
      prior13 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      prior13 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior14;
      prior14 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      prior14 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior15;
      prior15 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      prior15 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior16;
      prior16 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      prior16 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior17;
      prior17 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      prior17 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior18;
      prior18 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      prior18 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior19;
      prior19 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      prior19 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior2;
      prior2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      prior2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior20;
      prior20 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      prior20 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior21;
      prior21 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      prior21 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior22;
      prior22 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      prior22 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior23;
      prior23 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      prior23 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior24;
      prior24 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      prior24 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior25;
      prior25 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 18;
      prior25 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior3;
      prior3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 19;
      prior3 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior4;
      prior4 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 20;
      prior4 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior5;
      prior5 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 21;
      prior5 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior6;
      prior6 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 22;
      prior6 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior7;
      prior7 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 23;
      prior7 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior8;
      prior8 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 24;
      prior8 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior9;
      prior9 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 25;
      prior9 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      std::vector<double> m1;
      m1 = std::vector<double>(16777216, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m10;
      m10 = std::vector<double>(32768, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m11;
      m11 = std::vector<double>(16384, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m12;
      m12 = std::vector<double>(8192, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m13;
      m13 = std::vector<double>(4096, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m14;
      m14 = std::vector<double>(2048, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m15;
      m15 = std::vector<double>(1024, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m16;
      m16 = std::vector<double>(512, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m17;
      m17 = std::vector<double>(256, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m18;
      m18 = std::vector<double>(128, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m19;
      m19 = std::vector<double>(64, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m2;
      m2 = std::vector<double>(8388608, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m20;
      m20 = std::vector<double>(32, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m21;
      m21 = std::vector<double>(16, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m22;
      m22 = std::vector<double>(8, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m23;
      m23 = std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m24;
      m24 = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      double m25;
      m25 = std::numeric_limits<double>::quiet_NaN();
      
      std::vector<double> m3;
      m3 = std::vector<double>(4194304, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m4;
      m4 = std::vector<double>(2097152, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m5;
      m5 = std::vector<double>(1048576, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m6;
      m6 = std::vector<double>(524288, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m7;
      m7 = std::vector<double>(262144, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m8;
      m8 = std::vector<double>(131072, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m9;
      m9 = std::vector<double>(65536, std::numeric_limits<double>::quiet_NaN());
      
      
      out__.write(prior1);
      out__.write(prior10);
      out__.write(prior11);
      out__.write(prior12);
      out__.write(prior13);
      out__.write(prior14);
      out__.write(prior15);
      out__.write(prior16);
      out__.write(prior17);
      out__.write(prior18);
      out__.write(prior19);
      out__.write(prior2);
      out__.write(prior20);
      out__.write(prior21);
      out__.write(prior22);
      out__.write(prior23);
      out__.write(prior24);
      out__.write(prior25);
      out__.write(prior3);
      out__.write(prior4);
      out__.write(prior5);
      out__.write(prior6);
      out__.write(prior7);
      out__.write(prior8);
      out__.write(prior9);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 51;
      assign(m1, rep_array(0, 16777216), "assigning variable m1");
      current_statement__ = 137;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 135;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 133;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 131;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 129;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 127;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 125;
                  for (int z3 = 1; z3 <= 2; ++z3) {
                    current_statement__ = 123;
                    for (int z25 = 1; z25 <= 2; ++z25) {
                      current_statement__ = 121;
                      for (int z24 = 1; z24 <= 2; ++z24) {
                        current_statement__ = 119;
                        for (int z23 = 1; z23 <= 2; ++z23) {
                          current_statement__ = 117;
                          for (int z22 = 1; z22 <= 2; ++z22) {
                            current_statement__ = 115;
                            for (int z21 = 1; z21 <= 2; ++z21) {
                              current_statement__ = 113;
                              for (int z20 = 1; z20 <= 2; ++z20) {
                                current_statement__ = 111;
                                for (int z2 = 1; z2 <= 2; ++z2) {
                                  current_statement__ = 109;
                                  for (int z19 = 1; z19 <= 2; ++z19) {
                                    current_statement__ = 107;
                                    for (int z18 = 1; z18 <= 2; ++z18) {
                                      current_statement__ = 105;
                                      for (int z17 = 1; z17 <= 2; ++z17) {
                                        current_statement__ = 103;
                                        for (int z16 = 1; z16 <= 2; ++z16) {
                                          current_statement__ = 101;
                                          for (int z15 = 1; z15 <= 2; ++z15) {
                                            current_statement__ = 99;
                                            for (int z14 = 1; z14 <= 2; ++z14) {
                                              current_statement__ = 97;
                                              for (int z13 = 1; z13 <= 2;
                                                   ++z13) {
                                                current_statement__ = 95;
                                                for (int z12 = 1; z12 <= 2;
                                                     ++z12) {
                                                  current_statement__ = 93;
                                                  for (int z11 = 1; z11 <= 2;
                                                       ++z11) {
                                                    current_statement__ = 91;
                                                    for (int z10 = 1;
                                                         z10 <= 2; ++z10) {
                                                      {
                                                        Eigen::Matrix<double, -1, 1> acc0;
                                                        acc0 = Eigen::Matrix<double, -1, 1>(2);
                                                        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                                        
                                                        
                                                        current_statement__ = 53;
                                                        assign(acc0,
                                                          rep_vector(0, 2),
                                                          "assigning variable acc0");
                                                        current_statement__ = 87;
                                                        for (int z1_val = 1;
                                                             z1_val <= 2;
                                                             ++z1_val) {
                                                          current_statement__ = 54;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z1_val - 1),
                                                                prior1)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 55;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z2 - 1),
                                                                prior2)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 56;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z3 - 1),
                                                                prior3)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 57;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z4 - 1),
                                                                prior4)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 58;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z5 - 1),
                                                                prior5)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 59;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z6 - 1),
                                                                prior6)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 60;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z7 - 1),
                                                                prior7)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 61;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z8 - 1),
                                                                prior8)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 62;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z9 - 1),
                                                                prior9)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 63;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z10 - 1),
                                                                prior10)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 64;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z11 - 1),
                                                                prior11)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 65;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z12 - 1),
                                                                prior12)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 66;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z13 - 1),
                                                                prior13)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 67;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z14 - 1),
                                                                prior14)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 68;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z15 - 1),
                                                                prior15)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 69;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z16 - 1),
                                                                prior16)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 70;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z17 - 1),
                                                                prior17)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 71;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z18 - 1),
                                                                prior18)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 72;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z19 - 1),
                                                                prior19)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 73;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z20 - 1),
                                                                prior20)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 74;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z21 - 1),
                                                                prior21)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 75;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z22 - 1),
                                                                prior22)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 76;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z23 - 1),
                                                                prior23)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 77;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z24 - 1),
                                                                prior24)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 78;
                                                          assign(acc0,
                                                            (rvalue(acc0,
                                                               "acc0",
                                                               index_uni(z1_val))
                                                              +
                                                              bernoulli_lpmf<false>(
                                                                (z25 - 1),
                                                                prior25)),
                                                            "assigning variable acc0", 
                                                            index_uni(z1_val));
                                                          current_statement__ = 85;
                                                          if (logical_gt(
                                                                (((((((((((((((((((((((((z1_val
                                                                    + z2) +
                                                                    z3) + z4)
                                                                    + z5) +
                                                                    z6) + z7)
                                                                    + z8) +
                                                                    z9) +
                                                                    z10) +
                                                                    z11) +
                                                                    z12) +
                                                                    z13) +
                                                                    z14) +
                                                                    z15) +
                                                                    z16) +
                                                                    z17) +
                                                                    z18) +
                                                                    z19) +
                                                                    z20) +
                                                                    z21) +
                                                                    z22) +
                                                                    z23) +
                                                                    z24) +
                                                                   z25) - 25),
                                                                0)) {
                                                            current_statement__ = 82;
                                                            assign(acc0,
                                                              (rvalue(acc0,
                                                                 "acc0",
                                                                 index_uni(z1_val))
                                                                +
                                                                normal_lpdf<false>(
                                                                  d1, 135, 8)),
                                                              "assigning variable acc0", 
                                                              index_uni(z1_val));
                                                            current_statement__ = 83;
                                                            assign(acc0,
                                                              (rvalue(acc0,
                                                                 "acc0",
                                                                 index_uni(z1_val))
                                                                +
                                                                normal_lpdf<false>(
                                                                  d2, 135, 8)),
                                                              "assigning variable acc0", 
                                                              index_uni(z1_val));
                                                          } else {
                                                            current_statement__ = 79;
                                                            assign(acc0,
                                                              (rvalue(acc0,
                                                                 "acc0",
                                                                 index_uni(z1_val))
                                                                +
                                                                normal_lpdf<false>(
                                                                  d1, 80, 8)),
                                                              "assigning variable acc0", 
                                                              index_uni(z1_val));
                                                            current_statement__ = 80;
                                                            assign(acc0,
                                                              (rvalue(acc0,
                                                                 "acc0",
                                                                 index_uni(z1_val))
                                                                +
                                                                normal_lpdf<false>(
                                                                  d2, 80, 8)),
                                                              "assigning variable acc0", 
                                                              index_uni(z1_val));
                                                          }
                                                        }
                                                        current_statement__ = 88;
                                                        assign(m1,
                                                          (rvalue(m1, "m1",
                                                             index_uni(
                                                               ((((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    8388608)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    4194304))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    2097152))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z16 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z17 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z2 - 1)
                                                                    * 8192))
                                                                    +
                                                                    ((z20 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z22 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z23 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                   ((z8 - 1)
                                                                    * 2)) +
                                                                  ((z9 - 1) *
                                                                    1)) + 1)))
                                                            +
                                                            log_sum_exp(acc0)),
                                                          "assigning variable m1", 
                                                          index_uni(((((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    8388608)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    4194304))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    2097152))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z16 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z17 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z2 - 1)
                                                                    * 8192))
                                                                    +
                                                                    ((z20 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z22 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z23 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                    1)));
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 138;
      assign(m2, rep_array(0, 8388608), "assigning variable m2");
      current_statement__ = 191;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 189;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 187;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 185;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 183;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 181;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 179;
                  for (int z3 = 1; z3 <= 2; ++z3) {
                    current_statement__ = 177;
                    for (int z25 = 1; z25 <= 2; ++z25) {
                      current_statement__ = 175;
                      for (int z24 = 1; z24 <= 2; ++z24) {
                        current_statement__ = 173;
                        for (int z23 = 1; z23 <= 2; ++z23) {
                          current_statement__ = 171;
                          for (int z22 = 1; z22 <= 2; ++z22) {
                            current_statement__ = 169;
                            for (int z21 = 1; z21 <= 2; ++z21) {
                              current_statement__ = 167;
                              for (int z20 = 1; z20 <= 2; ++z20) {
                                current_statement__ = 165;
                                for (int z19 = 1; z19 <= 2; ++z19) {
                                  current_statement__ = 163;
                                  for (int z18 = 1; z18 <= 2; ++z18) {
                                    current_statement__ = 161;
                                    for (int z17 = 1; z17 <= 2; ++z17) {
                                      current_statement__ = 159;
                                      for (int z16 = 1; z16 <= 2; ++z16) {
                                        current_statement__ = 157;
                                        for (int z15 = 1; z15 <= 2; ++z15) {
                                          current_statement__ = 155;
                                          for (int z14 = 1; z14 <= 2; ++z14) {
                                            current_statement__ = 153;
                                            for (int z13 = 1; z13 <= 2; ++z13) {
                                              current_statement__ = 151;
                                              for (int z12 = 1; z12 <= 2;
                                                   ++z12) {
                                                current_statement__ = 149;
                                                for (int z11 = 1; z11 <= 2;
                                                     ++z11) {
                                                  current_statement__ = 147;
                                                  for (int z10 = 1; z10 <= 2;
                                                       ++z10) {
                                                    {
                                                      Eigen::Matrix<double, -1, 1> acc0;
                                                      acc0 = Eigen::Matrix<double, -1, 1>(2);
                                                      stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                                      
                                                      
                                                      current_statement__ = 140;
                                                      assign(acc0,
                                                        rep_vector(0, 2),
                                                        "assigning variable acc0");
                                                      current_statement__ = 143;
                                                      for (int z2_val = 1;
                                                           z2_val <= 2;
                                                           ++z2_val) {
                                                        current_statement__ = 141;
                                                        assign(acc0,
                                                          (rvalue(acc0,
                                                             "acc0",
                                                             index_uni(z2_val))
                                                            +
                                                            rvalue(m1, "m1",
                                                              index_uni(
                                                                ((((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    8388608)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    4194304))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    2097152))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z16 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z17 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z2_val
                                                                    - 1) *
                                                                    8192)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z22 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z23 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                   ((z9 - 1)
                                                                    * 1)) +
                                                                  1)))),
                                                          "assigning variable acc0", 
                                                          index_uni(z2_val));
                                                      }
                                                      current_statement__ = 144;
                                                      assign(m2,
                                                        (rvalue(m2, "m2",
                                                           index_uni(
                                                             (((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    4194304)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    2097152))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z16 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z22 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z23 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                   ((z6 - 1)
                                                                    * 8)) +
                                                                  ((z7 - 1) *
                                                                    4)) +
                                                                 ((z8 - 1) *
                                                                   2)) +
                                                                ((z9 - 1) *
                                                                  1)) + 1)))
                                                          +
                                                          log_sum_exp(acc0)),
                                                        "assigning variable m2", 
                                                        index_uni((((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    4194304)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    2097152))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z16 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z22 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z23 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                    1)));
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 192;
      assign(m3, rep_array(0, 4194304), "assigning variable m3");
      current_statement__ = 243;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 241;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 239;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 237;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 235;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 233;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 231;
                  for (int z25 = 1; z25 <= 2; ++z25) {
                    current_statement__ = 229;
                    for (int z24 = 1; z24 <= 2; ++z24) {
                      current_statement__ = 227;
                      for (int z23 = 1; z23 <= 2; ++z23) {
                        current_statement__ = 225;
                        for (int z22 = 1; z22 <= 2; ++z22) {
                          current_statement__ = 223;
                          for (int z21 = 1; z21 <= 2; ++z21) {
                            current_statement__ = 221;
                            for (int z20 = 1; z20 <= 2; ++z20) {
                              current_statement__ = 219;
                              for (int z19 = 1; z19 <= 2; ++z19) {
                                current_statement__ = 217;
                                for (int z18 = 1; z18 <= 2; ++z18) {
                                  current_statement__ = 215;
                                  for (int z17 = 1; z17 <= 2; ++z17) {
                                    current_statement__ = 213;
                                    for (int z16 = 1; z16 <= 2; ++z16) {
                                      current_statement__ = 211;
                                      for (int z15 = 1; z15 <= 2; ++z15) {
                                        current_statement__ = 209;
                                        for (int z14 = 1; z14 <= 2; ++z14) {
                                          current_statement__ = 207;
                                          for (int z13 = 1; z13 <= 2; ++z13) {
                                            current_statement__ = 205;
                                            for (int z12 = 1; z12 <= 2; ++z12) {
                                              current_statement__ = 203;
                                              for (int z11 = 1; z11 <= 2;
                                                   ++z11) {
                                                current_statement__ = 201;
                                                for (int z10 = 1; z10 <= 2;
                                                     ++z10) {
                                                  {
                                                    Eigen::Matrix<double, -1, 1> acc0;
                                                    acc0 = Eigen::Matrix<double, -1, 1>(2);
                                                    stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                                    
                                                    
                                                    current_statement__ = 194;
                                                    assign(acc0,
                                                      rep_vector(0, 2),
                                                      "assigning variable acc0");
                                                    current_statement__ = 197;
                                                    for (int z3_val = 1;
                                                         z3_val <= 2;
                                                         ++z3_val) {
                                                      current_statement__ = 195;
                                                      assign(acc0,
                                                        (rvalue(acc0, "acc0",
                                                           index_uni(z3_val))
                                                          +
                                                          rvalue(m2, "m2",
                                                            index_uni(
                                                              (((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    4194304)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    2097152))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z16 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z22 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z23 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3_val
                                                                    - 1) *
                                                                    64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                   ((z7 - 1)
                                                                    * 4)) +
                                                                  ((z8 - 1) *
                                                                    2)) +
                                                                 ((z9 - 1) *
                                                                   1)) + 1)))),
                                                        "assigning variable acc0", 
                                                        index_uni(z3_val));
                                                    }
                                                    current_statement__ = 198;
                                                    assign(m3,
                                                      (rvalue(m3, "m3",
                                                         index_uni(((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    2097152)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z22 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                    1))) +
                                                        log_sum_exp(acc0)),
                                                      "assigning variable m3", 
                                                      index_uni(((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    2097152)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z22 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                   ((z9 - 1)
                                                                    * 1)) +
                                                                  1)));
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 244;
      assign(m4, rep_array(0, 2097152), "assigning variable m4");
      current_statement__ = 293;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 291;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 289;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 287;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 285;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 283;
                for (int z25 = 1; z25 <= 2; ++z25) {
                  current_statement__ = 281;
                  for (int z24 = 1; z24 <= 2; ++z24) {
                    current_statement__ = 279;
                    for (int z23 = 1; z23 <= 2; ++z23) {
                      current_statement__ = 277;
                      for (int z22 = 1; z22 <= 2; ++z22) {
                        current_statement__ = 275;
                        for (int z21 = 1; z21 <= 2; ++z21) {
                          current_statement__ = 273;
                          for (int z20 = 1; z20 <= 2; ++z20) {
                            current_statement__ = 271;
                            for (int z19 = 1; z19 <= 2; ++z19) {
                              current_statement__ = 269;
                              for (int z18 = 1; z18 <= 2; ++z18) {
                                current_statement__ = 267;
                                for (int z17 = 1; z17 <= 2; ++z17) {
                                  current_statement__ = 265;
                                  for (int z16 = 1; z16 <= 2; ++z16) {
                                    current_statement__ = 263;
                                    for (int z15 = 1; z15 <= 2; ++z15) {
                                      current_statement__ = 261;
                                      for (int z14 = 1; z14 <= 2; ++z14) {
                                        current_statement__ = 259;
                                        for (int z13 = 1; z13 <= 2; ++z13) {
                                          current_statement__ = 257;
                                          for (int z12 = 1; z12 <= 2; ++z12) {
                                            current_statement__ = 255;
                                            for (int z11 = 1; z11 <= 2; ++z11) {
                                              current_statement__ = 253;
                                              for (int z10 = 1; z10 <= 2;
                                                   ++z10) {
                                                {
                                                  Eigen::Matrix<double, -1, 1> acc0;
                                                  acc0 = Eigen::Matrix<double, -1, 1>(2);
                                                  stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                                  
                                                  
                                                  current_statement__ = 246;
                                                  assign(acc0,
                                                    rep_vector(0, 2),
                                                    "assigning variable acc0");
                                                  current_statement__ = 249;
                                                  for (int z4_val = 1;
                                                       z4_val <= 2; ++z4_val) {
                                                    current_statement__ = 247;
                                                    assign(acc0,
                                                      (rvalue(acc0, "acc0",
                                                         index_uni(z4_val)) +
                                                        rvalue(m3, "m3",
                                                          index_uni(((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    2097152)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    1048576))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z15 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z21 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z22 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z4_val
                                                                    - 1) *
                                                                    32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                    1)))),
                                                      "assigning variable acc0", 
                                                      index_uni(z4_val));
                                                  }
                                                  current_statement__ = 250;
                                                  assign(m4,
                                                    (rvalue(m4, "m4",
                                                       index_uni((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    1048576)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z21 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                   1))) +
                                                      log_sum_exp(acc0)),
                                                    "assigning variable m4", 
                                                    index_uni((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    1048576)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z21 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                   ((z7 - 1)
                                                                    * 4)) +
                                                                  ((z8 - 1) *
                                                                    2)) +
                                                                 ((z9 - 1) *
                                                                   1)) + 1)));
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 294;
      assign(m5, rep_array(0, 1048576), "assigning variable m5");
      current_statement__ = 341;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 339;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 337;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 335;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 333;
              for (int z25 = 1; z25 <= 2; ++z25) {
                current_statement__ = 331;
                for (int z24 = 1; z24 <= 2; ++z24) {
                  current_statement__ = 329;
                  for (int z23 = 1; z23 <= 2; ++z23) {
                    current_statement__ = 327;
                    for (int z22 = 1; z22 <= 2; ++z22) {
                      current_statement__ = 325;
                      for (int z21 = 1; z21 <= 2; ++z21) {
                        current_statement__ = 323;
                        for (int z20 = 1; z20 <= 2; ++z20) {
                          current_statement__ = 321;
                          for (int z19 = 1; z19 <= 2; ++z19) {
                            current_statement__ = 319;
                            for (int z18 = 1; z18 <= 2; ++z18) {
                              current_statement__ = 317;
                              for (int z17 = 1; z17 <= 2; ++z17) {
                                current_statement__ = 315;
                                for (int z16 = 1; z16 <= 2; ++z16) {
                                  current_statement__ = 313;
                                  for (int z15 = 1; z15 <= 2; ++z15) {
                                    current_statement__ = 311;
                                    for (int z14 = 1; z14 <= 2; ++z14) {
                                      current_statement__ = 309;
                                      for (int z13 = 1; z13 <= 2; ++z13) {
                                        current_statement__ = 307;
                                        for (int z12 = 1; z12 <= 2; ++z12) {
                                          current_statement__ = 305;
                                          for (int z11 = 1; z11 <= 2; ++z11) {
                                            current_statement__ = 303;
                                            for (int z10 = 1; z10 <= 2; ++z10) {
                                              {
                                                Eigen::Matrix<double, -1, 1> acc0;
                                                acc0 = Eigen::Matrix<double, -1, 1>(2);
                                                stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                                
                                                
                                                current_statement__ = 296;
                                                assign(acc0,
                                                  rep_vector(0, 2),
                                                  "assigning variable acc0");
                                                current_statement__ = 299;
                                                for (int z5_val = 1;
                                                     z5_val <= 2; ++z5_val) {
                                                  current_statement__ = 297;
                                                  assign(acc0,
                                                    (rvalue(acc0, "acc0",
                                                       index_uni(z5_val)) +
                                                      rvalue(m4, "m4",
                                                        index_uni((((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    1048576)
                                                                    +
                                                                    ((z11 -
                                                                    1) *
                                                                    524288))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z14 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z20 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z21 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z5_val
                                                                    - 1) *
                                                                    16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                    1)))),
                                                    "assigning variable acc0", 
                                                    index_uni(z5_val));
                                                }
                                                current_statement__ = 300;
                                                assign(m5,
                                                  (rvalue(m5, "m5",
                                                     index_uni(((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    524288) +
                                                                    ((z11 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z20 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                   ((z8 - 1)
                                                                    * 2)) +
                                                                  ((z9 - 1) *
                                                                    1)) + 1)))
                                                    + log_sum_exp(acc0)),
                                                  "assigning variable m5", 
                                                  index_uni(((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    524288) +
                                                                    ((z11 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z20 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 32))
                                                                   +
                                                                   ((z25 - 1)
                                                                    * 16)) +
                                                                  ((z6 - 1) *
                                                                    8)) +
                                                                 ((z7 - 1) *
                                                                   4)) +
                                                                ((z8 - 1) *
                                                                  2)) +
                                                               ((z9 - 1) * 1))
                                                              + 1)));
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 342;
      assign(m6, rep_array(0, 524288), "assigning variable m6");
      current_statement__ = 387;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 385;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 383;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 381;
            for (int z25 = 1; z25 <= 2; ++z25) {
              current_statement__ = 379;
              for (int z24 = 1; z24 <= 2; ++z24) {
                current_statement__ = 377;
                for (int z23 = 1; z23 <= 2; ++z23) {
                  current_statement__ = 375;
                  for (int z22 = 1; z22 <= 2; ++z22) {
                    current_statement__ = 373;
                    for (int z21 = 1; z21 <= 2; ++z21) {
                      current_statement__ = 371;
                      for (int z20 = 1; z20 <= 2; ++z20) {
                        current_statement__ = 369;
                        for (int z19 = 1; z19 <= 2; ++z19) {
                          current_statement__ = 367;
                          for (int z18 = 1; z18 <= 2; ++z18) {
                            current_statement__ = 365;
                            for (int z17 = 1; z17 <= 2; ++z17) {
                              current_statement__ = 363;
                              for (int z16 = 1; z16 <= 2; ++z16) {
                                current_statement__ = 361;
                                for (int z15 = 1; z15 <= 2; ++z15) {
                                  current_statement__ = 359;
                                  for (int z14 = 1; z14 <= 2; ++z14) {
                                    current_statement__ = 357;
                                    for (int z13 = 1; z13 <= 2; ++z13) {
                                      current_statement__ = 355;
                                      for (int z12 = 1; z12 <= 2; ++z12) {
                                        current_statement__ = 353;
                                        for (int z11 = 1; z11 <= 2; ++z11) {
                                          current_statement__ = 351;
                                          for (int z10 = 1; z10 <= 2; ++z10) {
                                            {
                                              Eigen::Matrix<double, -1, 1> acc0;
                                              acc0 = Eigen::Matrix<double, -1, 1>(2);
                                              stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                              
                                              
                                              current_statement__ = 344;
                                              assign(acc0, rep_vector(0, 2),
                                                "assigning variable acc0");
                                              current_statement__ = 347;
                                              for (int z6_val = 1;
                                                   z6_val <= 2; ++z6_val) {
                                                current_statement__ = 345;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z6_val)) +
                                                    rvalue(m5, "m5",
                                                      index_uni(((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    524288) +
                                                                    ((z11 -
                                                                    1) *
                                                                    262144))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z13 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z19 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z20 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z6_val
                                                                    - 1) * 8))
                                                                    +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                   ((z9 - 1)
                                                                    * 1)) +
                                                                  1)))),
                                                  "assigning variable acc0", 
                                                  index_uni(z6_val));
                                              }
                                              current_statement__ = 348;
                                              assign(m6,
                                                (rvalue(m6, "m6",
                                                   index_uni((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    262144) +
                                                                    ((z11 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z19 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 16))
                                                                   +
                                                                   ((z25 - 1)
                                                                    * 8)) +
                                                                  ((z7 - 1) *
                                                                    4)) +
                                                                 ((z8 - 1) *
                                                                   2)) +
                                                                ((z9 - 1) *
                                                                  1)) + 1)))
                                                  + log_sum_exp(acc0)),
                                                "assigning variable m6", 
                                                index_uni((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    262144) +
                                                                    ((z11 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z19 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 128))
                                                                   +
                                                                   ((z22 - 1)
                                                                    * 64)) +
                                                                  ((z23 - 1)
                                                                    * 32)) +
                                                                 ((z24 - 1) *
                                                                   16)) +
                                                                ((z25 - 1) *
                                                                  8)) +
                                                               ((z7 - 1) * 4))
                                                              +
                                                              ((z8 - 1) * 2))
                                                             +
                                                             ((z9 - 1) * 1))
                                                            + 1)));
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 388;
      assign(m7, rep_array(0, 262144), "assigning variable m7");
      current_statement__ = 431;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 429;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 427;
          for (int z25 = 1; z25 <= 2; ++z25) {
            current_statement__ = 425;
            for (int z24 = 1; z24 <= 2; ++z24) {
              current_statement__ = 423;
              for (int z23 = 1; z23 <= 2; ++z23) {
                current_statement__ = 421;
                for (int z22 = 1; z22 <= 2; ++z22) {
                  current_statement__ = 419;
                  for (int z21 = 1; z21 <= 2; ++z21) {
                    current_statement__ = 417;
                    for (int z20 = 1; z20 <= 2; ++z20) {
                      current_statement__ = 415;
                      for (int z19 = 1; z19 <= 2; ++z19) {
                        current_statement__ = 413;
                        for (int z18 = 1; z18 <= 2; ++z18) {
                          current_statement__ = 411;
                          for (int z17 = 1; z17 <= 2; ++z17) {
                            current_statement__ = 409;
                            for (int z16 = 1; z16 <= 2; ++z16) {
                              current_statement__ = 407;
                              for (int z15 = 1; z15 <= 2; ++z15) {
                                current_statement__ = 405;
                                for (int z14 = 1; z14 <= 2; ++z14) {
                                  current_statement__ = 403;
                                  for (int z13 = 1; z13 <= 2; ++z13) {
                                    current_statement__ = 401;
                                    for (int z12 = 1; z12 <= 2; ++z12) {
                                      current_statement__ = 399;
                                      for (int z11 = 1; z11 <= 2; ++z11) {
                                        current_statement__ = 397;
                                        for (int z10 = 1; z10 <= 2; ++z10) {
                                          {
                                            Eigen::Matrix<double, -1, 1> acc0;
                                            acc0 = Eigen::Matrix<double, -1, 1>(2);
                                            stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                            
                                            
                                            current_statement__ = 390;
                                            assign(acc0, rep_vector(0, 2),
                                              "assigning variable acc0");
                                            current_statement__ = 393;
                                            for (int z7_val = 1; z7_val <= 2;
                                                 ++z7_val) {
                                              current_statement__ = 391;
                                              assign(acc0,
                                                (rvalue(acc0, "acc0",
                                                   index_uni(z7_val)) +
                                                  rvalue(m6, "m6",
                                                    index_uni((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    262144) +
                                                                    ((z11 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z19 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 8))
                                                                   +
                                                                   ((z7_val -
                                                                    1) * 4))
                                                                  +
                                                                  ((z8 - 1) *
                                                                    2)) +
                                                                 ((z9 - 1) *
                                                                   1)) + 1)))),
                                                "assigning variable acc0", 
                                                index_uni(z7_val));
                                            }
                                            current_statement__ = 394;
                                            assign(m7,
                                              (rvalue(m7, "m7",
                                                 index_uni(((((((((((((((((((((z10
                                                                    - 1) *
                                                                    131072) +
                                                                    ((z11 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z18 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 64))
                                                                   +
                                                                   ((z22 - 1)
                                                                    * 32)) +
                                                                  ((z23 - 1)
                                                                    * 16)) +
                                                                 ((z24 - 1) *
                                                                   8)) +
                                                                ((z25 - 1) *
                                                                  4)) +
                                                               ((z8 - 1) * 2))
                                                              +
                                                              ((z9 - 1) * 1))
                                                             + 1))) +
                                                log_sum_exp(acc0)),
                                              "assigning variable m7", 
                                              index_uni(((((((((((((((((((((z10
                                                                    - 1) *
                                                                    131072) +
                                                                    ((z11 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z18 -
                                                                    1) * 512))
                                                                   +
                                                                   ((z19 - 1)
                                                                    * 256)) +
                                                                  ((z20 - 1)
                                                                    * 128)) +
                                                                 ((z21 - 1) *
                                                                   64)) +
                                                                ((z22 - 1) *
                                                                  32)) +
                                                               ((z23 - 1) *
                                                                 16)) +
                                                              ((z24 - 1) * 8))
                                                             +
                                                             ((z25 - 1) * 4))
                                                            + ((z8 - 1) * 2))
                                                           + ((z9 - 1) * 1))
                                                          + 1)));
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 432;
      assign(m8, rep_array(0, 131072), "assigning variable m8");
      current_statement__ = 473;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 471;
        for (int z25 = 1; z25 <= 2; ++z25) {
          current_statement__ = 469;
          for (int z24 = 1; z24 <= 2; ++z24) {
            current_statement__ = 467;
            for (int z23 = 1; z23 <= 2; ++z23) {
              current_statement__ = 465;
              for (int z22 = 1; z22 <= 2; ++z22) {
                current_statement__ = 463;
                for (int z21 = 1; z21 <= 2; ++z21) {
                  current_statement__ = 461;
                  for (int z20 = 1; z20 <= 2; ++z20) {
                    current_statement__ = 459;
                    for (int z19 = 1; z19 <= 2; ++z19) {
                      current_statement__ = 457;
                      for (int z18 = 1; z18 <= 2; ++z18) {
                        current_statement__ = 455;
                        for (int z17 = 1; z17 <= 2; ++z17) {
                          current_statement__ = 453;
                          for (int z16 = 1; z16 <= 2; ++z16) {
                            current_statement__ = 451;
                            for (int z15 = 1; z15 <= 2; ++z15) {
                              current_statement__ = 449;
                              for (int z14 = 1; z14 <= 2; ++z14) {
                                current_statement__ = 447;
                                for (int z13 = 1; z13 <= 2; ++z13) {
                                  current_statement__ = 445;
                                  for (int z12 = 1; z12 <= 2; ++z12) {
                                    current_statement__ = 443;
                                    for (int z11 = 1; z11 <= 2; ++z11) {
                                      current_statement__ = 441;
                                      for (int z10 = 1; z10 <= 2; ++z10) {
                                        {
                                          Eigen::Matrix<double, -1, 1> acc0;
                                          acc0 = Eigen::Matrix<double, -1, 1>(2);
                                          stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                          
                                          
                                          current_statement__ = 434;
                                          assign(acc0, rep_vector(0, 2),
                                            "assigning variable acc0");
                                          current_statement__ = 437;
                                          for (int z8_val = 1; z8_val <= 2;
                                               ++z8_val) {
                                            current_statement__ = 435;
                                            assign(acc0,
                                              (rvalue(acc0, "acc0",
                                                 index_uni(z8_val)) +
                                                rvalue(m7, "m7",
                                                  index_uni(((((((((((((((((((((z10
                                                                    - 1) *
                                                                    131072) +
                                                                    ((z11 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z18 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 32))
                                                                   +
                                                                   ((z23 - 1)
                                                                    * 16)) +
                                                                  ((z24 - 1)
                                                                    * 8)) +
                                                                 ((z25 - 1) *
                                                                   4)) +
                                                                ((z8_val - 1)
                                                                  * 2)) +
                                                               ((z9 - 1) * 1))
                                                              + 1)))),
                                              "assigning variable acc0", 
                                              index_uni(z8_val));
                                          }
                                          current_statement__ = 438;
                                          assign(m8,
                                            (rvalue(m8, "m8",
                                               index_uni((((((((((((((((((((z10
                                                                    - 1) *
                                                                    65536) +
                                                                    ((z11 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z17 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 256))
                                                                   +
                                                                   ((z19 - 1)
                                                                    * 128)) +
                                                                  ((z20 - 1)
                                                                    * 64)) +
                                                                 ((z21 - 1) *
                                                                   32)) +
                                                                ((z22 - 1) *
                                                                  16)) +
                                                               ((z23 - 1) *
                                                                 8)) +
                                                              ((z24 - 1) * 4))
                                                             +
                                                             ((z25 - 1) * 2))
                                                            + ((z9 - 1) * 1))
                                                           + 1))) +
                                              log_sum_exp(acc0)),
                                            "assigning variable m8", 
                                            index_uni((((((((((((((((((((z10
                                                                    - 1) *
                                                                    65536) +
                                                                    ((z11 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    2048)) +
                                                                   ((z16 - 1)
                                                                    * 1024))
                                                                  +
                                                                  ((z17 - 1)
                                                                    * 512)) +
                                                                 ((z18 - 1) *
                                                                   256)) +
                                                                ((z19 - 1) *
                                                                  128)) +
                                                               ((z20 - 1) *
                                                                 64)) +
                                                              ((z21 - 1) *
                                                                32)) +
                                                             ((z22 - 1) * 16))
                                                            +
                                                            ((z23 - 1) * 8))
                                                           + ((z24 - 1) * 4))
                                                          + ((z25 - 1) * 2))
                                                         + ((z9 - 1) * 1)) +
                                                        1)));
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 474;
      assign(m9, rep_array(0, 65536), "assigning variable m9");
      current_statement__ = 513;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 511;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 509;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 507;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 505;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 503;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 501;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 499;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 497;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        current_statement__ = 495;
                        for (int z16 = 1; z16 <= 2; ++z16) {
                          current_statement__ = 493;
                          for (int z15 = 1; z15 <= 2; ++z15) {
                            current_statement__ = 491;
                            for (int z14 = 1; z14 <= 2; ++z14) {
                              current_statement__ = 489;
                              for (int z13 = 1; z13 <= 2; ++z13) {
                                current_statement__ = 487;
                                for (int z12 = 1; z12 <= 2; ++z12) {
                                  current_statement__ = 485;
                                  for (int z11 = 1; z11 <= 2; ++z11) {
                                    current_statement__ = 483;
                                    for (int z10 = 1; z10 <= 2; ++z10) {
                                      {
                                        Eigen::Matrix<double, -1, 1> acc0;
                                        acc0 = Eigen::Matrix<double, -1, 1>(2);
                                        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                        
                                        
                                        current_statement__ = 476;
                                        assign(acc0, rep_vector(0, 2),
                                          "assigning variable acc0");
                                        current_statement__ = 479;
                                        for (int z9_val = 1; z9_val <= 2;
                                             ++z9_val) {
                                          current_statement__ = 477;
                                          assign(acc0,
                                            (rvalue(acc0, "acc0",
                                               index_uni(z9_val)) +
                                              rvalue(m8, "m8",
                                                index_uni((((((((((((((((((((z10
                                                                    - 1) *
                                                                    65536) +
                                                                    ((z11 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z17 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 128))
                                                                   +
                                                                   ((z20 - 1)
                                                                    * 64)) +
                                                                  ((z21 - 1)
                                                                    * 32)) +
                                                                 ((z22 - 1) *
                                                                   16)) +
                                                                ((z23 - 1) *
                                                                  8)) +
                                                               ((z24 - 1) *
                                                                 4)) +
                                                              ((z25 - 1) * 2))
                                                             +
                                                             ((z9_val - 1) *
                                                               1)) + 1)))),
                                            "assigning variable acc0", 
                                            index_uni(z9_val));
                                        }
                                        current_statement__ = 480;
                                        assign(m9,
                                          (rvalue(m9, "m9",
                                             index_uni(((((((((((((((((((z10
                                                                    - 1) *
                                                                    32768) +
                                                                    ((z11 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                   ((z16 - 1)
                                                                    * 512)) +
                                                                  ((z17 - 1)
                                                                    * 256)) +
                                                                 ((z18 - 1) *
                                                                   128)) +
                                                                ((z19 - 1) *
                                                                  64)) +
                                                               ((z20 - 1) *
                                                                 32)) +
                                                              ((z21 - 1) *
                                                                16)) +
                                                             ((z22 - 1) * 8))
                                                            +
                                                            ((z23 - 1) * 4))
                                                           + ((z24 - 1) * 2))
                                                          + ((z25 - 1) * 1))
                                                         + 1))) +
                                            log_sum_exp(acc0)),
                                          "assigning variable m9", index_uni(
                                                                    ((((((((((((((((((z10
                                                                    - 1) *
                                                                    32768) +
                                                                    ((z11 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 2))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 1))
                                                                    + 1)));
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 514;
      assign(m10, rep_array(0, 32768), "assigning variable m10");
      current_statement__ = 551;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 549;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 547;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 545;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 543;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 541;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 539;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 537;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 535;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        current_statement__ = 533;
                        for (int z16 = 1; z16 <= 2; ++z16) {
                          current_statement__ = 531;
                          for (int z15 = 1; z15 <= 2; ++z15) {
                            current_statement__ = 529;
                            for (int z14 = 1; z14 <= 2; ++z14) {
                              current_statement__ = 527;
                              for (int z13 = 1; z13 <= 2; ++z13) {
                                current_statement__ = 525;
                                for (int z12 = 1; z12 <= 2; ++z12) {
                                  current_statement__ = 523;
                                  for (int z11 = 1; z11 <= 2; ++z11) {
                                    {
                                      Eigen::Matrix<double, -1, 1> acc0;
                                      acc0 = Eigen::Matrix<double, -1, 1>(2);
                                      stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                      
                                      
                                      current_statement__ = 516;
                                      assign(acc0, rep_vector(0, 2),
                                        "assigning variable acc0");
                                      current_statement__ = 519;
                                      for (int z10_val = 1; z10_val <= 2;
                                           ++z10_val) {
                                        current_statement__ = 517;
                                        assign(acc0,
                                          (rvalue(acc0, "acc0",
                                             index_uni(z10_val)) +
                                            rvalue(m9, "m9",
                                              index_uni(((((((((((((((((((z10_val
                                                                    - 1) *
                                                                    32768) +
                                                                    ((z11 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                   +
                                                                   ((z17 - 1)
                                                                    * 256)) +
                                                                  ((z18 - 1)
                                                                    * 128)) +
                                                                 ((z19 - 1) *
                                                                   64)) +
                                                                ((z20 - 1) *
                                                                  32)) +
                                                               ((z21 - 1) *
                                                                 16)) +
                                                              ((z22 - 1) * 8))
                                                             +
                                                             ((z23 - 1) * 4))
                                                            +
                                                            ((z24 - 1) * 2))
                                                           + ((z25 - 1) * 1))
                                                          + 1)))),
                                          "assigning variable acc0", 
                                          index_uni(z10_val));
                                      }
                                      current_statement__ = 520;
                                      assign(m10,
                                        (rvalue(m10, "m10",
                                           index_uni((((((((((((((((((z11 -
                                                                    1) *
                                                                    16384) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                   ((z14 - 1)
                                                                    * 2048))
                                                                  +
                                                                  ((z15 - 1)
                                                                    * 1024))
                                                                 +
                                                                 ((z16 - 1) *
                                                                   512)) +
                                                                ((z17 - 1) *
                                                                  256)) +
                                                               ((z18 - 1) *
                                                                 128)) +
                                                              ((z19 - 1) *
                                                                64)) +
                                                             ((z20 - 1) * 32))
                                                            +
                                                            ((z21 - 1) * 16))
                                                           + ((z22 - 1) * 8))
                                                          + ((z23 - 1) * 4))
                                                         + ((z24 - 1) * 2)) +
                                                        ((z25 - 1) * 1)) + 1)))
                                          + log_sum_exp(acc0)),
                                        "assigning variable m10", index_uni(
                                                                    (((((((((((((((((z11
                                                                    - 1) *
                                                                    16384) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 2))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 1))
                                                                    + 1)));
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 552;
      assign(m11, rep_array(0, 16384), "assigning variable m11");
      current_statement__ = 587;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 585;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 583;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 581;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 579;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 577;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 575;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 573;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 571;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        current_statement__ = 569;
                        for (int z16 = 1; z16 <= 2; ++z16) {
                          current_statement__ = 567;
                          for (int z15 = 1; z15 <= 2; ++z15) {
                            current_statement__ = 565;
                            for (int z14 = 1; z14 <= 2; ++z14) {
                              current_statement__ = 563;
                              for (int z13 = 1; z13 <= 2; ++z13) {
                                current_statement__ = 561;
                                for (int z12 = 1; z12 <= 2; ++z12) {
                                  {
                                    Eigen::Matrix<double, -1, 1> acc0;
                                    acc0 = Eigen::Matrix<double, -1, 1>(2);
                                    stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                    
                                    
                                    current_statement__ = 554;
                                    assign(acc0, rep_vector(0, 2),
                                      "assigning variable acc0");
                                    current_statement__ = 557;
                                    for (int z11_val = 1; z11_val <= 2;
                                         ++z11_val) {
                                      current_statement__ = 555;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z11_val)) +
                                          rvalue(m10, "m10",
                                            index_uni((((((((((((((((((z11_val
                                                                    - 1) *
                                                                    16384) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                   ((z15 - 1)
                                                                    * 1024))
                                                                  +
                                                                  ((z16 - 1)
                                                                    * 512)) +
                                                                 ((z17 - 1) *
                                                                   256)) +
                                                                ((z18 - 1) *
                                                                  128)) +
                                                               ((z19 - 1) *
                                                                 64)) +
                                                              ((z20 - 1) *
                                                                32)) +
                                                             ((z21 - 1) * 16))
                                                            +
                                                            ((z22 - 1) * 8))
                                                           + ((z23 - 1) * 4))
                                                          + ((z24 - 1) * 2))
                                                         + ((z25 - 1) * 1)) +
                                                        1)))),
                                        "assigning variable acc0", index_uni(z11_val));
                                    }
                                    current_statement__ = 558;
                                    assign(m11,
                                      (rvalue(m11, "m11",
                                         index_uni(((((((((((((((((z12 - 1) *
                                                                   8192) +
                                                                  ((z13 - 1)
                                                                    * 4096))
                                                                 +
                                                                 ((z14 - 1) *
                                                                   2048)) +
                                                                ((z15 - 1) *
                                                                  1024)) +
                                                               ((z16 - 1) *
                                                                 512)) +
                                                              ((z17 - 1) *
                                                                256)) +
                                                             ((z18 - 1) *
                                                               128)) +
                                                            ((z19 - 1) * 64))
                                                           +
                                                           ((z20 - 1) * 32))
                                                          + ((z21 - 1) * 16))
                                                         + ((z22 - 1) * 8)) +
                                                        ((z23 - 1) * 4)) +
                                                       ((z24 - 1) * 2)) +
                                                      ((z25 - 1) * 1)) + 1)))
                                        + log_sum_exp(acc0)),
                                      "assigning variable m11", index_uni(
                                                                  ((((((((((((((((z12
                                                                    - 1) *
                                                                    8192) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 2))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 1))
                                                                    + 1)));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 588;
      assign(m12, rep_array(0, 8192), "assigning variable m12");
      current_statement__ = 621;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 619;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 617;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 615;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 613;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 611;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 609;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 607;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 605;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        current_statement__ = 603;
                        for (int z16 = 1; z16 <= 2; ++z16) {
                          current_statement__ = 601;
                          for (int z15 = 1; z15 <= 2; ++z15) {
                            current_statement__ = 599;
                            for (int z14 = 1; z14 <= 2; ++z14) {
                              current_statement__ = 597;
                              for (int z13 = 1; z13 <= 2; ++z13) {
                                {
                                  Eigen::Matrix<double, -1, 1> acc0;
                                  acc0 = Eigen::Matrix<double, -1, 1>(2);
                                  stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                  
                                  
                                  current_statement__ = 590;
                                  assign(acc0, rep_vector(0, 2),
                                    "assigning variable acc0");
                                  current_statement__ = 593;
                                  for (int z12_val = 1; z12_val <= 2;
                                       ++z12_val) {
                                    current_statement__ = 591;
                                    assign(acc0,
                                      (rvalue(acc0, "acc0",
                                         index_uni(z12_val)) +
                                        rvalue(m11, "m11",
                                          index_uni(((((((((((((((((z12_val -
                                                                    1) *
                                                                    8192) +
                                                                   ((z13 - 1)
                                                                    * 4096))
                                                                  +
                                                                  ((z14 - 1)
                                                                    * 2048))
                                                                 +
                                                                 ((z15 - 1) *
                                                                   1024)) +
                                                                ((z16 - 1) *
                                                                  512)) +
                                                               ((z17 - 1) *
                                                                 256)) +
                                                              ((z18 - 1) *
                                                                128)) +
                                                             ((z19 - 1) * 64))
                                                            +
                                                            ((z20 - 1) * 32))
                                                           +
                                                           ((z21 - 1) * 16))
                                                          + ((z22 - 1) * 8))
                                                         + ((z23 - 1) * 4)) +
                                                        ((z24 - 1) * 2)) +
                                                       ((z25 - 1) * 1)) + 1)))),
                                      "assigning variable acc0", index_uni(z12_val));
                                  }
                                  current_statement__ = 594;
                                  assign(m12,
                                    (rvalue(m12, "m12",
                                       index_uni((((((((((((((((z13 - 1) *
                                                                4096) +
                                                               ((z14 - 1) *
                                                                 2048)) +
                                                              ((z15 - 1) *
                                                                1024)) +
                                                             ((z16 - 1) *
                                                               512)) +
                                                            ((z17 - 1) * 256))
                                                           +
                                                           ((z18 - 1) * 128))
                                                          + ((z19 - 1) * 64))
                                                         + ((z20 - 1) * 32))
                                                        + ((z21 - 1) * 16)) +
                                                       ((z22 - 1) * 8)) +
                                                      ((z23 - 1) * 4)) +
                                                     ((z24 - 1) * 2)) +
                                                    ((z25 - 1) * 1)) + 1))) +
                                      log_sum_exp(acc0)),
                                    "assigning variable m12", index_uni(
                                                                (((((((((((((((z13
                                                                    - 1) *
                                                                    4096) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 2))
                                                                   +
                                                                   ((z25 - 1)
                                                                    * 1)) +
                                                                  1)));
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 622;
      assign(m13, rep_array(0, 4096), "assigning variable m13");
      current_statement__ = 653;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 651;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 649;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 647;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 645;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 643;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 641;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 639;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 637;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        current_statement__ = 635;
                        for (int z16 = 1; z16 <= 2; ++z16) {
                          current_statement__ = 633;
                          for (int z15 = 1; z15 <= 2; ++z15) {
                            current_statement__ = 631;
                            for (int z14 = 1; z14 <= 2; ++z14) {
                              {
                                Eigen::Matrix<double, -1, 1> acc0;
                                acc0 = Eigen::Matrix<double, -1, 1>(2);
                                stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                
                                
                                current_statement__ = 624;
                                assign(acc0, rep_vector(0, 2),
                                  "assigning variable acc0");
                                current_statement__ = 627;
                                for (int z13_val = 1; z13_val <= 2; ++z13_val) {
                                  current_statement__ = 625;
                                  assign(acc0,
                                    (rvalue(acc0, "acc0", index_uni(z13_val))
                                      +
                                      rvalue(m12, "m12",
                                        index_uni((((((((((((((((z13_val - 1)
                                                                 * 4096) +
                                                                ((z14 - 1) *
                                                                  2048)) +
                                                               ((z15 - 1) *
                                                                 1024)) +
                                                              ((z16 - 1) *
                                                                512)) +
                                                             ((z17 - 1) *
                                                               256)) +
                                                            ((z18 - 1) * 128))
                                                           +
                                                           ((z19 - 1) * 64))
                                                          + ((z20 - 1) * 32))
                                                         + ((z21 - 1) * 16))
                                                        + ((z22 - 1) * 8)) +
                                                       ((z23 - 1) * 4)) +
                                                      ((z24 - 1) * 2)) +
                                                     ((z25 - 1) * 1)) + 1)))),
                                    "assigning variable acc0", index_uni(z13_val));
                                }
                                current_statement__ = 628;
                                assign(m13,
                                  (rvalue(m13, "m13",
                                     index_uni(((((((((((((((z14 - 1) * 2048)
                                                            +
                                                            ((z15 - 1) *
                                                              1024)) +
                                                           ((z16 - 1) * 512))
                                                          +
                                                          ((z17 - 1) * 256))
                                                         + ((z18 - 1) * 128))
                                                        + ((z19 - 1) * 64)) +
                                                       ((z20 - 1) * 32)) +
                                                      ((z21 - 1) * 16)) +
                                                     ((z22 - 1) * 8)) +
                                                    ((z23 - 1) * 4)) +
                                                   ((z24 - 1) * 2)) +
                                                  ((z25 - 1) * 1)) + 1))) +
                                    log_sum_exp(acc0)),
                                  "assigning variable m13", index_uni(
                                                              ((((((((((((((z14
                                                                    - 1) *
                                                                    2048) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                   +
                                                                   ((z23 - 1)
                                                                    * 4)) +
                                                                  ((z24 - 1)
                                                                    * 2)) +
                                                                 ((z25 - 1) *
                                                                   1)) + 1)));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 654;
      assign(m14, rep_array(0, 2048), "assigning variable m14");
      current_statement__ = 683;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 681;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 679;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 677;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 675;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 673;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 671;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 669;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 667;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        current_statement__ = 665;
                        for (int z16 = 1; z16 <= 2; ++z16) {
                          current_statement__ = 663;
                          for (int z15 = 1; z15 <= 2; ++z15) {
                            {
                              Eigen::Matrix<double, -1, 1> acc0;
                              acc0 = Eigen::Matrix<double, -1, 1>(2);
                              stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                              
                              
                              current_statement__ = 656;
                              assign(acc0, rep_vector(0, 2),
                                "assigning variable acc0");
                              current_statement__ = 659;
                              for (int z14_val = 1; z14_val <= 2; ++z14_val) {
                                current_statement__ = 657;
                                assign(acc0,
                                  (rvalue(acc0, "acc0", index_uni(z14_val)) +
                                    rvalue(m13, "m13",
                                      index_uni(((((((((((((((z14_val - 1) *
                                                              2048) +
                                                             ((z15 - 1) *
                                                               1024)) +
                                                            ((z16 - 1) * 512))
                                                           +
                                                           ((z17 - 1) * 256))
                                                          +
                                                          ((z18 - 1) * 128))
                                                         + ((z19 - 1) * 64))
                                                        + ((z20 - 1) * 32)) +
                                                       ((z21 - 1) * 16)) +
                                                      ((z22 - 1) * 8)) +
                                                     ((z23 - 1) * 4)) +
                                                    ((z24 - 1) * 2)) +
                                                   ((z25 - 1) * 1)) + 1)))),
                                  "assigning variable acc0", index_uni(z14_val));
                              }
                              current_statement__ = 660;
                              assign(m14,
                                (rvalue(m14, "m14",
                                   index_uni((((((((((((((z15 - 1) * 1024) +
                                                         ((z16 - 1) * 512)) +
                                                        ((z17 - 1) * 256)) +
                                                       ((z18 - 1) * 128)) +
                                                      ((z19 - 1) * 64)) +
                                                     ((z20 - 1) * 32)) +
                                                    ((z21 - 1) * 16)) +
                                                   ((z22 - 1) * 8)) +
                                                  ((z23 - 1) * 4)) +
                                                 ((z24 - 1) * 2)) +
                                                ((z25 - 1) * 1)) + 1))) +
                                  log_sum_exp(acc0)),
                                "assigning variable m14", index_uni((((((((((((((z15
                                                                    - 1) *
                                                                    1024) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 2))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 1))
                                                                    + 1)));
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 684;
      assign(m15, rep_array(0, 1024), "assigning variable m15");
      current_statement__ = 711;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 709;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 707;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 705;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 703;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 701;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 699;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 697;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 695;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        current_statement__ = 693;
                        for (int z16 = 1; z16 <= 2; ++z16) {
                          {
                            Eigen::Matrix<double, -1, 1> acc0;
                            acc0 = Eigen::Matrix<double, -1, 1>(2);
                            stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                            
                            
                            current_statement__ = 686;
                            assign(acc0, rep_vector(0, 2),
                              "assigning variable acc0");
                            current_statement__ = 689;
                            for (int z15_val = 1; z15_val <= 2; ++z15_val) {
                              current_statement__ = 687;
                              assign(acc0,
                                (rvalue(acc0, "acc0", index_uni(z15_val)) +
                                  rvalue(m14, "m14",
                                    index_uni((((((((((((((z15_val - 1) *
                                                           1024) +
                                                          ((z16 - 1) * 512))
                                                         + ((z17 - 1) * 256))
                                                        + ((z18 - 1) * 128))
                                                       + ((z19 - 1) * 64)) +
                                                      ((z20 - 1) * 32)) +
                                                     ((z21 - 1) * 16)) +
                                                    ((z22 - 1) * 8)) +
                                                   ((z23 - 1) * 4)) +
                                                  ((z24 - 1) * 2)) +
                                                 ((z25 - 1) * 1)) + 1)))),
                                "assigning variable acc0", index_uni(z15_val));
                            }
                            current_statement__ = 690;
                            assign(m15,
                              (rvalue(m15, "m15",
                                 index_uni(((((((((((((z16 - 1) * 512) +
                                                      ((z17 - 1) * 256)) +
                                                     ((z18 - 1) * 128)) +
                                                    ((z19 - 1) * 64)) +
                                                   ((z20 - 1) * 32)) +
                                                  ((z21 - 1) * 16)) +
                                                 ((z22 - 1) * 8)) +
                                                ((z23 - 1) * 4)) +
                                               ((z24 - 1) * 2)) +
                                              ((z25 - 1) * 1)) + 1))) +
                                log_sum_exp(acc0)),
                              "assigning variable m15", index_uni(((((((((((((z16
                                                                    - 1) *
                                                                    512) +
                                                                    ((z17 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 2))
                                                                    +
                                                                    ((z25 -
                                                                    1) * 1))
                                                                    + 1)));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 712;
      assign(m16, rep_array(0, 512), "assigning variable m16");
      current_statement__ = 737;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 735;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 733;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 731;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 729;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 727;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 725;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 723;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 721;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        {
                          Eigen::Matrix<double, -1, 1> acc0;
                          acc0 = Eigen::Matrix<double, -1, 1>(2);
                          stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                          
                          
                          current_statement__ = 714;
                          assign(acc0, rep_vector(0, 2),
                            "assigning variable acc0");
                          current_statement__ = 717;
                          for (int z16_val = 1; z16_val <= 2; ++z16_val) {
                            current_statement__ = 715;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z16_val)) +
                                rvalue(m15, "m15",
                                  index_uni(((((((((((((z16_val - 1) * 512) +
                                                       ((z17 - 1) * 256)) +
                                                      ((z18 - 1) * 128)) +
                                                     ((z19 - 1) * 64)) +
                                                    ((z20 - 1) * 32)) +
                                                   ((z21 - 1) * 16)) +
                                                  ((z22 - 1) * 8)) +
                                                 ((z23 - 1) * 4)) +
                                                ((z24 - 1) * 2)) +
                                               ((z25 - 1) * 1)) + 1)))),
                              "assigning variable acc0", index_uni(z16_val));
                          }
                          current_statement__ = 718;
                          assign(m16,
                            (rvalue(m16, "m16",
                               index_uni((((((((((((z17 - 1) * 256) +
                                                   ((z18 - 1) * 128)) +
                                                  ((z19 - 1) * 64)) +
                                                 ((z20 - 1) * 32)) +
                                                ((z21 - 1) * 16)) +
                                               ((z22 - 1) * 8)) +
                                              ((z23 - 1) * 4)) +
                                             ((z24 - 1) * 2)) +
                                            ((z25 - 1) * 1)) + 1))) +
                              log_sum_exp(acc0)),
                            "assigning variable m16", index_uni((((((((((((z17
                                                                    - 1) *
                                                                    256) +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z23 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z24 -
                                                                    1) * 2))
                                                                   +
                                                                   ((z25 - 1)
                                                                    * 1)) +
                                                                  1)));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 738;
      assign(m17, rep_array(0, 256), "assigning variable m17");
      current_statement__ = 761;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 759;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 757;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 755;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 753;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 751;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 749;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 747;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      {
                        Eigen::Matrix<double, -1, 1> acc0;
                        acc0 = Eigen::Matrix<double, -1, 1>(2);
                        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                        
                        
                        current_statement__ = 740;
                        assign(acc0, rep_vector(0, 2),
                          "assigning variable acc0");
                        current_statement__ = 743;
                        for (int z17_val = 1; z17_val <= 2; ++z17_val) {
                          current_statement__ = 741;
                          assign(acc0,
                            (rvalue(acc0, "acc0", index_uni(z17_val)) +
                              rvalue(m16, "m16",
                                index_uni((((((((((((z17_val - 1) * 256) +
                                                    ((z18 - 1) * 128)) +
                                                   ((z19 - 1) * 64)) +
                                                  ((z20 - 1) * 32)) +
                                                 ((z21 - 1) * 16)) +
                                                ((z22 - 1) * 8)) +
                                               ((z23 - 1) * 4)) +
                                              ((z24 - 1) * 2)) +
                                             ((z25 - 1) * 1)) + 1)))),
                            "assigning variable acc0", index_uni(z17_val));
                        }
                        current_statement__ = 744;
                        assign(m17,
                          (rvalue(m17, "m17",
                             index_uni(((((((((((z18 - 1) * 128) +
                                                ((z19 - 1) * 64)) +
                                               ((z20 - 1) * 32)) +
                                              ((z21 - 1) * 16)) +
                                             ((z22 - 1) * 8)) +
                                            ((z23 - 1) * 4)) +
                                           ((z24 - 1) * 2)) +
                                          ((z25 - 1) * 1)) + 1))) +
                            log_sum_exp(acc0)),
                          "assigning variable m17", index_uni(((((((((((z18 -
                                                                    1) * 128)
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z21 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z22 -
                                                                    1) * 8))
                                                                   +
                                                                   ((z23 - 1)
                                                                    * 4)) +
                                                                  ((z24 - 1)
                                                                    * 2)) +
                                                                 ((z25 - 1) *
                                                                   1)) + 1)));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 762;
      assign(m18, rep_array(0, 128), "assigning variable m18");
      current_statement__ = 783;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 781;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 779;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 777;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 775;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 773;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 771;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    {
                      Eigen::Matrix<double, -1, 1> acc0;
                      acc0 = Eigen::Matrix<double, -1, 1>(2);
                      stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                      
                      
                      current_statement__ = 764;
                      assign(acc0, rep_vector(0, 2),
                        "assigning variable acc0");
                      current_statement__ = 767;
                      for (int z18_val = 1; z18_val <= 2; ++z18_val) {
                        current_statement__ = 765;
                        assign(acc0,
                          (rvalue(acc0, "acc0", index_uni(z18_val)) +
                            rvalue(m17, "m17",
                              index_uni(((((((((((z18_val - 1) * 128) +
                                                 ((z19 - 1) * 64)) +
                                                ((z20 - 1) * 32)) +
                                               ((z21 - 1) * 16)) +
                                              ((z22 - 1) * 8)) +
                                             ((z23 - 1) * 4)) +
                                            ((z24 - 1) * 2)) +
                                           ((z25 - 1) * 1)) + 1)))),
                          "assigning variable acc0", index_uni(z18_val));
                      }
                      current_statement__ = 768;
                      assign(m18,
                        (rvalue(m18, "m18",
                           index_uni((((((((((z19 - 1) * 64) +
                                             ((z20 - 1) * 32)) +
                                            ((z21 - 1) * 16)) +
                                           ((z22 - 1) * 8)) +
                                          ((z23 - 1) * 4)) + ((z24 - 1) * 2))
                                        + ((z25 - 1) * 1)) + 1))) +
                          log_sum_exp(acc0)),
                        "assigning variable m18", index_uni((((((((((z19 - 1)
                                                                    * 64) +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                   +
                                                                   ((z21 - 1)
                                                                    * 16)) +
                                                                  ((z22 - 1)
                                                                    * 8)) +
                                                                 ((z23 - 1) *
                                                                   4)) +
                                                                ((z24 - 1) *
                                                                  2)) +
                                                               ((z25 - 1) *
                                                                 1)) + 1)));
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 784;
      assign(m19, rep_array(0, 64), "assigning variable m19");
      current_statement__ = 803;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 801;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 799;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 797;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 795;
              for (int z21 = 1; z21 <= 2; ++z21) {
                current_statement__ = 793;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  {
                    Eigen::Matrix<double, -1, 1> acc0;
                    acc0 = Eigen::Matrix<double, -1, 1>(2);
                    stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                    
                    
                    current_statement__ = 786;
                    assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                    current_statement__ = 789;
                    for (int z19_val = 1; z19_val <= 2; ++z19_val) {
                      current_statement__ = 787;
                      assign(acc0,
                        (rvalue(acc0, "acc0", index_uni(z19_val)) +
                          rvalue(m18, "m18",
                            index_uni((((((((((z19_val - 1) * 64) +
                                              ((z20 - 1) * 32)) +
                                             ((z21 - 1) * 16)) +
                                            ((z22 - 1) * 8)) +
                                           ((z23 - 1) * 4)) +
                                          ((z24 - 1) * 2)) + ((z25 - 1) * 1))
                                        + 1)))),
                        "assigning variable acc0", index_uni(z19_val));
                    }
                    current_statement__ = 790;
                    assign(m19,
                      (rvalue(m19, "m19",
                         index_uni(((((((((z20 - 1) * 32) + ((z21 - 1) * 16))
                                         + ((z22 - 1) * 8)) +
                                        ((z23 - 1) * 4)) + ((z24 - 1) * 2)) +
                                      ((z25 - 1) * 1)) + 1))) +
                        log_sum_exp(acc0)),
                      "assigning variable m19", index_uni(((((((((z20 - 1) *
                                                                  32) +
                                                                 ((z21 - 1) *
                                                                   16)) +
                                                                ((z22 - 1) *
                                                                  8)) +
                                                               ((z23 - 1) *
                                                                 4)) +
                                                              ((z24 - 1) * 2))
                                                             +
                                                             ((z25 - 1) * 1))
                                                            + 1)));
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 804;
      assign(m20, rep_array(0, 32), "assigning variable m20");
      current_statement__ = 821;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 819;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 817;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 815;
            for (int z22 = 1; z22 <= 2; ++z22) {
              current_statement__ = 813;
              for (int z21 = 1; z21 <= 2; ++z21) {
                {
                  Eigen::Matrix<double, -1, 1> acc0;
                  acc0 = Eigen::Matrix<double, -1, 1>(2);
                  stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                  
                  
                  current_statement__ = 806;
                  assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                  current_statement__ = 809;
                  for (int z20_val = 1; z20_val <= 2; ++z20_val) {
                    current_statement__ = 807;
                    assign(acc0,
                      (rvalue(acc0, "acc0", index_uni(z20_val)) +
                        rvalue(m19, "m19",
                          index_uni(((((((((z20_val - 1) * 32) +
                                           ((z21 - 1) * 16)) +
                                          ((z22 - 1) * 8)) + ((z23 - 1) * 4))
                                        + ((z24 - 1) * 2)) + ((z25 - 1) * 1))
                                      + 1)))),
                      "assigning variable acc0", index_uni(z20_val));
                  }
                  current_statement__ = 810;
                  assign(m20,
                    (rvalue(m20, "m20",
                       index_uni((((((((z21 - 1) * 16) + ((z22 - 1) * 8)) +
                                      ((z23 - 1) * 4)) + ((z24 - 1) * 2)) +
                                    ((z25 - 1) * 1)) + 1))) +
                      log_sum_exp(acc0)),
                    "assigning variable m20", index_uni((((((((z21 - 1) * 16)
                                                              +
                                                              ((z22 - 1) * 8))
                                                             +
                                                             ((z23 - 1) * 4))
                                                            +
                                                            ((z24 - 1) * 2))
                                                           + ((z25 - 1) * 1))
                                                          + 1)));
                }
              }
            }
          }
        }
      }
      current_statement__ = 822;
      assign(m21, rep_array(0, 16), "assigning variable m21");
      current_statement__ = 837;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 835;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 833;
          for (int z23 = 1; z23 <= 2; ++z23) {
            current_statement__ = 831;
            for (int z22 = 1; z22 <= 2; ++z22) {
              {
                Eigen::Matrix<double, -1, 1> acc0;
                acc0 = Eigen::Matrix<double, -1, 1>(2);
                stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                
                
                current_statement__ = 824;
                assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                current_statement__ = 827;
                for (int z21_val = 1; z21_val <= 2; ++z21_val) {
                  current_statement__ = 825;
                  assign(acc0,
                    (rvalue(acc0, "acc0", index_uni(z21_val)) +
                      rvalue(m20, "m20",
                        index_uni((((((((z21_val - 1) * 16) +
                                        ((z22 - 1) * 8)) + ((z23 - 1) * 4)) +
                                      ((z24 - 1) * 2)) + ((z25 - 1) * 1)) +
                                    1)))),
                    "assigning variable acc0", index_uni(z21_val));
                }
                current_statement__ = 828;
                assign(m21,
                  (rvalue(m21, "m21",
                     index_uni(((((((z22 - 1) * 8) + ((z23 - 1) * 4)) +
                                   ((z24 - 1) * 2)) + ((z25 - 1) * 1)) + 1)))
                    + log_sum_exp(acc0)),
                  "assigning variable m21", index_uni(((((((z22 - 1) * 8) +
                                                           ((z23 - 1) * 4)) +
                                                          ((z24 - 1) * 2)) +
                                                         ((z25 - 1) * 1)) +
                                                        1)));
              }
            }
          }
        }
      }
      current_statement__ = 838;
      assign(m22, rep_array(0, 8), "assigning variable m22");
      current_statement__ = 851;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 849;
        for (int z24 = 1; z24 <= 2; ++z24) {
          current_statement__ = 847;
          for (int z23 = 1; z23 <= 2; ++z23) {
            {
              Eigen::Matrix<double, -1, 1> acc0;
              acc0 = Eigen::Matrix<double, -1, 1>(2);
              stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
              
              
              current_statement__ = 840;
              assign(acc0, rep_vector(0, 2), "assigning variable acc0");
              current_statement__ = 843;
              for (int z22_val = 1; z22_val <= 2; ++z22_val) {
                current_statement__ = 841;
                assign(acc0,
                  (rvalue(acc0, "acc0", index_uni(z22_val)) +
                    rvalue(m21, "m21",
                      index_uni(((((((z22_val - 1) * 8) + ((z23 - 1) * 4)) +
                                    ((z24 - 1) * 2)) + ((z25 - 1) * 1)) + 1)))),
                  "assigning variable acc0", index_uni(z22_val));
              }
              current_statement__ = 844;
              assign(m22,
                (rvalue(m22, "m22",
                   index_uni((((((z23 - 1) * 4) + ((z24 - 1) * 2)) +
                                ((z25 - 1) * 1)) + 1))) + log_sum_exp(acc0)),
                "assigning variable m22", index_uni((((((z23 - 1) * 4) +
                                                        ((z24 - 1) * 2)) +
                                                       ((z25 - 1) * 1)) + 1)));
            }
          }
        }
      }
      current_statement__ = 852;
      assign(m23, rep_array(0, 4), "assigning variable m23");
      current_statement__ = 863;
      for (int z25 = 1; z25 <= 2; ++z25) {
        current_statement__ = 861;
        for (int z24 = 1; z24 <= 2; ++z24) {
          {
            Eigen::Matrix<double, -1, 1> acc0;
            acc0 = Eigen::Matrix<double, -1, 1>(2);
            stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
            
            current_statement__ = 854;
            assign(acc0, rep_vector(0, 2), "assigning variable acc0");
            current_statement__ = 857;
            for (int z23_val = 1; z23_val <= 2; ++z23_val) {
              current_statement__ = 855;
              assign(acc0,
                (rvalue(acc0, "acc0", index_uni(z23_val)) +
                  rvalue(m22, "m22",
                    index_uni((((((z23_val - 1) * 4) + ((z24 - 1) * 2)) +
                                 ((z25 - 1) * 1)) + 1)))),
                "assigning variable acc0", index_uni(z23_val));
            }
            current_statement__ = 858;
            assign(m23,
              (rvalue(m23, "m23",
                 index_uni(((((z24 - 1) * 2) + ((z25 - 1) * 1)) + 1))) +
                log_sum_exp(acc0)),
              "assigning variable m23", index_uni(((((z24 - 1) * 2) +
                                                     ((z25 - 1) * 1)) + 1)));
          }
        }
      }
      current_statement__ = 864;
      assign(m24, rep_array(0, 2), "assigning variable m24");
      current_statement__ = 873;
      for (int z25 = 1; z25 <= 2; ++z25) {
        {
          Eigen::Matrix<double, -1, 1> acc0;
          acc0 = Eigen::Matrix<double, -1, 1>(2);
          stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 866;
          assign(acc0, rep_vector(0, 2), "assigning variable acc0");
          current_statement__ = 869;
          for (int z24_val = 1; z24_val <= 2; ++z24_val) {
            current_statement__ = 867;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z24_val)) +
                rvalue(m23, "m23",
                  index_uni(((((z24_val - 1) * 2) + ((z25 - 1) * 1)) + 1)))),
              "assigning variable acc0", index_uni(z24_val));
          }
          current_statement__ = 870;
          assign(m24,
            (rvalue(m24, "m24", index_uni(z25)) + log_sum_exp(acc0)),
            "assigning variable m24", index_uni(z25));
        }
      }
      current_statement__ = 874;
      m25 = 0;
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 876;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 879;
        for (int z25_val = 1; z25_val <= 2; ++z25_val) {
          current_statement__ = 877;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z25_val)) +
              rvalue(m24, "m24", index_uni((((z25_val - 1) * 1) + 1)))),
            "assigning variable acc0", index_uni(z25_val));
        }
        current_statement__ = 880;
        m25 = (m25 + log_sum_exp(acc0));
      }
      if (emit_transformed_parameters__) {
        out__.write(m1);
        out__.write(m10);
        out__.write(m11);
        out__.write(m12);
        out__.write(m13);
        out__.write(m14);
        out__.write(m15);
        out__.write(m16);
        out__.write(m17);
        out__.write(m18);
        out__.write(m19);
        out__.write(m2);
        out__.write(m20);
        out__.write(m21);
        out__.write(m22);
        out__.write(m23);
        out__.write(m24);
        out__.write(m25);
        out__.write(m3);
        out__.write(m4);
        out__.write(m5);
        out__.write(m6);
        out__.write(m7);
        out__.write(m8);
        out__.write(m9);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      int z1;
      z1 = std::numeric_limits<int>::min();
      
      int z10;
      z10 = std::numeric_limits<int>::min();
      
      int z11;
      z11 = std::numeric_limits<int>::min();
      
      int z12;
      z12 = std::numeric_limits<int>::min();
      
      int z13;
      z13 = std::numeric_limits<int>::min();
      
      int z14;
      z14 = std::numeric_limits<int>::min();
      
      int z15;
      z15 = std::numeric_limits<int>::min();
      
      int z16;
      z16 = std::numeric_limits<int>::min();
      
      int z17;
      z17 = std::numeric_limits<int>::min();
      
      int z18;
      z18 = std::numeric_limits<int>::min();
      
      int z19;
      z19 = std::numeric_limits<int>::min();
      
      int z2;
      z2 = std::numeric_limits<int>::min();
      
      int z20;
      z20 = std::numeric_limits<int>::min();
      
      int z21;
      z21 = std::numeric_limits<int>::min();
      
      int z22;
      z22 = std::numeric_limits<int>::min();
      
      int z23;
      z23 = std::numeric_limits<int>::min();
      
      int z24;
      z24 = std::numeric_limits<int>::min();
      
      int z25;
      z25 = std::numeric_limits<int>::min();
      
      int z3;
      z3 = std::numeric_limits<int>::min();
      
      int z4;
      z4 = std::numeric_limits<int>::min();
      
      int z5;
      z5 = std::numeric_limits<int>::min();
      
      int z6;
      z6 = std::numeric_limits<int>::min();
      
      int z7;
      z7 = std::numeric_limits<int>::min();
      
      int z8;
      z8 = std::numeric_limits<int>::min();
      
      int z9;
      z9 = std::numeric_limits<int>::min();
      
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 908;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 911;
        for (int z25_val = 1; z25_val <= 2; ++z25_val) {
          current_statement__ = 909;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z25_val)) +
              rvalue(m24, "m24", index_uni((((z25_val - 1) * 1) + 1)))),
            "assigning variable acc0", index_uni(z25_val));
        }
        current_statement__ = 912;
        z25 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 915;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 918;
        for (int z24_val = 1; z24_val <= 2; ++z24_val) {
          current_statement__ = 916;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z24_val)) +
              rvalue(m23, "m23",
                index_uni(((((z24_val - 1) * 2) + ((z25 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z24_val));
        }
        current_statement__ = 919;
        z24 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 922;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 925;
        for (int z23_val = 1; z23_val <= 2; ++z23_val) {
          current_statement__ = 923;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z23_val)) +
              rvalue(m22, "m22",
                index_uni((((((z23_val - 1) * 4) + ((z24 - 1) * 2)) +
                             ((z25 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z23_val));
        }
        current_statement__ = 926;
        z23 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 929;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 932;
        for (int z22_val = 1; z22_val <= 2; ++z22_val) {
          current_statement__ = 930;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z22_val)) +
              rvalue(m21, "m21",
                index_uni(((((((z22_val - 1) * 8) + ((z23 - 1) * 4)) +
                              ((z24 - 1) * 2)) + ((z25 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z22_val));
        }
        current_statement__ = 933;
        z22 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 936;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 939;
        for (int z21_val = 1; z21_val <= 2; ++z21_val) {
          current_statement__ = 937;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z21_val)) +
              rvalue(m20, "m20",
                index_uni((((((((z21_val - 1) * 16) + ((z22 - 1) * 8)) +
                               ((z23 - 1) * 4)) + ((z24 - 1) * 2)) +
                             ((z25 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z21_val));
        }
        current_statement__ = 940;
        z21 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 943;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 946;
        for (int z20_val = 1; z20_val <= 2; ++z20_val) {
          current_statement__ = 944;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z20_val)) +
              rvalue(m19, "m19",
                index_uni(((((((((z20_val - 1) * 32) + ((z21 - 1) * 16)) +
                                ((z22 - 1) * 8)) + ((z23 - 1) * 4)) +
                              ((z24 - 1) * 2)) + ((z25 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z20_val));
        }
        current_statement__ = 947;
        z20 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 950;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 953;
        for (int z19_val = 1; z19_val <= 2; ++z19_val) {
          current_statement__ = 951;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z19_val)) +
              rvalue(m18, "m18",
                index_uni((((((((((z19_val - 1) * 64) + ((z20 - 1) * 32)) +
                                 ((z21 - 1) * 16)) + ((z22 - 1) * 8)) +
                               ((z23 - 1) * 4)) + ((z24 - 1) * 2)) +
                             ((z25 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z19_val));
        }
        current_statement__ = 954;
        z19 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 957;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 960;
        for (int z18_val = 1; z18_val <= 2; ++z18_val) {
          current_statement__ = 958;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z18_val)) +
              rvalue(m17, "m17",
                index_uni(((((((((((z18_val - 1) * 128) + ((z19 - 1) * 64)) +
                                  ((z20 - 1) * 32)) + ((z21 - 1) * 16)) +
                                ((z22 - 1) * 8)) + ((z23 - 1) * 4)) +
                              ((z24 - 1) * 2)) + ((z25 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z18_val));
        }
        current_statement__ = 961;
        z18 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 964;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 967;
        for (int z17_val = 1; z17_val <= 2; ++z17_val) {
          current_statement__ = 965;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z17_val)) +
              rvalue(m16, "m16",
                index_uni((((((((((((z17_val - 1) * 256) + ((z18 - 1) * 128))
                                   + ((z19 - 1) * 64)) + ((z20 - 1) * 32)) +
                                 ((z21 - 1) * 16)) + ((z22 - 1) * 8)) +
                               ((z23 - 1) * 4)) + ((z24 - 1) * 2)) +
                             ((z25 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z17_val));
        }
        current_statement__ = 968;
        z17 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 971;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 974;
        for (int z16_val = 1; z16_val <= 2; ++z16_val) {
          current_statement__ = 972;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z16_val)) +
              rvalue(m15, "m15",
                index_uni(((((((((((((z16_val - 1) * 512) +
                                     ((z17 - 1) * 256)) + ((z18 - 1) * 128))
                                   + ((z19 - 1) * 64)) + ((z20 - 1) * 32)) +
                                 ((z21 - 1) * 16)) + ((z22 - 1) * 8)) +
                               ((z23 - 1) * 4)) + ((z24 - 1) * 2)) +
                             ((z25 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z16_val));
        }
        current_statement__ = 975;
        z16 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 978;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 981;
        for (int z15_val = 1; z15_val <= 2; ++z15_val) {
          current_statement__ = 979;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z15_val)) +
              rvalue(m14, "m14",
                index_uni((((((((((((((z15_val - 1) * 1024) +
                                      ((z16 - 1) * 512)) + ((z17 - 1) * 256))
                                    + ((z18 - 1) * 128)) + ((z19 - 1) * 64))
                                  + ((z20 - 1) * 32)) + ((z21 - 1) * 16)) +
                                ((z22 - 1) * 8)) + ((z23 - 1) * 4)) +
                              ((z24 - 1) * 2)) + ((z25 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z15_val));
        }
        current_statement__ = 982;
        z15 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 985;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 988;
        for (int z14_val = 1; z14_val <= 2; ++z14_val) {
          current_statement__ = 986;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z14_val)) +
              rvalue(m13, "m13",
                index_uni(((((((((((((((z14_val - 1) * 2048) +
                                       ((z15 - 1) * 1024)) +
                                      ((z16 - 1) * 512)) + ((z17 - 1) * 256))
                                    + ((z18 - 1) * 128)) + ((z19 - 1) * 64))
                                  + ((z20 - 1) * 32)) + ((z21 - 1) * 16)) +
                                ((z22 - 1) * 8)) + ((z23 - 1) * 4)) +
                              ((z24 - 1) * 2)) + ((z25 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z14_val));
        }
        current_statement__ = 989;
        z14 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 992;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 995;
        for (int z13_val = 1; z13_val <= 2; ++z13_val) {
          current_statement__ = 993;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z13_val)) +
              rvalue(m12, "m12",
                index_uni((((((((((((((((z13_val - 1) * 4096) +
                                        ((z14 - 1) * 2048)) +
                                       ((z15 - 1) * 1024)) +
                                      ((z16 - 1) * 512)) + ((z17 - 1) * 256))
                                    + ((z18 - 1) * 128)) + ((z19 - 1) * 64))
                                  + ((z20 - 1) * 32)) + ((z21 - 1) * 16)) +
                                ((z22 - 1) * 8)) + ((z23 - 1) * 4)) +
                              ((z24 - 1) * 2)) + ((z25 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z13_val));
        }
        current_statement__ = 996;
        z13 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 999;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 1002;
        for (int z12_val = 1; z12_val <= 2; ++z12_val) {
          current_statement__ = 1000;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z12_val)) +
              rvalue(m11, "m11",
                index_uni(((((((((((((((((z12_val - 1) * 8192) +
                                         ((z13 - 1) * 4096)) +
                                        ((z14 - 1) * 2048)) +
                                       ((z15 - 1) * 1024)) +
                                      ((z16 - 1) * 512)) + ((z17 - 1) * 256))
                                    + ((z18 - 1) * 128)) + ((z19 - 1) * 64))
                                  + ((z20 - 1) * 32)) + ((z21 - 1) * 16)) +
                                ((z22 - 1) * 8)) + ((z23 - 1) * 4)) +
                              ((z24 - 1) * 2)) + ((z25 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z12_val));
        }
        current_statement__ = 1003;
        z12 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 1006;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 1009;
        for (int z11_val = 1; z11_val <= 2; ++z11_val) {
          current_statement__ = 1007;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z11_val)) +
              rvalue(m10, "m10",
                index_uni((((((((((((((((((z11_val - 1) * 16384) +
                                          ((z12 - 1) * 8192)) +
                                         ((z13 - 1) * 4096)) +
                                        ((z14 - 1) * 2048)) +
                                       ((z15 - 1) * 1024)) +
                                      ((z16 - 1) * 512)) + ((z17 - 1) * 256))
                                    + ((z18 - 1) * 128)) + ((z19 - 1) * 64))
                                  + ((z20 - 1) * 32)) + ((z21 - 1) * 16)) +
                                ((z22 - 1) * 8)) + ((z23 - 1) * 4)) +
                              ((z24 - 1) * 2)) + ((z25 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z11_val));
        }
        current_statement__ = 1010;
        z11 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 1013;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 1016;
        for (int z10_val = 1; z10_val <= 2; ++z10_val) {
          current_statement__ = 1014;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z10_val)) +
              rvalue(m9, "m9",
                index_uni(((((((((((((((((((z10_val - 1) * 32768) +
                                           ((z11 - 1) * 16384)) +
                                          ((z12 - 1) * 8192)) +
                                         ((z13 - 1) * 4096)) +
                                        ((z14 - 1) * 2048)) +
                                       ((z15 - 1) * 1024)) +
                                      ((z16 - 1) * 512)) + ((z17 - 1) * 256))
                                    + ((z18 - 1) * 128)) + ((z19 - 1) * 64))
                                  + ((z20 - 1) * 32)) + ((z21 - 1) * 16)) +
                                ((z22 - 1) * 8)) + ((z23 - 1) * 4)) +
                              ((z24 - 1) * 2)) + ((z25 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z10_val));
        }
        current_statement__ = 1017;
        z10 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 1020;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 1023;
        for (int z9_val = 1; z9_val <= 2; ++z9_val) {
          current_statement__ = 1021;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z9_val)) +
              rvalue(m8, "m8",
                index_uni((((((((((((((((((((z10 - 1) * 65536) +
                                            ((z11 - 1) * 32768)) +
                                           ((z12 - 1) * 16384)) +
                                          ((z13 - 1) * 8192)) +
                                         ((z14 - 1) * 4096)) +
                                        ((z15 - 1) * 2048)) +
                                       ((z16 - 1) * 1024)) +
                                      ((z17 - 1) * 512)) + ((z18 - 1) * 256))
                                    + ((z19 - 1) * 128)) + ((z20 - 1) * 64))
                                  + ((z21 - 1) * 32)) + ((z22 - 1) * 16)) +
                                ((z23 - 1) * 8)) + ((z24 - 1) * 4)) +
                              ((z25 - 1) * 2)) + ((z9_val - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z9_val));
        }
        current_statement__ = 1024;
        z9 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 1027;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 1030;
        for (int z8_val = 1; z8_val <= 2; ++z8_val) {
          current_statement__ = 1028;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z8_val)) +
              rvalue(m7, "m7",
                index_uni(((((((((((((((((((((z10 - 1) * 131072) +
                                             ((z11 - 1) * 65536)) +
                                            ((z12 - 1) * 32768)) +
                                           ((z13 - 1) * 16384)) +
                                          ((z14 - 1) * 8192)) +
                                         ((z15 - 1) * 4096)) +
                                        ((z16 - 1) * 2048)) +
                                       ((z17 - 1) * 1024)) +
                                      ((z18 - 1) * 512)) + ((z19 - 1) * 256))
                                    + ((z20 - 1) * 128)) + ((z21 - 1) * 64))
                                  + ((z22 - 1) * 32)) + ((z23 - 1) * 16)) +
                                ((z24 - 1) * 8)) + ((z25 - 1) * 4)) +
                              ((z8_val - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z8_val));
        }
        current_statement__ = 1031;
        z8 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 1034;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 1037;
        for (int z7_val = 1; z7_val <= 2; ++z7_val) {
          current_statement__ = 1035;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z7_val)) +
              rvalue(m6, "m6",
                index_uni((((((((((((((((((((((z10 - 1) * 262144) +
                                              ((z11 - 1) * 131072)) +
                                             ((z12 - 1) * 65536)) +
                                            ((z13 - 1) * 32768)) +
                                           ((z14 - 1) * 16384)) +
                                          ((z15 - 1) * 8192)) +
                                         ((z16 - 1) * 4096)) +
                                        ((z17 - 1) * 2048)) +
                                       ((z18 - 1) * 1024)) +
                                      ((z19 - 1) * 512)) + ((z20 - 1) * 256))
                                    + ((z21 - 1) * 128)) + ((z22 - 1) * 64))
                                  + ((z23 - 1) * 32)) + ((z24 - 1) * 16)) +
                                ((z25 - 1) * 8)) + ((z7_val - 1) * 4)) +
                              ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z7_val));
        }
        current_statement__ = 1038;
        z7 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 1041;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 1044;
        for (int z6_val = 1; z6_val <= 2; ++z6_val) {
          current_statement__ = 1042;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z6_val)) +
              rvalue(m5, "m5",
                index_uni(((((((((((((((((((((((z10 - 1) * 524288) +
                                               ((z11 - 1) * 262144)) +
                                              ((z12 - 1) * 131072)) +
                                             ((z13 - 1) * 65536)) +
                                            ((z14 - 1) * 32768)) +
                                           ((z15 - 1) * 16384)) +
                                          ((z16 - 1) * 8192)) +
                                         ((z17 - 1) * 4096)) +
                                        ((z18 - 1) * 2048)) +
                                       ((z19 - 1) * 1024)) +
                                      ((z20 - 1) * 512)) + ((z21 - 1) * 256))
                                    + ((z22 - 1) * 128)) + ((z23 - 1) * 64))
                                  + ((z24 - 1) * 32)) + ((z25 - 1) * 16)) +
                                ((z6_val - 1) * 8)) + ((z7 - 1) * 4)) +
                              ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z6_val));
        }
        current_statement__ = 1045;
        z6 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 1048;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 1051;
        for (int z5_val = 1; z5_val <= 2; ++z5_val) {
          current_statement__ = 1049;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z5_val)) +
              rvalue(m4, "m4",
                index_uni((((((((((((((((((((((((z10 - 1) * 1048576) +
                                                ((z11 - 1) * 524288)) +
                                               ((z12 - 1) * 262144)) +
                                              ((z13 - 1) * 131072)) +
                                             ((z14 - 1) * 65536)) +
                                            ((z15 - 1) * 32768)) +
                                           ((z16 - 1) * 16384)) +
                                          ((z17 - 1) * 8192)) +
                                         ((z18 - 1) * 4096)) +
                                        ((z19 - 1) * 2048)) +
                                       ((z20 - 1) * 1024)) +
                                      ((z21 - 1) * 512)) + ((z22 - 1) * 256))
                                    + ((z23 - 1) * 128)) + ((z24 - 1) * 64))
                                  + ((z25 - 1) * 32)) + ((z5_val - 1) * 16))
                                + ((z6 - 1) * 8)) + ((z7 - 1) * 4)) +
                              ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z5_val));
        }
        current_statement__ = 1052;
        z5 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 1055;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 1058;
        for (int z4_val = 1; z4_val <= 2; ++z4_val) {
          current_statement__ = 1056;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z4_val)) +
              rvalue(m3, "m3",
                index_uni(((((((((((((((((((((((((z10 - 1) * 2097152) +
                                                 ((z11 - 1) * 1048576)) +
                                                ((z12 - 1) * 524288)) +
                                               ((z13 - 1) * 262144)) +
                                              ((z14 - 1) * 131072)) +
                                             ((z15 - 1) * 65536)) +
                                            ((z16 - 1) * 32768)) +
                                           ((z17 - 1) * 16384)) +
                                          ((z18 - 1) * 8192)) +
                                         ((z19 - 1) * 4096)) +
                                        ((z20 - 1) * 2048)) +
                                       ((z21 - 1) * 1024)) +
                                      ((z22 - 1) * 512)) + ((z23 - 1) * 256))
                                    + ((z24 - 1) * 128)) + ((z25 - 1) * 64))
                                  + ((z4_val - 1) * 32)) + ((z5 - 1) * 16)) +
                                ((z6 - 1) * 8)) + ((z7 - 1) * 4)) +
                              ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z4_val));
        }
        current_statement__ = 1059;
        z4 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 1062;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 1065;
        for (int z3_val = 1; z3_val <= 2; ++z3_val) {
          current_statement__ = 1063;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z3_val)) +
              rvalue(m2, "m2",
                index_uni((((((((((((((((((((((((((z10 - 1) * 4194304) +
                                                  ((z11 - 1) * 2097152)) +
                                                 ((z12 - 1) * 1048576)) +
                                                ((z13 - 1) * 524288)) +
                                               ((z14 - 1) * 262144)) +
                                              ((z15 - 1) * 131072)) +
                                             ((z16 - 1) * 65536)) +
                                            ((z17 - 1) * 32768)) +
                                           ((z18 - 1) * 16384)) +
                                          ((z19 - 1) * 8192)) +
                                         ((z20 - 1) * 4096)) +
                                        ((z21 - 1) * 2048)) +
                                       ((z22 - 1) * 1024)) +
                                      ((z23 - 1) * 512)) + ((z24 - 1) * 256))
                                    + ((z25 - 1) * 128)) +
                                   ((z3_val - 1) * 64)) + ((z4 - 1) * 32)) +
                                 ((z5 - 1) * 16)) + ((z6 - 1) * 8)) +
                               ((z7 - 1) * 4)) + ((z8 - 1) * 2)) +
                             ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z3_val));
        }
        current_statement__ = 1066;
        z3 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 1069;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 1072;
        for (int z2_val = 1; z2_val <= 2; ++z2_val) {
          current_statement__ = 1070;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z2_val)) +
              rvalue(m1, "m1",
                index_uni(((((((((((((((((((((((((((z10 - 1) * 8388608) +
                                                   ((z11 - 1) * 4194304)) +
                                                  ((z12 - 1) * 2097152)) +
                                                 ((z13 - 1) * 1048576)) +
                                                ((z14 - 1) * 524288)) +
                                               ((z15 - 1) * 262144)) +
                                              ((z16 - 1) * 131072)) +
                                             ((z17 - 1) * 65536)) +
                                            ((z18 - 1) * 32768)) +
                                           ((z19 - 1) * 16384)) +
                                          ((z2_val - 1) * 8192)) +
                                         ((z20 - 1) * 4096)) +
                                        ((z21 - 1) * 2048)) +
                                       ((z22 - 1) * 1024)) +
                                      ((z23 - 1) * 512)) + ((z24 - 1) * 256))
                                    + ((z25 - 1) * 128)) + ((z3 - 1) * 64)) +
                                  ((z4 - 1) * 32)) + ((z5 - 1) * 16)) +
                                ((z6 - 1) * 8)) + ((z7 - 1) * 4)) +
                              ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z2_val));
        }
        current_statement__ = 1073;
        z2 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 1076;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 1110;
        for (int z1_val = 1; z1_val <= 2; ++z1_val) {
          current_statement__ = 1077;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z1_val - 1), prior1)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1078;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z2 - 1), prior2)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1079;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z3 - 1), prior3)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1080;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z4 - 1), prior4)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1081;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z5 - 1), prior5)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1082;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z6 - 1), prior6)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1083;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z7 - 1), prior7)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1084;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z8 - 1), prior8)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1085;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z9 - 1), prior9)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1086;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z10 - 1), prior10)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1087;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z11 - 1), prior11)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1088;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z12 - 1), prior12)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1089;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z13 - 1), prior13)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1090;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z14 - 1), prior14)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1091;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z15 - 1), prior15)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1092;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z16 - 1), prior16)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1093;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z17 - 1), prior17)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1094;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z18 - 1), prior18)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1095;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z19 - 1), prior19)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1096;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z20 - 1), prior20)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1097;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z21 - 1), prior21)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1098;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z22 - 1), prior22)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1099;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z23 - 1), prior23)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1100;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z24 - 1), prior24)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1101;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z25 - 1), prior25)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 1108;
          if (logical_gt(
                (((((((((((((((((((((((((z1_val + z2) + z3) + z4) + z5) + z6)
                                     + z7) + z8) + z9) + z10) + z11) + z12) +
                               z13) + z14) + z15) + z16) + z17) + z18) + z19)
                        + z20) + z21) + z22) + z23) + z24) + z25) - 25), 0)) {
            current_statement__ = 1105;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d1, 135, 8)),
              "assigning variable acc0", index_uni(z1_val));
            current_statement__ = 1106;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d2, 135, 8)),
              "assigning variable acc0", index_uni(z1_val));
          } else {
            current_statement__ = 1102;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d1, 80, 8)),
              "assigning variable acc0", index_uni(z1_val));
            current_statement__ = 1103;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d2, 80, 8)),
              "assigning variable acc0", index_uni(z1_val));
          }
        }
        current_statement__ = 1111;
        z1 = categorical_logit_rng(acc0, base_rng__);
      }
      out__.write(z1);
      out__.write(z10);
      out__.write(z11);
      out__.write(z12);
      out__.write(z13);
      out__.write(z14);
      out__.write(z15);
      out__.write(z16);
      out__.write(z17);
      out__.write(z18);
      out__.write(z19);
      out__.write(z2);
      out__.write(z20);
      out__.write(z21);
      out__.write(z22);
      out__.write(z23);
      out__.write(z24);
      out__.write(z25);
      out__.write(z3);
      out__.write(z4);
      out__.write(z5);
      out__.write(z6);
      out__.write(z7);
      out__.write(z8);
      out__.write(z9);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      local_scalar_t__ prior1;
      prior1 = DUMMY_VAR__;
      
      prior1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior1);
      local_scalar_t__ prior10;
      prior10 = DUMMY_VAR__;
      
      prior10 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior10);
      local_scalar_t__ prior11;
      prior11 = DUMMY_VAR__;
      
      prior11 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior11);
      local_scalar_t__ prior12;
      prior12 = DUMMY_VAR__;
      
      prior12 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior12);
      local_scalar_t__ prior13;
      prior13 = DUMMY_VAR__;
      
      prior13 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior13);
      local_scalar_t__ prior14;
      prior14 = DUMMY_VAR__;
      
      prior14 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior14);
      local_scalar_t__ prior15;
      prior15 = DUMMY_VAR__;
      
      prior15 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior15);
      local_scalar_t__ prior16;
      prior16 = DUMMY_VAR__;
      
      prior16 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior16);
      local_scalar_t__ prior17;
      prior17 = DUMMY_VAR__;
      
      prior17 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior17);
      local_scalar_t__ prior18;
      prior18 = DUMMY_VAR__;
      
      prior18 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior18);
      local_scalar_t__ prior19;
      prior19 = DUMMY_VAR__;
      
      prior19 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior19);
      local_scalar_t__ prior2;
      prior2 = DUMMY_VAR__;
      
      prior2 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior2);
      local_scalar_t__ prior20;
      prior20 = DUMMY_VAR__;
      
      prior20 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior20);
      local_scalar_t__ prior21;
      prior21 = DUMMY_VAR__;
      
      prior21 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior21);
      local_scalar_t__ prior22;
      prior22 = DUMMY_VAR__;
      
      prior22 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior22);
      local_scalar_t__ prior23;
      prior23 = DUMMY_VAR__;
      
      prior23 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior23);
      local_scalar_t__ prior24;
      prior24 = DUMMY_VAR__;
      
      prior24 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior24);
      local_scalar_t__ prior25;
      prior25 = DUMMY_VAR__;
      
      prior25 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior25);
      local_scalar_t__ prior3;
      prior3 = DUMMY_VAR__;
      
      prior3 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior3);
      local_scalar_t__ prior4;
      prior4 = DUMMY_VAR__;
      
      prior4 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior4);
      local_scalar_t__ prior5;
      prior5 = DUMMY_VAR__;
      
      prior5 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior5);
      local_scalar_t__ prior6;
      prior6 = DUMMY_VAR__;
      
      prior6 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior6);
      local_scalar_t__ prior7;
      prior7 = DUMMY_VAR__;
      
      prior7 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior7);
      local_scalar_t__ prior8;
      prior8 = DUMMY_VAR__;
      
      prior8 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior8);
      local_scalar_t__ prior9;
      prior9 = DUMMY_VAR__;
      
      prior9 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior9);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"prior1", "prior10", "prior11",
      "prior12", "prior13", "prior14", "prior15", "prior16", "prior17",
      "prior18", "prior19", "prior2", "prior20", "prior21", "prior22",
      "prior23", "prior24", "prior25", "prior3", "prior4", "prior5",
      "prior6", "prior7", "prior8", "prior9", "m1", "m10", "m11", "m12",
      "m13", "m14", "m15", "m16", "m17", "m18", "m19", "m2", "m20", "m21",
      "m22", "m23", "m24", "m25", "m3", "m4", "m5", "m6", "m7", "m8", "m9",
      "z1", "z10", "z11", "z12", "z13", "z14", "z15", "z16", "z17", "z18",
      "z19", "z2", "z20", "z21", "z22", "z23", "z24", "z25", "z3", "z4",
      "z5", "z6", "z7", "z8", "z9"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(16777216)},
      std::vector<size_t>{static_cast<size_t>(32768)},
      std::vector<size_t>{static_cast<size_t>(16384)},
      std::vector<size_t>{static_cast<size_t>(8192)},
      std::vector<size_t>{static_cast<size_t>(4096)},
      std::vector<size_t>{static_cast<size_t>(2048)},
      std::vector<size_t>{static_cast<size_t>(1024)},
      std::vector<size_t>{static_cast<size_t>(512)},
      std::vector<size_t>{static_cast<size_t>(256)},
      std::vector<size_t>{static_cast<size_t>(128)},
      std::vector<size_t>{static_cast<size_t>(64)},
      std::vector<size_t>{static_cast<size_t>(8388608)},
      std::vector<size_t>{static_cast<size_t>(32)},
      std::vector<size_t>{static_cast<size_t>(16)},
      std::vector<size_t>{static_cast<size_t>(8)},
      std::vector<size_t>{static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(2)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(4194304)},
      std::vector<size_t>{static_cast<size_t>(2097152)},
      std::vector<size_t>{static_cast<size_t>(1048576)},
      std::vector<size_t>{static_cast<size_t>(524288)},
      std::vector<size_t>{static_cast<size_t>(262144)},
      std::vector<size_t>{static_cast<size_t>(131072)},
      std::vector<size_t>{static_cast<size_t>(65536)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "prior1");
    param_names__.emplace_back(std::string() + "prior10");
    param_names__.emplace_back(std::string() + "prior11");
    param_names__.emplace_back(std::string() + "prior12");
    param_names__.emplace_back(std::string() + "prior13");
    param_names__.emplace_back(std::string() + "prior14");
    param_names__.emplace_back(std::string() + "prior15");
    param_names__.emplace_back(std::string() + "prior16");
    param_names__.emplace_back(std::string() + "prior17");
    param_names__.emplace_back(std::string() + "prior18");
    param_names__.emplace_back(std::string() + "prior19");
    param_names__.emplace_back(std::string() + "prior2");
    param_names__.emplace_back(std::string() + "prior20");
    param_names__.emplace_back(std::string() + "prior21");
    param_names__.emplace_back(std::string() + "prior22");
    param_names__.emplace_back(std::string() + "prior23");
    param_names__.emplace_back(std::string() + "prior24");
    param_names__.emplace_back(std::string() + "prior25");
    param_names__.emplace_back(std::string() + "prior3");
    param_names__.emplace_back(std::string() + "prior4");
    param_names__.emplace_back(std::string() + "prior5");
    param_names__.emplace_back(std::string() + "prior6");
    param_names__.emplace_back(std::string() + "prior7");
    param_names__.emplace_back(std::string() + "prior8");
    param_names__.emplace_back(std::string() + "prior9");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 16777216; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 32768; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m10" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 16384; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m11" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 8192; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m12" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4096; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m13" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2048; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m14" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 1024; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m15" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 512; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m16" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 256; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m17" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 128; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m18" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 64; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m19" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 8388608; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 32; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m20" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 16; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m21" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m22" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m23" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m24" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "m25");
      for (int sym1__ = 1; sym1__ <= 4194304; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m3" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2097152; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m4" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 1048576; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m5" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 524288; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m6" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 262144; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m7" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 131072; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m8" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 65536; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m9" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "z1");
      param_names__.emplace_back(std::string() + "z10");
      param_names__.emplace_back(std::string() + "z11");
      param_names__.emplace_back(std::string() + "z12");
      param_names__.emplace_back(std::string() + "z13");
      param_names__.emplace_back(std::string() + "z14");
      param_names__.emplace_back(std::string() + "z15");
      param_names__.emplace_back(std::string() + "z16");
      param_names__.emplace_back(std::string() + "z17");
      param_names__.emplace_back(std::string() + "z18");
      param_names__.emplace_back(std::string() + "z19");
      param_names__.emplace_back(std::string() + "z2");
      param_names__.emplace_back(std::string() + "z20");
      param_names__.emplace_back(std::string() + "z21");
      param_names__.emplace_back(std::string() + "z22");
      param_names__.emplace_back(std::string() + "z23");
      param_names__.emplace_back(std::string() + "z24");
      param_names__.emplace_back(std::string() + "z25");
      param_names__.emplace_back(std::string() + "z3");
      param_names__.emplace_back(std::string() + "z4");
      param_names__.emplace_back(std::string() + "z5");
      param_names__.emplace_back(std::string() + "z6");
      param_names__.emplace_back(std::string() + "z7");
      param_names__.emplace_back(std::string() + "z8");
      param_names__.emplace_back(std::string() + "z9");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "prior1");
    param_names__.emplace_back(std::string() + "prior10");
    param_names__.emplace_back(std::string() + "prior11");
    param_names__.emplace_back(std::string() + "prior12");
    param_names__.emplace_back(std::string() + "prior13");
    param_names__.emplace_back(std::string() + "prior14");
    param_names__.emplace_back(std::string() + "prior15");
    param_names__.emplace_back(std::string() + "prior16");
    param_names__.emplace_back(std::string() + "prior17");
    param_names__.emplace_back(std::string() + "prior18");
    param_names__.emplace_back(std::string() + "prior19");
    param_names__.emplace_back(std::string() + "prior2");
    param_names__.emplace_back(std::string() + "prior20");
    param_names__.emplace_back(std::string() + "prior21");
    param_names__.emplace_back(std::string() + "prior22");
    param_names__.emplace_back(std::string() + "prior23");
    param_names__.emplace_back(std::string() + "prior24");
    param_names__.emplace_back(std::string() + "prior25");
    param_names__.emplace_back(std::string() + "prior3");
    param_names__.emplace_back(std::string() + "prior4");
    param_names__.emplace_back(std::string() + "prior5");
    param_names__.emplace_back(std::string() + "prior6");
    param_names__.emplace_back(std::string() + "prior7");
    param_names__.emplace_back(std::string() + "prior8");
    param_names__.emplace_back(std::string() + "prior9");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 16777216; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 32768; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m10" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 16384; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m11" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 8192; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m12" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4096; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m13" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2048; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m14" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 1024; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m15" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 512; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m16" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 256; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m17" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 128; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m18" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 64; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m19" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 8388608; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 32; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m20" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 16; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m21" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m22" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m23" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m24" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "m25");
      for (int sym1__ = 1; sym1__ <= 4194304; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m3" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2097152; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m4" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 1048576; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m5" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 524288; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m6" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 262144; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m7" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 131072; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m8" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 65536; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m9" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "z1");
      param_names__.emplace_back(std::string() + "z10");
      param_names__.emplace_back(std::string() + "z11");
      param_names__.emplace_back(std::string() + "z12");
      param_names__.emplace_back(std::string() + "z13");
      param_names__.emplace_back(std::string() + "z14");
      param_names__.emplace_back(std::string() + "z15");
      param_names__.emplace_back(std::string() + "z16");
      param_names__.emplace_back(std::string() + "z17");
      param_names__.emplace_back(std::string() + "z18");
      param_names__.emplace_back(std::string() + "z19");
      param_names__.emplace_back(std::string() + "z2");
      param_names__.emplace_back(std::string() + "z20");
      param_names__.emplace_back(std::string() + "z21");
      param_names__.emplace_back(std::string() + "z22");
      param_names__.emplace_back(std::string() + "z23");
      param_names__.emplace_back(std::string() + "z24");
      param_names__.emplace_back(std::string() + "z25");
      param_names__.emplace_back(std::string() + "z3");
      param_names__.emplace_back(std::string() + "z4");
      param_names__.emplace_back(std::string() + "z5");
      param_names__.emplace_back(std::string() + "z6");
      param_names__.emplace_back(std::string() + "z7");
      param_names__.emplace_back(std::string() + "z8");
      param_names__.emplace_back(std::string() + "z9");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"prior1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior10\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior11\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior12\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior13\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior14\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior15\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior16\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior17\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior18\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior19\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior20\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior21\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior22\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior23\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior24\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior25\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior5\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior6\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior7\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior8\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior9\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(16777216) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m10\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(32768) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m11\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(16384) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m12\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8192) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m13\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4096) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m14\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2048) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m15\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1024) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m16\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(512) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m17\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(256) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m18\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(128) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m19\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(64) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8388608) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m20\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(32) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m21\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(16) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m22\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m23\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m24\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m25\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"m3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4194304) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2097152) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1048576) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(524288) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(262144) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(131072) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m9\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(65536) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"z1\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z10\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z11\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z12\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z13\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z14\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z15\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z16\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z17\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z18\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z19\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z2\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z20\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z21\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z22\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z23\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z24\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z25\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z3\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z4\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z5\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z6\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z7\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z8\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z9\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"prior1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior10\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior11\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior12\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior13\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior14\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior15\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior16\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior17\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior18\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior19\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior20\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior21\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior22\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior23\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior24\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior25\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior5\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior6\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior7\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior8\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior9\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(16777216) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m10\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(32768) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m11\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(16384) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m12\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8192) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m13\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4096) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m14\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2048) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m15\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1024) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m16\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(512) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m17\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(256) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m18\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(128) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m19\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(64) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8388608) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m20\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(32) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m21\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(16) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m22\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m23\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m24\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m25\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"m3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4194304) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2097152) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1048576) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(524288) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(262144) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(131072) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m9\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(65536) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"z1\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z10\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z11\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z12\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z13\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z14\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z15\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z16\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z17\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z18\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z19\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z2\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z20\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z21\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z22\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z23\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z24\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z25\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z3\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z4\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z5\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z6\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z7\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z8\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z9\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
                 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
     + 1) + 1);
      const size_t num_transformed = ((((((((((((((((((((((((16777216
                                                                    + 32768)
                                                                    + 16384)
                                                                    + 8192) +
                                                                    4096) +
                                                                    2048) +
                                                                    1024) +
                                                                    512) +
                                                                    256) +
                                                                    128) +
                                                                    64) +
                                                                    8388608)
                                                                   + 32) +
                                                                  16) + 8) +
                                                                4) + 2) + 1)
                                                             + 4194304) +
                                                            2097152) +
                                                           1048576) + 524288)
                                                         + 262144) + 131072)
                                                       + 65536);
      const size_t num_gen_quantities = 
  ((((((((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
                 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
     + 1) + 1);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
                 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
     + 1) + 1);
      const size_t num_transformed = ((((((((((((((((((((((((16777216
                                                                    + 32768)
                                                                    + 16384)
                                                                    + 8192) +
                                                                    4096) +
                                                                    2048) +
                                                                    1024) +
                                                                    512) +
                                                                    256) +
                                                                    128) +
                                                                    64) +
                                                                    8388608)
                                                                   + 32) +
                                                                  16) + 8) +
                                                                4) + 2) + 1)
                                                             + 4194304) +
                                                            2097152) +
                                                           1048576) + 524288)
                                                         + 262144) + 131072)
                                                       + 65536);
      const size_t num_gen_quantities = 
  ((((((((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
                 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
     + 1) + 1);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 25> names__{"prior1", "prior10",
      "prior11", "prior12", "prior13", "prior14", "prior15", "prior16",
      "prior17", "prior18", "prior19", "prior2", "prior20", "prior21",
      "prior22", "prior23", "prior24", "prior25", "prior3", "prior4",
      "prior5", "prior6", "prior7", "prior8", "prior9"};
      const std::array<Eigen::Index, 25> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
       1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = or_25_model_namespace::or_25_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return or_25_model_namespace::profiles__;
}

#endif


