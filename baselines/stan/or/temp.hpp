
// Code generated by stanc v2.28.1
#include <stan/model/model_header.hpp>
namespace temp_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 106> locations_array__ = 
{" (found before start of program)",
 " (in 'benchmarks/or/temp.stan', line 7, column 4 to column 33)",
 " (in 'benchmarks/or/temp.stan', line 11, column 1 to column 12)",
 " (in 'benchmarks/or/temp.stan', line 43, column 1 to column 12)",
 " (in 'benchmarks/or/temp.stan', line 44, column 1 to column 12)",
 " (in 'benchmarks/or/temp.stan', line 45, column 2 to column 10)",
 " (in 'benchmarks/or/temp.stan', line 12, column 2 to column 23)",
 " (in 'benchmarks/or/temp.stan', line 16, column 10 to column 25)",
 " (in 'benchmarks/or/temp.stan', line 17, column 10 to column 33)",
 " (in 'benchmarks/or/temp.stan', line 19, column 12 to column 64)",
 " (in 'benchmarks/or/temp.stan', line 20, column 12 to column 58)",
 " (in 'benchmarks/or/temp.stan', line 21, column 12 to column 58)",
 " (in 'benchmarks/or/temp.stan', line 22, column 12 to column 58)",
 " (in 'benchmarks/or/temp.stan', line 29, column 14 to column 53)",
 " (in 'benchmarks/or/temp.stan', line 30, column 14 to column 53)",
 " (in 'benchmarks/or/temp.stan', line 28, column 16 to line 32, column 13)",
 " (in 'benchmarks/or/temp.stan', line 24, column 14 to column 52)",
 " (in 'benchmarks/or/temp.stan', line 25, column 14 to column 52)",
 " (in 'benchmarks/or/temp.stan', line 23, column 55 to line 27, column 13)",
 " (in 'benchmarks/or/temp.stan', line 23, column 12 to line 32, column 13)",
 " (in 'benchmarks/or/temp.stan', line 18, column 30 to line 33, column 11)",
 " (in 'benchmarks/or/temp.stan', line 18, column 10 to line 33, column 11)",
 " (in 'benchmarks/or/temp.stan', line 34, column 10 to column 66)",
 " (in 'benchmarks/or/temp.stan', line 16, column 8 to line 35, column 9)",
 " (in 'benchmarks/or/temp.stan', line 15, column 22 to line 37, column 7)",
 " (in 'benchmarks/or/temp.stan', line 15, column 6 to line 37, column 7)",
 " (in 'benchmarks/or/temp.stan', line 14, column 20 to line 39, column 5)",
 " (in 'benchmarks/or/temp.stan', line 14, column 4 to line 39, column 5)",
 " (in 'benchmarks/or/temp.stan', line 13, column 18 to line 41, column 3)",
 " (in 'benchmarks/or/temp.stan', line 13, column 2 to line 41, column 3)",
 " (in 'benchmarks/or/temp.stan', line 46, column 2 to column 23)",
 " (in 'benchmarks/or/temp.stan', line 49, column 8 to column 23)",
 " (in 'benchmarks/or/temp.stan', line 50, column 8 to column 31)",
 " (in 'benchmarks/or/temp.stan', line 52, column 10 to column 65)",
 " (in 'benchmarks/or/temp.stan', line 51, column 28 to line 54, column 9)",
 " (in 'benchmarks/or/temp.stan', line 51, column 8 to line 54, column 9)",
 " (in 'benchmarks/or/temp.stan', line 55, column 8 to column 55)",
 " (in 'benchmarks/or/temp.stan', line 49, column 6 to line 56, column 7)",
 " (in 'benchmarks/or/temp.stan', line 48, column 20 to line 58, column 5)",
 " (in 'benchmarks/or/temp.stan', line 48, column 4 to line 58, column 5)",
 " (in 'benchmarks/or/temp.stan', line 47, column 18 to line 60, column 3)",
 " (in 'benchmarks/or/temp.stan', line 47, column 2 to line 60, column 3)",
 " (in 'benchmarks/or/temp.stan', line 61, column 2 to column 23)",
 " (in 'benchmarks/or/temp.stan', line 63, column 6 to column 21)",
 " (in 'benchmarks/or/temp.stan', line 64, column 6 to column 29)",
 " (in 'benchmarks/or/temp.stan', line 66, column 8 to column 54)",
 " (in 'benchmarks/or/temp.stan', line 65, column 26 to line 68, column 7)",
 " (in 'benchmarks/or/temp.stan', line 65, column 6 to line 68, column 7)",
 " (in 'benchmarks/or/temp.stan', line 69, column 6 to column 34)",
 " (in 'benchmarks/or/temp.stan', line 63, column 4 to line 70, column 5)",
 " (in 'benchmarks/or/temp.stan', line 62, column 18 to line 72, column 3)",
 " (in 'benchmarks/or/temp.stan', line 62, column 2 to line 72, column 3)",
 " (in 'benchmarks/or/temp.stan', line 73, column 2 to column 9)",
 " (in 'benchmarks/or/temp.stan', line 74, column 4 to column 19)",
 " (in 'benchmarks/or/temp.stan', line 75, column 4 to column 27)",
 " (in 'benchmarks/or/temp.stan', line 77, column 6 to column 43)",
 " (in 'benchmarks/or/temp.stan', line 76, column 24 to line 79, column 5)",
 " (in 'benchmarks/or/temp.stan', line 76, column 4 to line 79, column 5)",
 " (in 'benchmarks/or/temp.stan', line 80, column 4 to column 28)",
 " (in 'benchmarks/or/temp.stan', line 74, column 2 to line 81, column 3)",
 " (in 'benchmarks/or/temp.stan', line 91, column 2 to column 9)",
 " (in 'benchmarks/or/temp.stan', line 92, column 2 to column 9)",
 " (in 'benchmarks/or/temp.stan', line 93, column 2 to column 9)",
 " (in 'benchmarks/or/temp.stan', line 94, column 2 to column 9)",
 " (in 'benchmarks/or/temp.stan', line 95, column 4 to column 19)",
 " (in 'benchmarks/or/temp.stan', line 96, column 4 to column 27)",
 " (in 'benchmarks/or/temp.stan', line 98, column 6 to column 43)",
 " (in 'benchmarks/or/temp.stan', line 97, column 24 to line 100, column 5)",
 " (in 'benchmarks/or/temp.stan', line 97, column 4 to line 100, column 5)",
 " (in 'benchmarks/or/temp.stan', line 101, column 4 to column 37)",
 " (in 'benchmarks/or/temp.stan', line 95, column 2 to line 102, column 3)",
 " (in 'benchmarks/or/temp.stan', line 103, column 4 to column 19)",
 " (in 'benchmarks/or/temp.stan', line 104, column 4 to column 27)",
 " (in 'benchmarks/or/temp.stan', line 106, column 6 to column 52)",
 " (in 'benchmarks/or/temp.stan', line 105, column 24 to line 108, column 5)",
 " (in 'benchmarks/or/temp.stan', line 105, column 4 to line 108, column 5)",
 " (in 'benchmarks/or/temp.stan', line 109, column 4 to column 37)",
 " (in 'benchmarks/or/temp.stan', line 103, column 2 to line 110, column 3)",
 " (in 'benchmarks/or/temp.stan', line 111, column 4 to column 19)",
 " (in 'benchmarks/or/temp.stan', line 112, column 4 to column 27)",
 " (in 'benchmarks/or/temp.stan', line 114, column 6 to column 61)",
 " (in 'benchmarks/or/temp.stan', line 113, column 24 to line 116, column 5)",
 " (in 'benchmarks/or/temp.stan', line 113, column 4 to line 116, column 5)",
 " (in 'benchmarks/or/temp.stan', line 117, column 4 to column 37)",
 " (in 'benchmarks/or/temp.stan', line 111, column 2 to line 118, column 3)",
 " (in 'benchmarks/or/temp.stan', line 119, column 4 to column 19)",
 " (in 'benchmarks/or/temp.stan', line 120, column 4 to column 27)",
 " (in 'benchmarks/or/temp.stan', line 122, column 6 to column 58)",
 " (in 'benchmarks/or/temp.stan', line 123, column 6 to column 52)",
 " (in 'benchmarks/or/temp.stan', line 124, column 6 to column 52)",
 " (in 'benchmarks/or/temp.stan', line 125, column 6 to column 52)",
 " (in 'benchmarks/or/temp.stan', line 132, column 8 to column 47)",
 " (in 'benchmarks/or/temp.stan', line 133, column 8 to column 47)",
 " (in 'benchmarks/or/temp.stan', line 131, column 10 to line 135, column 7)",
 " (in 'benchmarks/or/temp.stan', line 127, column 8 to column 46)",
 " (in 'benchmarks/or/temp.stan', line 128, column 8 to column 46)",
 " (in 'benchmarks/or/temp.stan', line 126, column 49 to line 130, column 7)",
 " (in 'benchmarks/or/temp.stan', line 126, column 6 to line 135, column 7)",
 " (in 'benchmarks/or/temp.stan', line 121, column 24 to line 136, column 5)",
 " (in 'benchmarks/or/temp.stan', line 121, column 4 to line 136, column 5)",
 " (in 'benchmarks/or/temp.stan', line 137, column 4 to column 37)",
 " (in 'benchmarks/or/temp.stan', line 119, column 2 to line 138, column 3)",
 " (in 'benchmarks/or/temp.stan', line 86, column 2 to column 21)",
 " (in 'benchmarks/or/temp.stan', line 87, column 2 to column 15)",
 " (in 'benchmarks/or/temp.stan', line 2, column 2 to column 10)",
 " (in 'benchmarks/or/temp.stan', line 3, column 2 to column 10)"};



class temp_model final : public model_base_crtp<temp_model> {

 private:
  double d1;
  double d2; 
  
 
 public:
  ~temp_model() { }
  
  inline std::string model_name() const final { return "temp_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.1", "stancflags = "};
  }
  
  
  temp_model(stan::io::var_context& context__,
             unsigned int random_seed__ = 0,
             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "temp_model_namespace::temp_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 104;
      context__.validate_dims("data initialization","d1","double",
           std::vector<size_t>{});
      d1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 104;
      d1 = context__.vals_r("d1")[(1 - 1)];
      current_statement__ = 105;
      context__.validate_dims("data initialization","d2","double",
           std::vector<size_t>{});
      d2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 105;
      d2 = context__.vals_r("d2")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "temp_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ prior;
      prior = DUMMY_VAR__;
      
      current_statement__ = 1;
      prior = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                0, 1, lp__);
      std::vector<local_scalar_t__> m1;
      m1 = std::vector<local_scalar_t__>(8, DUMMY_VAR__);
      
      current_statement__ = 6;
      assign(m1, rep_array(0, 8), "assigning variable m1");
      current_statement__ = 29;
      for (int z4 = 1; z4 <= 2; ++z4) {
        current_statement__ = 27;
        for (int z3 = 1; z3 <= 2; ++z3) {
          current_statement__ = 25;
          for (int z2 = 1; z2 <= 2; ++z2) {
            {
              Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
              acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
              stan::math::fill(acc0, DUMMY_VAR__);
              
              current_statement__ = 8;
              assign(acc0, rep_vector(0, 2), "assigning variable acc0");
              current_statement__ = 21;
              for (int z1_val = 1; z1_val <= 2; ++z1_val) {
                current_statement__ = 9;
                assign(acc0,
                  (rvalue(acc0, "acc0", index_uni(z1_val)) +
                    bernoulli_lpmf<false>((z1_val - 1), prior)),
                  "assigning variable acc0", index_uni(z1_val));
                current_statement__ = 10;
                assign(acc0,
                  (rvalue(acc0, "acc0", index_uni(z1_val)) +
                    bernoulli_lpmf<false>((z2 - 1), 0.5)),
                  "assigning variable acc0", index_uni(z1_val));
                current_statement__ = 11;
                assign(acc0,
                  (rvalue(acc0, "acc0", index_uni(z1_val)) +
                    bernoulli_lpmf<false>((z3 - 1), 0.5)),
                  "assigning variable acc0", index_uni(z1_val));
                current_statement__ = 12;
                assign(acc0,
                  (rvalue(acc0, "acc0", index_uni(z1_val)) +
                    bernoulli_lpmf<false>((z4 - 1), 0.5)),
                  "assigning variable acc0", index_uni(z1_val));
                current_statement__ = 19;
                if (logical_gt(((((z1_val + z2) + z3) + z4) - 4), 0)) {
                  current_statement__ = 16;
                  assign(acc0,
                    (rvalue(acc0, "acc0", index_uni(z1_val)) +
                      normal_lpdf<false>(d1, 1, 1)),
                    "assigning variable acc0", index_uni(z1_val));
                  current_statement__ = 17;
                  assign(acc0,
                    (rvalue(acc0, "acc0", index_uni(z1_val)) +
                      normal_lpdf<false>(d2, 1, 1)),
                    "assigning variable acc0", index_uni(z1_val));
                } else {
                  current_statement__ = 13;
                  assign(acc0,
                    (rvalue(acc0, "acc0", index_uni(z1_val)) +
                      normal_lpdf<false>(d1, -1, 1)),
                    "assigning variable acc0", index_uni(z1_val));
                  current_statement__ = 14;
                  assign(acc0,
                    (rvalue(acc0, "acc0", index_uni(z1_val)) +
                      normal_lpdf<false>(d2, -1, 1)),
                    "assigning variable acc0", index_uni(z1_val));
                }
              }
              current_statement__ = 22;
              assign(m1,
                (rvalue(m1, "m1",
                   index_uni((((((z2 - 1) * 4) + ((z3 - 1) * 2)) +
                                ((z4 - 1) * 1)) + 1))) + log_sum_exp(acc0)),
                "assigning variable m1", index_uni((((((z2 - 1) * 4) +
                                                       ((z3 - 1) * 2)) +
                                                      ((z4 - 1) * 1)) + 1)));
            }
          }
        }
      }
      std::vector<local_scalar_t__> m2;
      m2 = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m3;
      m3 = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
      
      local_scalar_t__ m4;
      m4 = DUMMY_VAR__;
      
      current_statement__ = 30;
      assign(m2, rep_array(0, 4), "assigning variable m2");
      current_statement__ = 41;
      for (int z4 = 1; z4 <= 2; ++z4) {
        current_statement__ = 39;
        for (int z3 = 1; z3 <= 2; ++z3) {
          {
            Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
            acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
            stan::math::fill(acc0, DUMMY_VAR__);
            
            current_statement__ = 32;
            assign(acc0, rep_vector(0, 2), "assigning variable acc0");
            current_statement__ = 35;
            for (int z2_val = 1; z2_val <= 2; ++z2_val) {
              current_statement__ = 33;
              assign(acc0,
                (rvalue(acc0, "acc0", index_uni(z2_val)) +
                  rvalue(m1, "m1",
                    index_uni((((((z2_val - 1) * 4) + ((z3 - 1) * 2)) +
                                 ((z4 - 1) * 1)) + 1)))),
                "assigning variable acc0", index_uni(z2_val));
            }
            current_statement__ = 36;
            assign(m2,
              (rvalue(m2, "m2",
                 index_uni(((((z3 - 1) * 2) + ((z4 - 1) * 1)) + 1))) +
                log_sum_exp(acc0)),
              "assigning variable m2", index_uni(((((z3 - 1) * 2) +
                                                    ((z4 - 1) * 1)) + 1)));
          }
        }
      }
      current_statement__ = 42;
      assign(m3, rep_array(0, 2), "assigning variable m3");
      current_statement__ = 51;
      for (int z4 = 1; z4 <= 2; ++z4) {
        {
          Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
          acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
          stan::math::fill(acc0, DUMMY_VAR__);
          
          current_statement__ = 44;
          assign(acc0, rep_vector(0, 2), "assigning variable acc0");
          current_statement__ = 47;
          for (int z3_val = 1; z3_val <= 2; ++z3_val) {
            current_statement__ = 45;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z3_val)) +
                rvalue(m2, "m2",
                  index_uni(((((z3_val - 1) * 2) + ((z4 - 1) * 1)) + 1)))),
              "assigning variable acc0", index_uni(z3_val));
          }
          current_statement__ = 48;
          assign(m3, (rvalue(m3, "m3", index_uni(z4)) + log_sum_exp(acc0)),
            "assigning variable m3", index_uni(z4));
        }
      }
      current_statement__ = 52;
      m4 = 0;
      {
        Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
        acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
        stan::math::fill(acc0, DUMMY_VAR__);
        
        current_statement__ = 54;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 57;
        for (int z4_val = 1; z4_val <= 2; ++z4_val) {
          current_statement__ = 55;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z4_val)) +
              rvalue(m3, "m3", index_uni((((z4_val - 1) * 1) + 1)))),
            "assigning variable acc0", index_uni(z4_val));
        }
        current_statement__ = 58;
        m4 = (m4 + log_sum_exp(acc0));
      }
      {
        current_statement__ = 102;
        lp_accum__.add(beta_lpdf<propto__>(prior, 1, 1));
        current_statement__ = 103;
        lp_accum__.add(m4);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "temp_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double prior;
      prior = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      prior = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                0, 1, lp__);
      std::vector<double> m1;
      m1 = std::vector<double>(8, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m2;
      m2 = std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m3;
      m3 = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      double m4;
      m4 = std::numeric_limits<double>::quiet_NaN();
      
      out__.write(prior);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 6;
      assign(m1, rep_array(0, 8), "assigning variable m1");
      current_statement__ = 29;
      for (int z4 = 1; z4 <= 2; ++z4) {
        current_statement__ = 27;
        for (int z3 = 1; z3 <= 2; ++z3) {
          current_statement__ = 25;
          for (int z2 = 1; z2 <= 2; ++z2) {
            {
              Eigen::Matrix<double, -1, 1> acc0;
              acc0 = Eigen::Matrix<double, -1, 1>(2);
              stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
              
              
              current_statement__ = 8;
              assign(acc0, rep_vector(0, 2), "assigning variable acc0");
              current_statement__ = 21;
              for (int z1_val = 1; z1_val <= 2; ++z1_val) {
                current_statement__ = 9;
                assign(acc0,
                  (rvalue(acc0, "acc0", index_uni(z1_val)) +
                    bernoulli_lpmf<false>((z1_val - 1), prior)),
                  "assigning variable acc0", index_uni(z1_val));
                current_statement__ = 10;
                assign(acc0,
                  (rvalue(acc0, "acc0", index_uni(z1_val)) +
                    bernoulli_lpmf<false>((z2 - 1), 0.5)),
                  "assigning variable acc0", index_uni(z1_val));
                current_statement__ = 11;
                assign(acc0,
                  (rvalue(acc0, "acc0", index_uni(z1_val)) +
                    bernoulli_lpmf<false>((z3 - 1), 0.5)),
                  "assigning variable acc0", index_uni(z1_val));
                current_statement__ = 12;
                assign(acc0,
                  (rvalue(acc0, "acc0", index_uni(z1_val)) +
                    bernoulli_lpmf<false>((z4 - 1), 0.5)),
                  "assigning variable acc0", index_uni(z1_val));
                current_statement__ = 19;
                if (logical_gt(((((z1_val + z2) + z3) + z4) - 4), 0)) {
                  current_statement__ = 16;
                  assign(acc0,
                    (rvalue(acc0, "acc0", index_uni(z1_val)) +
                      normal_lpdf<false>(d1, 1, 1)),
                    "assigning variable acc0", index_uni(z1_val));
                  current_statement__ = 17;
                  assign(acc0,
                    (rvalue(acc0, "acc0", index_uni(z1_val)) +
                      normal_lpdf<false>(d2, 1, 1)),
                    "assigning variable acc0", index_uni(z1_val));
                } else {
                  current_statement__ = 13;
                  assign(acc0,
                    (rvalue(acc0, "acc0", index_uni(z1_val)) +
                      normal_lpdf<false>(d1, -1, 1)),
                    "assigning variable acc0", index_uni(z1_val));
                  current_statement__ = 14;
                  assign(acc0,
                    (rvalue(acc0, "acc0", index_uni(z1_val)) +
                      normal_lpdf<false>(d2, -1, 1)),
                    "assigning variable acc0", index_uni(z1_val));
                }
              }
              current_statement__ = 22;
              assign(m1,
                (rvalue(m1, "m1",
                   index_uni((((((z2 - 1) * 4) + ((z3 - 1) * 2)) +
                                ((z4 - 1) * 1)) + 1))) + log_sum_exp(acc0)),
                "assigning variable m1", index_uni((((((z2 - 1) * 4) +
                                                       ((z3 - 1) * 2)) +
                                                      ((z4 - 1) * 1)) + 1)));
            }
          }
        }
      }
      current_statement__ = 30;
      assign(m2, rep_array(0, 4), "assigning variable m2");
      current_statement__ = 41;
      for (int z4 = 1; z4 <= 2; ++z4) {
        current_statement__ = 39;
        for (int z3 = 1; z3 <= 2; ++z3) {
          {
            Eigen::Matrix<double, -1, 1> acc0;
            acc0 = Eigen::Matrix<double, -1, 1>(2);
            stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
            
            current_statement__ = 32;
            assign(acc0, rep_vector(0, 2), "assigning variable acc0");
            current_statement__ = 35;
            for (int z2_val = 1; z2_val <= 2; ++z2_val) {
              current_statement__ = 33;
              assign(acc0,
                (rvalue(acc0, "acc0", index_uni(z2_val)) +
                  rvalue(m1, "m1",
                    index_uni((((((z2_val - 1) * 4) + ((z3 - 1) * 2)) +
                                 ((z4 - 1) * 1)) + 1)))),
                "assigning variable acc0", index_uni(z2_val));
            }
            current_statement__ = 36;
            assign(m2,
              (rvalue(m2, "m2",
                 index_uni(((((z3 - 1) * 2) + ((z4 - 1) * 1)) + 1))) +
                log_sum_exp(acc0)),
              "assigning variable m2", index_uni(((((z3 - 1) * 2) +
                                                    ((z4 - 1) * 1)) + 1)));
          }
        }
      }
      current_statement__ = 42;
      assign(m3, rep_array(0, 2), "assigning variable m3");
      current_statement__ = 51;
      for (int z4 = 1; z4 <= 2; ++z4) {
        {
          Eigen::Matrix<double, -1, 1> acc0;
          acc0 = Eigen::Matrix<double, -1, 1>(2);
          stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 44;
          assign(acc0, rep_vector(0, 2), "assigning variable acc0");
          current_statement__ = 47;
          for (int z3_val = 1; z3_val <= 2; ++z3_val) {
            current_statement__ = 45;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z3_val)) +
                rvalue(m2, "m2",
                  index_uni(((((z3_val - 1) * 2) + ((z4 - 1) * 1)) + 1)))),
              "assigning variable acc0", index_uni(z3_val));
          }
          current_statement__ = 48;
          assign(m3, (rvalue(m3, "m3", index_uni(z4)) + log_sum_exp(acc0)),
            "assigning variable m3", index_uni(z4));
        }
      }
      current_statement__ = 52;
      m4 = 0;
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 54;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 57;
        for (int z4_val = 1; z4_val <= 2; ++z4_val) {
          current_statement__ = 55;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z4_val)) +
              rvalue(m3, "m3", index_uni((((z4_val - 1) * 1) + 1)))),
            "assigning variable acc0", index_uni(z4_val));
        }
        current_statement__ = 58;
        m4 = (m4 + log_sum_exp(acc0));
      }
      if (emit_transformed_parameters__) {
        out__.write(m1);
        out__.write(m2);
        out__.write(m3);
        out__.write(m4);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      int z1;
      z1 = std::numeric_limits<int>::min();
      
      int z2;
      z2 = std::numeric_limits<int>::min();
      
      int z3;
      z3 = std::numeric_limits<int>::min();
      
      int z4;
      z4 = std::numeric_limits<int>::min();
      
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 65;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 68;
        for (int z4_val = 1; z4_val <= 2; ++z4_val) {
          current_statement__ = 66;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z4_val)) +
              rvalue(m3, "m3", index_uni((((z4_val - 1) * 1) + 1)))),
            "assigning variable acc0", index_uni(z4_val));
        }
        current_statement__ = 69;
        z4 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 72;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 75;
        for (int z3_val = 1; z3_val <= 2; ++z3_val) {
          current_statement__ = 73;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z3_val)) +
              rvalue(m2, "m2",
                index_uni(((((z3_val - 1) * 2) + ((z4 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z3_val));
        }
        current_statement__ = 76;
        z3 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 79;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 82;
        for (int z2_val = 1; z2_val <= 2; ++z2_val) {
          current_statement__ = 80;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z2_val)) +
              rvalue(m1, "m1",
                index_uni((((((z2_val - 1) * 4) + ((z3 - 1) * 2)) +
                             ((z4 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z2_val));
        }
        current_statement__ = 83;
        z2 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 86;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 99;
        for (int z1_val = 1; z1_val <= 2; ++z1_val) {
          current_statement__ = 87;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z1_val - 1), prior)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 88;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z2 - 1), 0.5)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 89;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z3 - 1), 0.5)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 90;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z4 - 1), 0.5)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 97;
          if (logical_gt(((((z1_val + z2) + z3) + z4) - 4), 0)) {
            current_statement__ = 94;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d1, 1, 1)),
              "assigning variable acc0", index_uni(z1_val));
            current_statement__ = 95;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d2, 1, 1)),
              "assigning variable acc0", index_uni(z1_val));
          } else {
            current_statement__ = 91;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d1, -1, 1)),
              "assigning variable acc0", index_uni(z1_val));
            current_statement__ = 92;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d2, -1, 1)),
              "assigning variable acc0", index_uni(z1_val));
          }
        }
        current_statement__ = 100;
        z1 = categorical_logit_rng(acc0, base_rng__);
      }
      out__.write(z1);
      out__.write(z2);
      out__.write(z3);
      out__.write(z4);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      local_scalar_t__ prior;
      prior = DUMMY_VAR__;
      
      prior = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"prior", "m1", "m2", "m3", "m4", "z1",
      "z2", "z3", "z4"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(8)},
      std::vector<size_t>{static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(2)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "prior");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m3" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "m4");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "z1");
      param_names__.emplace_back(std::string() + "z2");
      param_names__.emplace_back(std::string() + "z3");
      param_names__.emplace_back(std::string() + "z4");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "prior");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m3" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "m4");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "z1");
      param_names__.emplace_back(std::string() + "z2");
      param_names__.emplace_back(std::string() + "z3");
      param_names__.emplace_back(std::string() + "z4");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"prior\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m4\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"z1\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z2\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z3\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z4\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"prior\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m4\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"z1\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z2\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z3\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z4\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 1;
      const size_t num_transformed = 
  (((8 + 4) + 2) + 1);
      const size_t num_gen_quantities = (((1 + 1) + 1)
                                                                 + 1);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 1;
      const size_t num_transformed = 
  (((8 + 4) + 2) + 1);
      const size_t num_gen_quantities = (((1 + 1) + 1)
                                                                 + 1);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 1> names__{"prior"};
      const std::array<Eigen::Index, 1> constrain_param_sizes__{1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = temp_model_namespace::temp_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return temp_model_namespace::profiles__;
}

#endif


