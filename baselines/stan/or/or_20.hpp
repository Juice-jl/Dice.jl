
// Code generated by stanc v2.28.1
#include <stan/model/model_header.hpp>
namespace or_20_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 816> locations_array__ = 
{" (found before start of program)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 7, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 8, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 9, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 10, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 11, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 12, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 13, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 14, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 15, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 16, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 17, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 18, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 19, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 20, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 21, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 22, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 23, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 24, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 25, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 26, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 30, column 1 to column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 126, column 1 to column 16)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 127, column 1 to column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 128, column 1 to column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 129, column 1 to column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 130, column 1 to column 14)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 131, column 1 to column 14)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 132, column 1 to column 14)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 133, column 1 to column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 134, column 1 to column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 135, column 1 to column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 136, column 1 to column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 137, column 2 to column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 138, column 1 to column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 139, column 1 to column 16)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 140, column 1 to column 16)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 141, column 1 to column 16)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 142, column 1 to column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 143, column 1 to column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 144, column 1 to column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 31, column 2 to column 28)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 51, column 42 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 52, column 42 to column 65)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 54, column 44 to column 97)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 55, column 44 to column 93)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 56, column 44 to column 93)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 57, column 44 to column 93)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 58, column 44 to column 93)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 59, column 44 to column 93)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 60, column 44 to column 93)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 61, column 44 to column 93)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 62, column 44 to column 93)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 63, column 44 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 64, column 44 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 65, column 44 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 66, column 44 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 67, column 44 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 68, column 44 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 69, column 44 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 70, column 44 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 71, column 44 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 72, column 44 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 73, column 44 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 80, column 46 to column 85)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 81, column 46 to column 85)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 79, column 48 to line 83, column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 75, column 46 to column 86)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 76, column 46 to column 86)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 74, column 211 to line 78, column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 74, column 44 to line 83, column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 53, column 62 to line 84, column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 53, column 42 to line 84, column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 85, column 42 to column 296)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 51, column 40 to line 86, column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 50, column 55 to line 88, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 50, column 38 to line 88, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 49, column 53 to line 90, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 49, column 36 to line 90, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 48, column 51 to line 92, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 48, column 34 to line 92, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 47, column 49 to line 94, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 47, column 32 to line 94, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 46, column 47 to line 96, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 46, column 30 to line 96, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 45, column 45 to line 98, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 45, column 28 to line 98, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 44, column 43 to line 100, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 44, column 26 to line 100, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 43, column 41 to line 102, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 43, column 24 to line 102, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 42, column 39 to line 104, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 42, column 22 to line 104, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 41, column 37 to line 106, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 41, column 20 to line 106, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 40, column 34 to line 108, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 40, column 18 to line 108, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 39, column 33 to line 110, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 39, column 16 to line 110, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 38, column 30 to line 112, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 38, column 14 to line 112, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 37, column 28 to line 114, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 37, column 12 to line 114, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 36, column 26 to line 116, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 36, column 10 to line 116, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 35, column 24 to line 118, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 35, column 8 to line 118, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 34, column 22 to line 120, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 34, column 6 to line 120, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 33, column 20 to line 122, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 33, column 4 to line 122, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 32, column 18 to line 124, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 32, column 2 to line 124, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 145, column 2 to column 28)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 164, column 40 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 165, column 40 to column 63)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 167, column 42 to column 295)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 166, column 60 to line 169, column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 166, column 40 to line 169, column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 170, column 40 to column 280)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 164, column 38 to line 171, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 163, column 53 to line 173, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 163, column 36 to line 173, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 162, column 51 to line 175, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 162, column 34 to line 175, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 161, column 49 to line 177, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 161, column 32 to line 177, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 160, column 47 to line 179, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 160, column 30 to line 179, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 159, column 45 to line 181, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 159, column 28 to line 181, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 158, column 43 to line 183, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 158, column 26 to line 183, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 157, column 41 to line 185, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 157, column 24 to line 185, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 156, column 39 to line 187, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 156, column 22 to line 187, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 155, column 37 to line 189, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 155, column 20 to line 189, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 154, column 35 to line 191, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 154, column 18 to line 191, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 153, column 33 to line 193, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 153, column 16 to line 193, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 152, column 30 to line 195, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 152, column 14 to line 195, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 151, column 28 to line 197, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 151, column 12 to line 197, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 150, column 26 to line 199, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 150, column 10 to line 199, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 149, column 24 to line 201, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 149, column 8 to line 201, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 148, column 22 to line 203, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 148, column 6 to line 203, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 147, column 20 to line 205, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 147, column 4 to line 205, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 146, column 18 to line 207, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 146, column 2 to line 207, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 208, column 2 to column 28)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 226, column 38 to column 53)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 227, column 38 to column 61)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 229, column 40 to column 279)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 228, column 58 to line 231, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 228, column 38 to line 231, column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 232, column 38 to column 264)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 226, column 36 to line 233, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 225, column 51 to line 235, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 225, column 34 to line 235, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 224, column 49 to line 237, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 224, column 32 to line 237, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 223, column 47 to line 239, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 223, column 30 to line 239, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 222, column 45 to line 241, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 222, column 28 to line 241, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 221, column 43 to line 243, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 221, column 26 to line 243, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 220, column 41 to line 245, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 220, column 24 to line 245, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 219, column 39 to line 247, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 219, column 22 to line 247, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 218, column 37 to line 249, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 218, column 20 to line 249, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 217, column 35 to line 251, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 217, column 18 to line 251, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 216, column 33 to line 253, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 216, column 16 to line 253, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 215, column 31 to line 255, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 215, column 14 to line 255, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 214, column 28 to line 257, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 214, column 12 to line 257, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 213, column 26 to line 259, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 213, column 10 to line 259, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 212, column 24 to line 261, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 212, column 8 to line 261, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 211, column 22 to line 263, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 211, column 6 to line 263, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 210, column 20 to line 265, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 210, column 4 to line 265, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 209, column 18 to line 267, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 209, column 2 to line 267, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 268, column 2 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 285, column 36 to column 51)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 286, column 36 to column 59)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 288, column 38 to column 263)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 287, column 56 to line 290, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 287, column 36 to line 290, column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 291, column 36 to column 249)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 285, column 34 to line 292, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 284, column 49 to line 294, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 284, column 32 to line 294, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 283, column 47 to line 296, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 283, column 30 to line 296, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 282, column 45 to line 298, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 282, column 28 to line 298, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 281, column 43 to line 300, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 281, column 26 to line 300, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 280, column 41 to line 302, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 280, column 24 to line 302, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 279, column 39 to line 304, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 279, column 22 to line 304, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 278, column 37 to line 306, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 278, column 20 to line 306, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 277, column 35 to line 308, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 277, column 18 to line 308, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 276, column 33 to line 310, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 276, column 16 to line 310, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 275, column 31 to line 312, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 275, column 14 to line 312, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 274, column 29 to line 314, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 274, column 12 to line 314, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 273, column 26 to line 316, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 273, column 10 to line 316, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 272, column 24 to line 318, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 272, column 8 to line 318, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 271, column 22 to line 320, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 271, column 6 to line 320, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 270, column 20 to line 322, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 270, column 4 to line 322, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 269, column 18 to line 324, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 269, column 2 to line 324, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 325, column 2 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 341, column 34 to column 49)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 342, column 34 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 344, column 36 to column 248)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 343, column 54 to line 346, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 343, column 34 to line 346, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 347, column 34 to column 234)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 341, column 32 to line 348, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 340, column 47 to line 350, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 340, column 30 to line 350, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 339, column 45 to line 352, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 339, column 28 to line 352, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 338, column 43 to line 354, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 338, column 26 to line 354, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 337, column 41 to line 356, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 337, column 24 to line 356, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 336, column 39 to line 358, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 336, column 22 to line 358, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 335, column 37 to line 360, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 335, column 20 to line 360, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 334, column 35 to line 362, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 334, column 18 to line 362, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 333, column 33 to line 364, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 333, column 16 to line 364, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 332, column 31 to line 366, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 332, column 14 to line 366, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 331, column 29 to line 368, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 331, column 12 to line 368, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 330, column 27 to line 370, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 330, column 10 to line 370, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 329, column 24 to line 372, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 329, column 8 to line 372, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 328, column 22 to line 374, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 328, column 6 to line 374, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 327, column 20 to line 376, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 327, column 4 to line 376, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 326, column 18 to line 378, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 326, column 2 to line 378, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 379, column 2 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 394, column 32 to column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 395, column 32 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 397, column 34 to column 233)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 396, column 52 to line 399, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 396, column 32 to line 399, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 400, column 32 to column 219)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 394, column 30 to line 401, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 393, column 45 to line 403, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 393, column 28 to line 403, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 392, column 43 to line 405, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 392, column 26 to line 405, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 391, column 41 to line 407, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 391, column 24 to line 407, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 390, column 39 to line 409, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 390, column 22 to line 409, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 389, column 37 to line 411, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 389, column 20 to line 411, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 388, column 35 to line 413, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 388, column 18 to line 413, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 387, column 33 to line 415, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 387, column 16 to line 415, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 386, column 31 to line 417, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 386, column 14 to line 417, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 385, column 29 to line 419, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 385, column 12 to line 419, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 384, column 27 to line 421, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 384, column 10 to line 421, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 383, column 25 to line 423, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 383, column 8 to line 423, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 382, column 22 to line 425, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 382, column 6 to line 425, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 381, column 20 to line 427, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 381, column 4 to line 427, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 380, column 18 to line 429, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 380, column 2 to line 429, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 430, column 2 to column 26)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 444, column 30 to column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 445, column 30 to column 53)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 447, column 32 to column 218)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 446, column 50 to line 449, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 446, column 30 to line 449, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 450, column 30 to column 205)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 444, column 28 to line 451, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 443, column 43 to line 453, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 443, column 26 to line 453, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 442, column 41 to line 455, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 442, column 24 to line 455, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 441, column 39 to line 457, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 441, column 22 to line 457, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 440, column 37 to line 459, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 440, column 20 to line 459, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 439, column 35 to line 461, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 439, column 18 to line 461, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 438, column 33 to line 463, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 438, column 16 to line 463, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 437, column 31 to line 465, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 437, column 14 to line 465, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 436, column 29 to line 467, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 436, column 12 to line 467, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 435, column 27 to line 469, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 435, column 10 to line 469, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 434, column 25 to line 471, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 434, column 8 to line 471, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 433, column 23 to line 473, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 433, column 6 to line 473, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 432, column 20 to line 475, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 432, column 4 to line 475, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 431, column 18 to line 477, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 431, column 2 to line 477, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 478, column 2 to column 26)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 491, column 28 to column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 492, column 28 to column 51)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 494, column 30 to column 204)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 493, column 48 to line 496, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 493, column 28 to line 496, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 497, column 28 to column 191)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 491, column 26 to line 498, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 490, column 41 to line 500, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 490, column 24 to line 500, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 489, column 39 to line 502, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 489, column 22 to line 502, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 488, column 37 to line 504, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 488, column 20 to line 504, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 487, column 35 to line 506, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 487, column 18 to line 506, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 486, column 33 to line 508, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 486, column 16 to line 508, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 485, column 31 to line 510, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 485, column 14 to line 510, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 484, column 29 to line 512, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 484, column 12 to line 512, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 483, column 27 to line 514, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 483, column 10 to line 514, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 482, column 25 to line 516, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 482, column 8 to line 516, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 481, column 23 to line 518, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 481, column 6 to line 518, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 480, column 21 to line 520, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 480, column 4 to line 520, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 479, column 18 to line 522, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 479, column 2 to line 522, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 523, column 2 to column 26)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 535, column 26 to column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 536, column 26 to column 49)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 538, column 28 to column 190)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 537, column 46 to line 540, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 537, column 26 to line 540, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 541, column 26 to column 177)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 535, column 24 to line 542, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 534, column 39 to line 544, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 534, column 22 to line 544, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 533, column 37 to line 546, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 533, column 20 to line 546, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 532, column 35 to line 548, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 532, column 18 to line 548, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 531, column 33 to line 550, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 531, column 16 to line 550, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 530, column 31 to line 552, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 530, column 14 to line 552, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 529, column 29 to line 554, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 529, column 12 to line 554, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 528, column 27 to line 556, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 528, column 10 to line 556, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 527, column 25 to line 558, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 527, column 8 to line 558, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 526, column 23 to line 560, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 526, column 6 to line 560, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 525, column 21 to line 562, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 525, column 4 to line 562, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 524, column 19 to line 564, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 524, column 2 to line 564, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 565, column 2 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 576, column 24 to column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 577, column 24 to column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 579, column 26 to column 177)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 578, column 45 to line 581, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 578, column 24 to line 581, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 582, column 24 to column 163)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 576, column 22 to line 583, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 575, column 37 to line 585, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 575, column 20 to line 585, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 574, column 35 to line 587, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 574, column 18 to line 587, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 573, column 33 to line 589, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 573, column 16 to line 589, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 572, column 31 to line 591, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 572, column 14 to line 591, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 571, column 29 to line 593, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 571, column 12 to line 593, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 570, column 27 to line 595, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 570, column 10 to line 595, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 569, column 25 to line 597, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 569, column 8 to line 597, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 568, column 23 to line 599, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 568, column 6 to line 599, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 567, column 21 to line 601, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 567, column 4 to line 601, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 566, column 19 to line 603, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 566, column 2 to line 603, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 604, column 2 to column 26)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 614, column 22 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 615, column 22 to column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 617, column 24 to column 163)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 616, column 43 to line 619, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 616, column 22 to line 619, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 620, column 22 to column 149)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 614, column 20 to line 621, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 613, column 35 to line 623, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 613, column 18 to line 623, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 612, column 33 to line 625, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 612, column 16 to line 625, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 611, column 31 to line 627, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 611, column 14 to line 627, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 610, column 29 to line 629, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 610, column 12 to line 629, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 609, column 27 to line 631, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 609, column 10 to line 631, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 608, column 25 to line 633, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 608, column 8 to line 633, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 607, column 23 to line 635, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 607, column 6 to line 635, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 606, column 21 to line 637, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 606, column 4 to line 637, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 605, column 19 to line 639, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 605, column 2 to line 639, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 640, column 2 to column 26)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 649, column 20 to column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 650, column 20 to column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 652, column 22 to column 149)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 651, column 41 to line 654, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 651, column 20 to line 654, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 655, column 20 to column 135)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 649, column 18 to line 656, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 648, column 33 to line 658, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 648, column 16 to line 658, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 647, column 31 to line 660, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 647, column 14 to line 660, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 646, column 29 to line 662, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 646, column 12 to line 662, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 645, column 27 to line 664, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 645, column 10 to line 664, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 644, column 25 to line 666, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 644, column 8 to line 666, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 643, column 23 to line 668, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 643, column 6 to line 668, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 642, column 21 to line 670, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 642, column 4 to line 670, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 641, column 19 to line 672, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 641, column 2 to line 672, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 673, column 2 to column 26)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 681, column 18 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 682, column 18 to column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 684, column 20 to column 135)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 683, column 39 to line 686, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 683, column 18 to line 686, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 687, column 18 to column 121)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 681, column 16 to line 688, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 680, column 31 to line 690, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 680, column 14 to line 690, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 679, column 29 to line 692, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 679, column 12 to line 692, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 678, column 27 to line 694, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 678, column 10 to line 694, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 677, column 25 to line 696, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 677, column 8 to line 696, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 676, column 23 to line 698, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 676, column 6 to line 698, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 675, column 21 to line 700, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 675, column 4 to line 700, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 674, column 19 to line 702, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 674, column 2 to line 702, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 703, column 2 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 710, column 16 to column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 711, column 16 to column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 713, column 18 to column 121)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 712, column 37 to line 715, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 712, column 16 to line 715, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 716, column 16 to column 108)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 710, column 14 to line 717, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 709, column 29 to line 719, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 709, column 12 to line 719, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 708, column 27 to line 721, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 708, column 10 to line 721, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 707, column 25 to line 723, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 707, column 8 to line 723, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 706, column 23 to line 725, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 706, column 6 to line 725, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 705, column 21 to line 727, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 705, column 4 to line 727, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 704, column 19 to line 729, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 704, column 2 to line 729, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 730, column 2 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 736, column 14 to column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 737, column 14 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 739, column 16 to column 108)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 738, column 35 to line 741, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 738, column 14 to line 741, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 742, column 14 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 736, column 12 to line 743, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 735, column 27 to line 745, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 735, column 10 to line 745, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 734, column 25 to line 747, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 734, column 8 to line 747, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 733, column 23 to line 749, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 733, column 6 to line 749, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 732, column 21 to line 751, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 732, column 4 to line 751, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 731, column 19 to line 753, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 731, column 2 to line 753, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 754, column 2 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 759, column 12 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 760, column 12 to column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 762, column 14 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 761, column 33 to line 764, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 761, column 12 to line 764, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 765, column 12 to column 82)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 759, column 10 to line 766, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 758, column 25 to line 768, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 758, column 8 to line 768, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 757, column 23 to line 770, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 757, column 6 to line 770, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 756, column 21 to line 772, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 756, column 4 to line 772, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 755, column 19 to line 774, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 755, column 2 to line 774, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 775, column 2 to column 24)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 779, column 10 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 780, column 10 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 782, column 12 to column 82)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 781, column 31 to line 784, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 781, column 10 to line 784, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 785, column 10 to column 70)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 779, column 8 to line 786, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 778, column 23 to line 788, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 778, column 6 to line 788, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 777, column 21 to line 790, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 777, column 4 to line 790, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 776, column 19 to line 792, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 776, column 2 to line 792, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 793, column 2 to column 24)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 796, column 8 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 797, column 8 to column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 799, column 10 to column 70)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 798, column 29 to line 801, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 798, column 8 to line 801, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 802, column 8 to column 58)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 796, column 6 to line 803, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 795, column 21 to line 805, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 795, column 4 to line 805, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 794, column 19 to line 807, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 794, column 2 to line 807, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 808, column 2 to column 24)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 810, column 6 to column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 811, column 6 to column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 813, column 8 to column 58)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 812, column 27 to line 815, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 812, column 6 to line 815, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 816, column 6 to column 36)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 810, column 4 to line 817, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 809, column 19 to line 819, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 809, column 2 to line 819, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 820, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 821, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 822, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 824, column 6 to column 46)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 823, column 25 to line 826, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 823, column 4 to line 826, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 827, column 4 to column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 821, column 2 to line 828, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 857, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 858, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 859, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 860, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 861, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 862, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 863, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 864, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 865, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 866, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 867, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 868, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 869, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 870, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 871, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 872, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 873, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 874, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 875, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 876, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 877, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 878, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 880, column 6 to column 46)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 879, column 25 to line 882, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 879, column 4 to line 882, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 883, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 877, column 2 to line 884, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 885, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 886, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 888, column 6 to column 56)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 887, column 25 to line 890, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 887, column 4 to line 890, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 891, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 885, column 2 to line 892, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 893, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 894, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 896, column 6 to column 66)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 895, column 25 to line 898, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 895, column 4 to line 898, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 899, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 893, column 2 to line 900, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 901, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 902, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 904, column 6 to column 76)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 903, column 25 to line 906, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 903, column 4 to line 906, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 907, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 901, column 2 to line 908, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 909, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 910, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 912, column 6 to column 87)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 911, column 25 to line 914, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 911, column 4 to line 914, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 915, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 909, column 2 to line 916, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 917, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 918, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 920, column 6 to column 98)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 919, column 25 to line 922, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 919, column 4 to line 922, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 923, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 917, column 2 to line 924, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 925, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 926, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 928, column 6 to column 109)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 927, column 25 to line 930, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 927, column 4 to line 930, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 931, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 925, column 2 to line 932, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 933, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 934, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 936, column 6 to column 121)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 935, column 25 to line 938, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 935, column 4 to line 938, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 939, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 933, column 2 to line 940, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 941, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 942, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 944, column 6 to column 133)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 943, column 25 to line 946, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 943, column 4 to line 946, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 947, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 941, column 2 to line 948, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 949, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 950, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 952, column 6 to column 145)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 951, column 25 to line 954, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 951, column 4 to line 954, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 955, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 949, column 2 to line 956, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 957, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 958, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 960, column 6 to column 157)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 959, column 25 to line 962, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 959, column 4 to line 962, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 963, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 957, column 2 to line 964, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 965, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 966, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 968, column 6 to column 168)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 967, column 24 to line 970, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 967, column 4 to line 970, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 971, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 965, column 2 to line 972, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 973, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 974, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 976, column 6 to column 180)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 975, column 24 to line 978, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 975, column 4 to line 978, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 979, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 973, column 2 to line 980, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 981, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 982, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 984, column 6 to column 192)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 983, column 24 to line 986, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 983, column 4 to line 986, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 987, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 981, column 2 to line 988, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 989, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 990, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 992, column 6 to column 205)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 991, column 24 to line 994, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 991, column 4 to line 994, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 995, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 989, column 2 to line 996, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 997, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 998, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1000, column 6 to column 218)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 999, column 24 to line 1002, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 999, column 4 to line 1002, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1003, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 997, column 2 to line 1004, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1005, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1006, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1008, column 6 to column 231)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1007, column 24 to line 1010, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1007, column 4 to line 1010, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1011, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1005, column 2 to line 1012, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1013, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1014, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1016, column 6 to column 245)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1015, column 24 to line 1018, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1015, column 4 to line 1018, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1019, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1013, column 2 to line 1020, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1021, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1022, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1024, column 6 to column 259)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1023, column 24 to line 1026, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1023, column 4 to line 1026, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1027, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1021, column 2 to line 1028, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1029, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1030, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1032, column 6 to column 59)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1033, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1034, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1035, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1036, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1037, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1038, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1039, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1040, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1041, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1042, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1043, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1044, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1045, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1046, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1047, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1048, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1049, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1050, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1051, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1058, column 8 to column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1059, column 8 to column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1057, column 10 to line 1061, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1053, column 8 to column 48)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1054, column 8 to column 48)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1052, column 173 to line 1056, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1052, column 6 to line 1061, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1031, column 24 to line 1062, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1031, column 4 to line 1062, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1063, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 1029, column 2 to line 1064, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 833, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 834, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 835, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 836, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 837, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 838, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 839, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 840, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 841, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 842, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 843, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 844, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 845, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 846, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 847, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 848, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 849, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 850, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 851, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 852, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 853, column 2 to column 16)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 2, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_20.stan', line 3, column 2 to column 10)"};



class or_20_model final : public model_base_crtp<or_20_model> {

 private:
  double d1;
  double d2; 
  
 
 public:
  ~or_20_model() { }
  
  inline std::string model_name() const final { return "or_20_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.1", "stancflags = "};
  }
  
  
  or_20_model(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "or_20_model_namespace::or_20_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 814;
      context__.validate_dims("data initialization","d1","double",
           std::vector<size_t>{});
      d1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 814;
      d1 = context__.vals_r("d1")[(1 - 1)];
      current_statement__ = 815;
      context__.validate_dims("data initialization","d2","double",
           std::vector<size_t>{});
      d2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 815;
      d2 = context__.vals_r("d2")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 
      1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "or_20_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ prior1;
      prior1 = DUMMY_VAR__;
      
      current_statement__ = 1;
      prior1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior10;
      prior10 = DUMMY_VAR__;
      
      current_statement__ = 2;
      prior10 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior11;
      prior11 = DUMMY_VAR__;
      
      current_statement__ = 3;
      prior11 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior12;
      prior12 = DUMMY_VAR__;
      
      current_statement__ = 4;
      prior12 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior13;
      prior13 = DUMMY_VAR__;
      
      current_statement__ = 5;
      prior13 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior14;
      prior14 = DUMMY_VAR__;
      
      current_statement__ = 6;
      prior14 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior15;
      prior15 = DUMMY_VAR__;
      
      current_statement__ = 7;
      prior15 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior16;
      prior16 = DUMMY_VAR__;
      
      current_statement__ = 8;
      prior16 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior17;
      prior17 = DUMMY_VAR__;
      
      current_statement__ = 9;
      prior17 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior18;
      prior18 = DUMMY_VAR__;
      
      current_statement__ = 10;
      prior18 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior19;
      prior19 = DUMMY_VAR__;
      
      current_statement__ = 11;
      prior19 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior2;
      prior2 = DUMMY_VAR__;
      
      current_statement__ = 12;
      prior2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior20;
      prior20 = DUMMY_VAR__;
      
      current_statement__ = 13;
      prior20 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior3;
      prior3 = DUMMY_VAR__;
      
      current_statement__ = 14;
      prior3 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior4;
      prior4 = DUMMY_VAR__;
      
      current_statement__ = 15;
      prior4 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior5;
      prior5 = DUMMY_VAR__;
      
      current_statement__ = 16;
      prior5 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior6;
      prior6 = DUMMY_VAR__;
      
      current_statement__ = 17;
      prior6 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior7;
      prior7 = DUMMY_VAR__;
      
      current_statement__ = 18;
      prior7 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior8;
      prior8 = DUMMY_VAR__;
      
      current_statement__ = 19;
      prior8 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior9;
      prior9 = DUMMY_VAR__;
      
      current_statement__ = 20;
      prior9 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      std::vector<local_scalar_t__> m1;
      m1 = std::vector<local_scalar_t__>(524288, DUMMY_VAR__);
      
      current_statement__ = 41;
      assign(m1, rep_array(0, 524288), "assigning variable m1");
      current_statement__ = 112;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 110;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 108;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 106;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 104;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 102;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 100;
                  for (int z3 = 1; z3 <= 2; ++z3) {
                    current_statement__ = 98;
                    for (int z20 = 1; z20 <= 2; ++z20) {
                      current_statement__ = 96;
                      for (int z2 = 1; z2 <= 2; ++z2) {
                        current_statement__ = 94;
                        for (int z19 = 1; z19 <= 2; ++z19) {
                          current_statement__ = 92;
                          for (int z18 = 1; z18 <= 2; ++z18) {
                            current_statement__ = 90;
                            for (int z17 = 1; z17 <= 2; ++z17) {
                              current_statement__ = 88;
                              for (int z16 = 1; z16 <= 2; ++z16) {
                                current_statement__ = 86;
                                for (int z15 = 1; z15 <= 2; ++z15) {
                                  current_statement__ = 84;
                                  for (int z14 = 1; z14 <= 2; ++z14) {
                                    current_statement__ = 82;
                                    for (int z13 = 1; z13 <= 2; ++z13) {
                                      current_statement__ = 80;
                                      for (int z12 = 1; z12 <= 2; ++z12) {
                                        current_statement__ = 78;
                                        for (int z11 = 1; z11 <= 2; ++z11) {
                                          current_statement__ = 76;
                                          for (int z10 = 1; z10 <= 2; ++z10) {
                                            {
                                              Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                              acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                              stan::math::fill(acc0, DUMMY_VAR__);
                                              
                                              
                                              current_statement__ = 43;
                                              assign(acc0, rep_vector(0, 2),
                                                "assigning variable acc0");
                                              current_statement__ = 72;
                                              for (int z1_val = 1;
                                                   z1_val <= 2; ++z1_val) {
                                                current_statement__ = 44;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z1_val - 1), prior1)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 45;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z2 - 1), prior2)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 46;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z3 - 1), prior3)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 47;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z4 - 1), prior4)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 48;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z5 - 1), prior5)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 49;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z6 - 1), prior6)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 50;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z7 - 1), prior7)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 51;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z8 - 1), prior8)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 52;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z9 - 1), prior9)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 53;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z10 - 1), prior10)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 54;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z11 - 1), prior11)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 55;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z12 - 1), prior12)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 56;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z13 - 1), prior13)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 57;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z14 - 1), prior14)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 58;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z15 - 1), prior15)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 59;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z16 - 1), prior16)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 60;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z17 - 1), prior17)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 61;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z18 - 1), prior18)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 62;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z19 - 1), prior19)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 63;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z20 - 1), prior20)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 70;
                                                if (logical_gt(
                                                      ((((((((((((((((((((z1_val
                                                                    + z2) +
                                                                    z3) + z4)
                                                                    + z5) +
                                                                    z6) + z7)
                                                                    + z8) +
                                                                    z9) +
                                                                   z10) +
                                                                  z11) + z12)
                                                                + z13) + z14)
                                                              + z15) + z16) +
                                                            z17) + z18) +
                                                          z19) + z20) - 20),
                                                      0)) {
                                                  current_statement__ = 67;
                                                  assign(acc0,
                                                    (rvalue(acc0, "acc0",
                                                       index_uni(z1_val)) +
                                                      normal_lpdf<false>(d1,
                                                        135, 8)),
                                                    "assigning variable acc0", 
                                                    index_uni(z1_val));
                                                  current_statement__ = 68;
                                                  assign(acc0,
                                                    (rvalue(acc0, "acc0",
                                                       index_uni(z1_val)) +
                                                      normal_lpdf<false>(d2,
                                                        135, 8)),
                                                    "assigning variable acc0", 
                                                    index_uni(z1_val));
                                                } else {
                                                  current_statement__ = 64;
                                                  assign(acc0,
                                                    (rvalue(acc0, "acc0",
                                                       index_uni(z1_val)) +
                                                      normal_lpdf<false>(d1,
                                                        80, 8)),
                                                    "assigning variable acc0", 
                                                    index_uni(z1_val));
                                                  current_statement__ = 65;
                                                  assign(acc0,
                                                    (rvalue(acc0, "acc0",
                                                       index_uni(z1_val)) +
                                                      normal_lpdf<false>(d2,
                                                        80, 8)),
                                                    "assigning variable acc0", 
                                                    index_uni(z1_val));
                                                }
                                              }
                                              current_statement__ = 73;
                                              assign(m1,
                                                (rvalue(m1, "m1",
                                                   index_uni((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    262144) +
                                                                    ((z11 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z19 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z2 - 1)
                                                                    * 256)) +
                                                                    ((z20 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                   ((z6 - 1)
                                                                    * 8)) +
                                                                  ((z7 - 1) *
                                                                    4)) +
                                                                 ((z8 - 1) *
                                                                   2)) +
                                                                ((z9 - 1) *
                                                                  1)) + 1)))
                                                  + log_sum_exp(acc0)),
                                                "assigning variable m1", 
                                                index_uni((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    262144) +
                                                                    ((z11 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z19 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z2 - 1)
                                                                    * 256)) +
                                                                    ((z20 -
                                                                    1) * 128))
                                                                   +
                                                                   ((z3 - 1)
                                                                    * 64)) +
                                                                  ((z4 - 1) *
                                                                    32)) +
                                                                 ((z5 - 1) *
                                                                   16)) +
                                                                ((z6 - 1) *
                                                                  8)) +
                                                               ((z7 - 1) * 4))
                                                              +
                                                              ((z8 - 1) * 2))
                                                             +
                                                             ((z9 - 1) * 1))
                                                            + 1)));
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      std::vector<local_scalar_t__> m10;
      m10 = std::vector<local_scalar_t__>(1024, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m11;
      m11 = std::vector<local_scalar_t__>(512, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m12;
      m12 = std::vector<local_scalar_t__>(256, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m13;
      m13 = std::vector<local_scalar_t__>(128, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m14;
      m14 = std::vector<local_scalar_t__>(64, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m15;
      m15 = std::vector<local_scalar_t__>(32, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m16;
      m16 = std::vector<local_scalar_t__>(16, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m17;
      m17 = std::vector<local_scalar_t__>(8, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m18;
      m18 = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m19;
      m19 = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m2;
      m2 = std::vector<local_scalar_t__>(262144, DUMMY_VAR__);
      
      local_scalar_t__ m20;
      m20 = DUMMY_VAR__;
      
      std::vector<local_scalar_t__> m3;
      m3 = std::vector<local_scalar_t__>(131072, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m4;
      m4 = std::vector<local_scalar_t__>(65536, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m5;
      m5 = std::vector<local_scalar_t__>(32768, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m6;
      m6 = std::vector<local_scalar_t__>(16384, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m7;
      m7 = std::vector<local_scalar_t__>(8192, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m8;
      m8 = std::vector<local_scalar_t__>(4096, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m9;
      m9 = std::vector<local_scalar_t__>(2048, DUMMY_VAR__);
      
      current_statement__ = 113;
      assign(m2, rep_array(0, 262144), "assigning variable m2");
      current_statement__ = 156;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 154;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 152;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 150;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 148;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 146;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 144;
                  for (int z3 = 1; z3 <= 2; ++z3) {
                    current_statement__ = 142;
                    for (int z20 = 1; z20 <= 2; ++z20) {
                      current_statement__ = 140;
                      for (int z19 = 1; z19 <= 2; ++z19) {
                        current_statement__ = 138;
                        for (int z18 = 1; z18 <= 2; ++z18) {
                          current_statement__ = 136;
                          for (int z17 = 1; z17 <= 2; ++z17) {
                            current_statement__ = 134;
                            for (int z16 = 1; z16 <= 2; ++z16) {
                              current_statement__ = 132;
                              for (int z15 = 1; z15 <= 2; ++z15) {
                                current_statement__ = 130;
                                for (int z14 = 1; z14 <= 2; ++z14) {
                                  current_statement__ = 128;
                                  for (int z13 = 1; z13 <= 2; ++z13) {
                                    current_statement__ = 126;
                                    for (int z12 = 1; z12 <= 2; ++z12) {
                                      current_statement__ = 124;
                                      for (int z11 = 1; z11 <= 2; ++z11) {
                                        current_statement__ = 122;
                                        for (int z10 = 1; z10 <= 2; ++z10) {
                                          {
                                            Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                            acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                            stan::math::fill(acc0, DUMMY_VAR__);
                                            
                                            
                                            current_statement__ = 115;
                                            assign(acc0, rep_vector(0, 2),
                                              "assigning variable acc0");
                                            current_statement__ = 118;
                                            for (int z2_val = 1; z2_val <= 2;
                                                 ++z2_val) {
                                              current_statement__ = 116;
                                              assign(acc0,
                                                (rvalue(acc0, "acc0",
                                                   index_uni(z2_val)) +
                                                  rvalue(m1, "m1",
                                                    index_uni((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    262144) +
                                                                    ((z11 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z19 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z2_val
                                                                    - 1) *
                                                                    256)) +
                                                                    ((z20 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                   ((z7 - 1)
                                                                    * 4)) +
                                                                  ((z8 - 1) *
                                                                    2)) +
                                                                 ((z9 - 1) *
                                                                   1)) + 1)))),
                                                "assigning variable acc0", 
                                                index_uni(z2_val));
                                            }
                                            current_statement__ = 119;
                                            assign(m2,
                                              (rvalue(m2, "m2",
                                                 index_uni(((((((((((((((((((((z10
                                                                    - 1) *
                                                                    131072) +
                                                                    ((z11 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z18 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                   ((z4 - 1)
                                                                    * 32)) +
                                                                  ((z5 - 1) *
                                                                    16)) +
                                                                 ((z6 - 1) *
                                                                   8)) +
                                                                ((z7 - 1) *
                                                                  4)) +
                                                               ((z8 - 1) * 2))
                                                              +
                                                              ((z9 - 1) * 1))
                                                             + 1))) +
                                                log_sum_exp(acc0)),
                                              "assigning variable m2", 
                                              index_uni(((((((((((((((((((((z10
                                                                    - 1) *
                                                                    131072) +
                                                                    ((z11 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z18 -
                                                                    1) * 512))
                                                                   +
                                                                   ((z19 - 1)
                                                                    * 256)) +
                                                                  ((z20 - 1)
                                                                    * 128)) +
                                                                 ((z3 - 1) *
                                                                   64)) +
                                                                ((z4 - 1) *
                                                                  32)) +
                                                               ((z5 - 1) *
                                                                 16)) +
                                                              ((z6 - 1) * 8))
                                                             +
                                                             ((z7 - 1) * 4))
                                                            + ((z8 - 1) * 2))
                                                           + ((z9 - 1) * 1))
                                                          + 1)));
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 157;
      assign(m3, rep_array(0, 131072), "assigning variable m3");
      current_statement__ = 198;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 196;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 194;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 192;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 190;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 188;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 186;
                  for (int z20 = 1; z20 <= 2; ++z20) {
                    current_statement__ = 184;
                    for (int z19 = 1; z19 <= 2; ++z19) {
                      current_statement__ = 182;
                      for (int z18 = 1; z18 <= 2; ++z18) {
                        current_statement__ = 180;
                        for (int z17 = 1; z17 <= 2; ++z17) {
                          current_statement__ = 178;
                          for (int z16 = 1; z16 <= 2; ++z16) {
                            current_statement__ = 176;
                            for (int z15 = 1; z15 <= 2; ++z15) {
                              current_statement__ = 174;
                              for (int z14 = 1; z14 <= 2; ++z14) {
                                current_statement__ = 172;
                                for (int z13 = 1; z13 <= 2; ++z13) {
                                  current_statement__ = 170;
                                  for (int z12 = 1; z12 <= 2; ++z12) {
                                    current_statement__ = 168;
                                    for (int z11 = 1; z11 <= 2; ++z11) {
                                      current_statement__ = 166;
                                      for (int z10 = 1; z10 <= 2; ++z10) {
                                        {
                                          Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                          acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                          stan::math::fill(acc0, DUMMY_VAR__);
                                          
                                          current_statement__ = 159;
                                          assign(acc0, rep_vector(0, 2),
                                            "assigning variable acc0");
                                          current_statement__ = 162;
                                          for (int z3_val = 1; z3_val <= 2;
                                               ++z3_val) {
                                            current_statement__ = 160;
                                            assign(acc0,
                                              (rvalue(acc0, "acc0",
                                                 index_uni(z3_val)) +
                                                rvalue(m2, "m2",
                                                  index_uni(((((((((((((((((((((z10
                                                                    - 1) *
                                                                    131072) +
                                                                    ((z11 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z18 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3_val
                                                                    - 1) *
                                                                    64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                   ((z5 - 1)
                                                                    * 16)) +
                                                                  ((z6 - 1) *
                                                                    8)) +
                                                                 ((z7 - 1) *
                                                                   4)) +
                                                                ((z8 - 1) *
                                                                  2)) +
                                                               ((z9 - 1) * 1))
                                                              + 1)))),
                                              "assigning variable acc0", 
                                              index_uni(z3_val));
                                          }
                                          current_statement__ = 163;
                                          assign(m3,
                                            (rvalue(m3, "m3",
                                               index_uni((((((((((((((((((((z10
                                                                    - 1) *
                                                                    65536) +
                                                                    ((z11 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z17 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 256))
                                                                   +
                                                                   ((z19 - 1)
                                                                    * 128)) +
                                                                  ((z20 - 1)
                                                                    * 64)) +
                                                                 ((z4 - 1) *
                                                                   32)) +
                                                                ((z5 - 1) *
                                                                  16)) +
                                                               ((z6 - 1) * 8))
                                                              +
                                                              ((z7 - 1) * 4))
                                                             +
                                                             ((z8 - 1) * 2))
                                                            + ((z9 - 1) * 1))
                                                           + 1))) +
                                              log_sum_exp(acc0)),
                                            "assigning variable m3", 
                                            index_uni((((((((((((((((((((z10
                                                                    - 1) *
                                                                    65536) +
                                                                    ((z11 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    2048)) +
                                                                   ((z16 - 1)
                                                                    * 1024))
                                                                  +
                                                                  ((z17 - 1)
                                                                    * 512)) +
                                                                 ((z18 - 1) *
                                                                   256)) +
                                                                ((z19 - 1) *
                                                                  128)) +
                                                               ((z20 - 1) *
                                                                 64)) +
                                                              ((z4 - 1) * 32))
                                                             +
                                                             ((z5 - 1) * 16))
                                                            + ((z6 - 1) * 8))
                                                           + ((z7 - 1) * 4))
                                                          + ((z8 - 1) * 2)) +
                                                         ((z9 - 1) * 1)) + 1)));
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 199;
      assign(m4, rep_array(0, 65536), "assigning variable m4");
      current_statement__ = 238;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 236;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 234;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 232;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 230;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 228;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 226;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 224;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 222;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        current_statement__ = 220;
                        for (int z16 = 1; z16 <= 2; ++z16) {
                          current_statement__ = 218;
                          for (int z15 = 1; z15 <= 2; ++z15) {
                            current_statement__ = 216;
                            for (int z14 = 1; z14 <= 2; ++z14) {
                              current_statement__ = 214;
                              for (int z13 = 1; z13 <= 2; ++z13) {
                                current_statement__ = 212;
                                for (int z12 = 1; z12 <= 2; ++z12) {
                                  current_statement__ = 210;
                                  for (int z11 = 1; z11 <= 2; ++z11) {
                                    current_statement__ = 208;
                                    for (int z10 = 1; z10 <= 2; ++z10) {
                                      {
                                        Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                        acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                        stan::math::fill(acc0, DUMMY_VAR__);
                                        
                                        current_statement__ = 201;
                                        assign(acc0, rep_vector(0, 2),
                                          "assigning variable acc0");
                                        current_statement__ = 204;
                                        for (int z4_val = 1; z4_val <= 2;
                                             ++z4_val) {
                                          current_statement__ = 202;
                                          assign(acc0,
                                            (rvalue(acc0, "acc0",
                                               index_uni(z4_val)) +
                                              rvalue(m3, "m3",
                                                index_uni((((((((((((((((((((z10
                                                                    - 1) *
                                                                    65536) +
                                                                    ((z11 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z17 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 128))
                                                                   +
                                                                   ((z20 - 1)
                                                                    * 64)) +
                                                                  ((z4_val -
                                                                    1) * 32))
                                                                 +
                                                                 ((z5 - 1) *
                                                                   16)) +
                                                                ((z6 - 1) *
                                                                  8)) +
                                                               ((z7 - 1) * 4))
                                                              +
                                                              ((z8 - 1) * 2))
                                                             +
                                                             ((z9 - 1) * 1))
                                                            + 1)))),
                                            "assigning variable acc0", 
                                            index_uni(z4_val));
                                        }
                                        current_statement__ = 205;
                                        assign(m4,
                                          (rvalue(m4, "m4",
                                             index_uni(((((((((((((((((((z10
                                                                    - 1) *
                                                                    32768) +
                                                                    ((z11 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                   ((z16 - 1)
                                                                    * 512)) +
                                                                  ((z17 - 1)
                                                                    * 256)) +
                                                                 ((z18 - 1) *
                                                                   128)) +
                                                                ((z19 - 1) *
                                                                  64)) +
                                                               ((z20 - 1) *
                                                                 32)) +
                                                              ((z5 - 1) * 16))
                                                             +
                                                             ((z6 - 1) * 8))
                                                            + ((z7 - 1) * 4))
                                                           + ((z8 - 1) * 2))
                                                          + ((z9 - 1) * 1)) +
                                                         1))) +
                                            log_sum_exp(acc0)),
                                          "assigning variable m4", index_uni(
                                                                    ((((((((((((((((((z10
                                                                    - 1) *
                                                                    32768) +
                                                                    ((z11 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                    1)));
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 239;
      assign(m5, rep_array(0, 32768), "assigning variable m5");
      current_statement__ = 276;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 274;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 272;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 270;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 268;
              for (int z20 = 1; z20 <= 2; ++z20) {
                current_statement__ = 266;
                for (int z19 = 1; z19 <= 2; ++z19) {
                  current_statement__ = 264;
                  for (int z18 = 1; z18 <= 2; ++z18) {
                    current_statement__ = 262;
                    for (int z17 = 1; z17 <= 2; ++z17) {
                      current_statement__ = 260;
                      for (int z16 = 1; z16 <= 2; ++z16) {
                        current_statement__ = 258;
                        for (int z15 = 1; z15 <= 2; ++z15) {
                          current_statement__ = 256;
                          for (int z14 = 1; z14 <= 2; ++z14) {
                            current_statement__ = 254;
                            for (int z13 = 1; z13 <= 2; ++z13) {
                              current_statement__ = 252;
                              for (int z12 = 1; z12 <= 2; ++z12) {
                                current_statement__ = 250;
                                for (int z11 = 1; z11 <= 2; ++z11) {
                                  current_statement__ = 248;
                                  for (int z10 = 1; z10 <= 2; ++z10) {
                                    {
                                      Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                      acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                      stan::math::fill(acc0, DUMMY_VAR__);
                                      
                                      current_statement__ = 241;
                                      assign(acc0, rep_vector(0, 2),
                                        "assigning variable acc0");
                                      current_statement__ = 244;
                                      for (int z5_val = 1; z5_val <= 2;
                                           ++z5_val) {
                                        current_statement__ = 242;
                                        assign(acc0,
                                          (rvalue(acc0, "acc0",
                                             index_uni(z5_val)) +
                                            rvalue(m4, "m4",
                                              index_uni(((((((((((((((((((z10
                                                                    - 1) *
                                                                    32768) +
                                                                    ((z11 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                   +
                                                                   ((z17 - 1)
                                                                    * 256)) +
                                                                  ((z18 - 1)
                                                                    * 128)) +
                                                                 ((z19 - 1) *
                                                                   64)) +
                                                                ((z20 - 1) *
                                                                  32)) +
                                                               ((z5_val - 1)
                                                                 * 16)) +
                                                              ((z6 - 1) * 8))
                                                             +
                                                             ((z7 - 1) * 4))
                                                            + ((z8 - 1) * 2))
                                                           + ((z9 - 1) * 1))
                                                          + 1)))),
                                          "assigning variable acc0", 
                                          index_uni(z5_val));
                                      }
                                      current_statement__ = 245;
                                      assign(m5,
                                        (rvalue(m5, "m5",
                                           index_uni((((((((((((((((((z10 -
                                                                    1) *
                                                                    16384) +
                                                                    ((z11 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    4096)) +
                                                                   ((z13 - 1)
                                                                    * 2048))
                                                                  +
                                                                  ((z14 - 1)
                                                                    * 1024))
                                                                 +
                                                                 ((z15 - 1) *
                                                                   512)) +
                                                                ((z16 - 1) *
                                                                  256)) +
                                                               ((z17 - 1) *
                                                                 128)) +
                                                              ((z18 - 1) *
                                                                64)) +
                                                             ((z19 - 1) * 32))
                                                            +
                                                            ((z20 - 1) * 16))
                                                           + ((z6 - 1) * 8))
                                                          + ((z7 - 1) * 4)) +
                                                         ((z8 - 1) * 2)) +
                                                        ((z9 - 1) * 1)) + 1)))
                                          + log_sum_exp(acc0)),
                                        "assigning variable m5", index_uni(
                                                                   (((((((((((((((((z10
                                                                    - 1) *
                                                                    16384) +
                                                                    ((z11 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z15 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z16 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                    1)));
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 277;
      assign(m6, rep_array(0, 16384), "assigning variable m6");
      current_statement__ = 312;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 310;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 308;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 306;
            for (int z20 = 1; z20 <= 2; ++z20) {
              current_statement__ = 304;
              for (int z19 = 1; z19 <= 2; ++z19) {
                current_statement__ = 302;
                for (int z18 = 1; z18 <= 2; ++z18) {
                  current_statement__ = 300;
                  for (int z17 = 1; z17 <= 2; ++z17) {
                    current_statement__ = 298;
                    for (int z16 = 1; z16 <= 2; ++z16) {
                      current_statement__ = 296;
                      for (int z15 = 1; z15 <= 2; ++z15) {
                        current_statement__ = 294;
                        for (int z14 = 1; z14 <= 2; ++z14) {
                          current_statement__ = 292;
                          for (int z13 = 1; z13 <= 2; ++z13) {
                            current_statement__ = 290;
                            for (int z12 = 1; z12 <= 2; ++z12) {
                              current_statement__ = 288;
                              for (int z11 = 1; z11 <= 2; ++z11) {
                                current_statement__ = 286;
                                for (int z10 = 1; z10 <= 2; ++z10) {
                                  {
                                    Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                    acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                    stan::math::fill(acc0, DUMMY_VAR__);
                                    
                                    current_statement__ = 279;
                                    assign(acc0, rep_vector(0, 2),
                                      "assigning variable acc0");
                                    current_statement__ = 282;
                                    for (int z6_val = 1; z6_val <= 2;
                                         ++z6_val) {
                                      current_statement__ = 280;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z6_val)) +
                                          rvalue(m5, "m5",
                                            index_uni((((((((((((((((((z10 -
                                                                    1) *
                                                                    16384) +
                                                                    ((z11 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    2048)) +
                                                                   ((z14 - 1)
                                                                    * 1024))
                                                                  +
                                                                  ((z15 - 1)
                                                                    * 512)) +
                                                                 ((z16 - 1) *
                                                                   256)) +
                                                                ((z17 - 1) *
                                                                  128)) +
                                                               ((z18 - 1) *
                                                                 64)) +
                                                              ((z19 - 1) *
                                                                32)) +
                                                             ((z20 - 1) * 16))
                                                            +
                                                            ((z6_val - 1) *
                                                              8)) +
                                                           ((z7 - 1) * 4)) +
                                                          ((z8 - 1) * 2)) +
                                                         ((z9 - 1) * 1)) + 1)))),
                                        "assigning variable acc0", index_uni(z6_val));
                                    }
                                    current_statement__ = 283;
                                    assign(m6,
                                      (rvalue(m6, "m6",
                                         index_uni(((((((((((((((((z10 - 1) *
                                                                   8192) +
                                                                  ((z11 - 1)
                                                                    * 4096))
                                                                 +
                                                                 ((z12 - 1) *
                                                                   2048)) +
                                                                ((z13 - 1) *
                                                                  1024)) +
                                                               ((z14 - 1) *
                                                                 512)) +
                                                              ((z15 - 1) *
                                                                256)) +
                                                             ((z16 - 1) *
                                                               128)) +
                                                            ((z17 - 1) * 64))
                                                           +
                                                           ((z18 - 1) * 32))
                                                          + ((z19 - 1) * 16))
                                                         + ((z20 - 1) * 8)) +
                                                        ((z7 - 1) * 4)) +
                                                       ((z8 - 1) * 2)) +
                                                      ((z9 - 1) * 1)) + 1)))
                                        + log_sum_exp(acc0)),
                                      "assigning variable m6", index_uni(
                                                                 ((((((((((((((((z10
                                                                    - 1) *
                                                                    8192) +
                                                                    ((z11 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z14 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z16 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                   1)));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 313;
      assign(m7, rep_array(0, 8192), "assigning variable m7");
      current_statement__ = 346;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 344;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 342;
          for (int z20 = 1; z20 <= 2; ++z20) {
            current_statement__ = 340;
            for (int z19 = 1; z19 <= 2; ++z19) {
              current_statement__ = 338;
              for (int z18 = 1; z18 <= 2; ++z18) {
                current_statement__ = 336;
                for (int z17 = 1; z17 <= 2; ++z17) {
                  current_statement__ = 334;
                  for (int z16 = 1; z16 <= 2; ++z16) {
                    current_statement__ = 332;
                    for (int z15 = 1; z15 <= 2; ++z15) {
                      current_statement__ = 330;
                      for (int z14 = 1; z14 <= 2; ++z14) {
                        current_statement__ = 328;
                        for (int z13 = 1; z13 <= 2; ++z13) {
                          current_statement__ = 326;
                          for (int z12 = 1; z12 <= 2; ++z12) {
                            current_statement__ = 324;
                            for (int z11 = 1; z11 <= 2; ++z11) {
                              current_statement__ = 322;
                              for (int z10 = 1; z10 <= 2; ++z10) {
                                {
                                  Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                  acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                  stan::math::fill(acc0, DUMMY_VAR__);
                                  
                                  current_statement__ = 315;
                                  assign(acc0, rep_vector(0, 2),
                                    "assigning variable acc0");
                                  current_statement__ = 318;
                                  for (int z7_val = 1; z7_val <= 2; ++z7_val) {
                                    current_statement__ = 316;
                                    assign(acc0,
                                      (rvalue(acc0, "acc0",
                                         index_uni(z7_val)) +
                                        rvalue(m6, "m6",
                                          index_uni(((((((((((((((((z10 - 1)
                                                                    * 8192) +
                                                                   ((z11 - 1)
                                                                    * 4096))
                                                                  +
                                                                  ((z12 - 1)
                                                                    * 2048))
                                                                 +
                                                                 ((z13 - 1) *
                                                                   1024)) +
                                                                ((z14 - 1) *
                                                                  512)) +
                                                               ((z15 - 1) *
                                                                 256)) +
                                                              ((z16 - 1) *
                                                                128)) +
                                                             ((z17 - 1) * 64))
                                                            +
                                                            ((z18 - 1) * 32))
                                                           +
                                                           ((z19 - 1) * 16))
                                                          + ((z20 - 1) * 8))
                                                         +
                                                         ((z7_val - 1) * 4))
                                                        + ((z8 - 1) * 2)) +
                                                       ((z9 - 1) * 1)) + 1)))),
                                      "assigning variable acc0", index_uni(z7_val));
                                  }
                                  current_statement__ = 319;
                                  assign(m7,
                                    (rvalue(m7, "m7",
                                       index_uni((((((((((((((((z10 - 1) *
                                                                4096) +
                                                               ((z11 - 1) *
                                                                 2048)) +
                                                              ((z12 - 1) *
                                                                1024)) +
                                                             ((z13 - 1) *
                                                               512)) +
                                                            ((z14 - 1) * 256))
                                                           +
                                                           ((z15 - 1) * 128))
                                                          + ((z16 - 1) * 64))
                                                         + ((z17 - 1) * 32))
                                                        + ((z18 - 1) * 16)) +
                                                       ((z19 - 1) * 8)) +
                                                      ((z20 - 1) * 4)) +
                                                     ((z8 - 1) * 2)) +
                                                    ((z9 - 1) * 1)) + 1))) +
                                      log_sum_exp(acc0)),
                                    "assigning variable m7", index_uni(
                                                               (((((((((((((((z10
                                                                    - 1) *
                                                                    4096) +
                                                                    ((z11 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z13 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z16 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 4))
                                                                   +
                                                                   ((z8 - 1)
                                                                    * 2)) +
                                                                  ((z9 - 1) *
                                                                    1)) + 1)));
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 347;
      assign(m8, rep_array(0, 4096), "assigning variable m8");
      current_statement__ = 378;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 376;
        for (int z20 = 1; z20 <= 2; ++z20) {
          current_statement__ = 374;
          for (int z19 = 1; z19 <= 2; ++z19) {
            current_statement__ = 372;
            for (int z18 = 1; z18 <= 2; ++z18) {
              current_statement__ = 370;
              for (int z17 = 1; z17 <= 2; ++z17) {
                current_statement__ = 368;
                for (int z16 = 1; z16 <= 2; ++z16) {
                  current_statement__ = 366;
                  for (int z15 = 1; z15 <= 2; ++z15) {
                    current_statement__ = 364;
                    for (int z14 = 1; z14 <= 2; ++z14) {
                      current_statement__ = 362;
                      for (int z13 = 1; z13 <= 2; ++z13) {
                        current_statement__ = 360;
                        for (int z12 = 1; z12 <= 2; ++z12) {
                          current_statement__ = 358;
                          for (int z11 = 1; z11 <= 2; ++z11) {
                            current_statement__ = 356;
                            for (int z10 = 1; z10 <= 2; ++z10) {
                              {
                                Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                stan::math::fill(acc0, DUMMY_VAR__);
                                
                                current_statement__ = 349;
                                assign(acc0, rep_vector(0, 2),
                                  "assigning variable acc0");
                                current_statement__ = 352;
                                for (int z8_val = 1; z8_val <= 2; ++z8_val) {
                                  current_statement__ = 350;
                                  assign(acc0,
                                    (rvalue(acc0, "acc0", index_uni(z8_val))
                                      +
                                      rvalue(m7, "m7",
                                        index_uni((((((((((((((((z10 - 1) *
                                                                 4096) +
                                                                ((z11 - 1) *
                                                                  2048)) +
                                                               ((z12 - 1) *
                                                                 1024)) +
                                                              ((z13 - 1) *
                                                                512)) +
                                                             ((z14 - 1) *
                                                               256)) +
                                                            ((z15 - 1) * 128))
                                                           +
                                                           ((z16 - 1) * 64))
                                                          + ((z17 - 1) * 32))
                                                         + ((z18 - 1) * 16))
                                                        + ((z19 - 1) * 8)) +
                                                       ((z20 - 1) * 4)) +
                                                      ((z8_val - 1) * 2)) +
                                                     ((z9 - 1) * 1)) + 1)))),
                                    "assigning variable acc0", index_uni(z8_val));
                                }
                                current_statement__ = 353;
                                assign(m8,
                                  (rvalue(m8, "m8",
                                     index_uni(((((((((((((((z10 - 1) * 2048)
                                                            +
                                                            ((z11 - 1) *
                                                              1024)) +
                                                           ((z12 - 1) * 512))
                                                          +
                                                          ((z13 - 1) * 256))
                                                         + ((z14 - 1) * 128))
                                                        + ((z15 - 1) * 64)) +
                                                       ((z16 - 1) * 32)) +
                                                      ((z17 - 1) * 16)) +
                                                     ((z18 - 1) * 8)) +
                                                    ((z19 - 1) * 4)) +
                                                   ((z20 - 1) * 2)) +
                                                  ((z9 - 1) * 1)) + 1))) +
                                    log_sum_exp(acc0)),
                                  "assigning variable m8", index_uni(
                                                             ((((((((((((((z10
                                                                    - 1) *
                                                                    2048) +
                                                                    ((z11 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z12 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z13 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z16 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 16))
                                                                   +
                                                                   ((z18 - 1)
                                                                    * 8)) +
                                                                  ((z19 - 1)
                                                                    * 4)) +
                                                                 ((z20 - 1) *
                                                                   2)) +
                                                                ((z9 - 1) *
                                                                  1)) + 1)));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 379;
      assign(m9, rep_array(0, 2048), "assigning variable m9");
      current_statement__ = 408;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 406;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 404;
          for (int z18 = 1; z18 <= 2; ++z18) {
            current_statement__ = 402;
            for (int z17 = 1; z17 <= 2; ++z17) {
              current_statement__ = 400;
              for (int z16 = 1; z16 <= 2; ++z16) {
                current_statement__ = 398;
                for (int z15 = 1; z15 <= 2; ++z15) {
                  current_statement__ = 396;
                  for (int z14 = 1; z14 <= 2; ++z14) {
                    current_statement__ = 394;
                    for (int z13 = 1; z13 <= 2; ++z13) {
                      current_statement__ = 392;
                      for (int z12 = 1; z12 <= 2; ++z12) {
                        current_statement__ = 390;
                        for (int z11 = 1; z11 <= 2; ++z11) {
                          current_statement__ = 388;
                          for (int z10 = 1; z10 <= 2; ++z10) {
                            {
                              Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                              acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                              stan::math::fill(acc0, DUMMY_VAR__);
                              
                              current_statement__ = 381;
                              assign(acc0, rep_vector(0, 2),
                                "assigning variable acc0");
                              current_statement__ = 384;
                              for (int z9_val = 1; z9_val <= 2; ++z9_val) {
                                current_statement__ = 382;
                                assign(acc0,
                                  (rvalue(acc0, "acc0", index_uni(z9_val)) +
                                    rvalue(m8, "m8",
                                      index_uni(((((((((((((((z10 - 1) *
                                                              2048) +
                                                             ((z11 - 1) *
                                                               1024)) +
                                                            ((z12 - 1) * 512))
                                                           +
                                                           ((z13 - 1) * 256))
                                                          +
                                                          ((z14 - 1) * 128))
                                                         + ((z15 - 1) * 64))
                                                        + ((z16 - 1) * 32)) +
                                                       ((z17 - 1) * 16)) +
                                                      ((z18 - 1) * 8)) +
                                                     ((z19 - 1) * 4)) +
                                                    ((z20 - 1) * 2)) +
                                                   ((z9_val - 1) * 1)) + 1)))),
                                  "assigning variable acc0", index_uni(z9_val));
                              }
                              current_statement__ = 385;
                              assign(m9,
                                (rvalue(m9, "m9",
                                   index_uni((((((((((((((z10 - 1) * 1024) +
                                                         ((z11 - 1) * 512)) +
                                                        ((z12 - 1) * 256)) +
                                                       ((z13 - 1) * 128)) +
                                                      ((z14 - 1) * 64)) +
                                                     ((z15 - 1) * 32)) +
                                                    ((z16 - 1) * 16)) +
                                                   ((z17 - 1) * 8)) +
                                                  ((z18 - 1) * 4)) +
                                                 ((z19 - 1) * 2)) +
                                                ((z20 - 1) * 1)) + 1))) +
                                  log_sum_exp(acc0)),
                                "assigning variable m9", index_uni((((((((((((((z10
                                                                    - 1) *
                                                                    1024) +
                                                                    ((z11 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z12 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z13 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z16 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 2))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 1))
                                                                    + 1)));
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 409;
      assign(m10, rep_array(0, 1024), "assigning variable m10");
      current_statement__ = 436;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 434;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 432;
          for (int z18 = 1; z18 <= 2; ++z18) {
            current_statement__ = 430;
            for (int z17 = 1; z17 <= 2; ++z17) {
              current_statement__ = 428;
              for (int z16 = 1; z16 <= 2; ++z16) {
                current_statement__ = 426;
                for (int z15 = 1; z15 <= 2; ++z15) {
                  current_statement__ = 424;
                  for (int z14 = 1; z14 <= 2; ++z14) {
                    current_statement__ = 422;
                    for (int z13 = 1; z13 <= 2; ++z13) {
                      current_statement__ = 420;
                      for (int z12 = 1; z12 <= 2; ++z12) {
                        current_statement__ = 418;
                        for (int z11 = 1; z11 <= 2; ++z11) {
                          {
                            Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                            acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                            stan::math::fill(acc0, DUMMY_VAR__);
                            
                            current_statement__ = 411;
                            assign(acc0, rep_vector(0, 2),
                              "assigning variable acc0");
                            current_statement__ = 414;
                            for (int z10_val = 1; z10_val <= 2; ++z10_val) {
                              current_statement__ = 412;
                              assign(acc0,
                                (rvalue(acc0, "acc0", index_uni(z10_val)) +
                                  rvalue(m9, "m9",
                                    index_uni((((((((((((((z10_val - 1) *
                                                           1024) +
                                                          ((z11 - 1) * 512))
                                                         + ((z12 - 1) * 256))
                                                        + ((z13 - 1) * 128))
                                                       + ((z14 - 1) * 64)) +
                                                      ((z15 - 1) * 32)) +
                                                     ((z16 - 1) * 16)) +
                                                    ((z17 - 1) * 8)) +
                                                   ((z18 - 1) * 4)) +
                                                  ((z19 - 1) * 2)) +
                                                 ((z20 - 1) * 1)) + 1)))),
                                "assigning variable acc0", index_uni(z10_val));
                            }
                            current_statement__ = 415;
                            assign(m10,
                              (rvalue(m10, "m10",
                                 index_uni(((((((((((((z11 - 1) * 512) +
                                                      ((z12 - 1) * 256)) +
                                                     ((z13 - 1) * 128)) +
                                                    ((z14 - 1) * 64)) +
                                                   ((z15 - 1) * 32)) +
                                                  ((z16 - 1) * 16)) +
                                                 ((z17 - 1) * 8)) +
                                                ((z18 - 1) * 4)) +
                                               ((z19 - 1) * 2)) +
                                              ((z20 - 1) * 1)) + 1))) +
                                log_sum_exp(acc0)),
                              "assigning variable m10", index_uni(((((((((((((z11
                                                                    - 1) *
                                                                    512) +
                                                                    ((z12 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z13 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z16 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 2))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 1))
                                                                    + 1)));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 437;
      assign(m11, rep_array(0, 512), "assigning variable m11");
      current_statement__ = 462;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 460;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 458;
          for (int z18 = 1; z18 <= 2; ++z18) {
            current_statement__ = 456;
            for (int z17 = 1; z17 <= 2; ++z17) {
              current_statement__ = 454;
              for (int z16 = 1; z16 <= 2; ++z16) {
                current_statement__ = 452;
                for (int z15 = 1; z15 <= 2; ++z15) {
                  current_statement__ = 450;
                  for (int z14 = 1; z14 <= 2; ++z14) {
                    current_statement__ = 448;
                    for (int z13 = 1; z13 <= 2; ++z13) {
                      current_statement__ = 446;
                      for (int z12 = 1; z12 <= 2; ++z12) {
                        {
                          Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                          acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                          stan::math::fill(acc0, DUMMY_VAR__);
                          
                          current_statement__ = 439;
                          assign(acc0, rep_vector(0, 2),
                            "assigning variable acc0");
                          current_statement__ = 442;
                          for (int z11_val = 1; z11_val <= 2; ++z11_val) {
                            current_statement__ = 440;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z11_val)) +
                                rvalue(m10, "m10",
                                  index_uni(((((((((((((z11_val - 1) * 512) +
                                                       ((z12 - 1) * 256)) +
                                                      ((z13 - 1) * 128)) +
                                                     ((z14 - 1) * 64)) +
                                                    ((z15 - 1) * 32)) +
                                                   ((z16 - 1) * 16)) +
                                                  ((z17 - 1) * 8)) +
                                                 ((z18 - 1) * 4)) +
                                                ((z19 - 1) * 2)) +
                                               ((z20 - 1) * 1)) + 1)))),
                              "assigning variable acc0", index_uni(z11_val));
                          }
                          current_statement__ = 443;
                          assign(m11,
                            (rvalue(m11, "m11",
                               index_uni((((((((((((z12 - 1) * 256) +
                                                   ((z13 - 1) * 128)) +
                                                  ((z14 - 1) * 64)) +
                                                 ((z15 - 1) * 32)) +
                                                ((z16 - 1) * 16)) +
                                               ((z17 - 1) * 8)) +
                                              ((z18 - 1) * 4)) +
                                             ((z19 - 1) * 2)) +
                                            ((z20 - 1) * 1)) + 1))) +
                              log_sum_exp(acc0)),
                            "assigning variable m11", index_uni((((((((((((z12
                                                                    - 1) *
                                                                    256) +
                                                                    ((z13 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z16 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 2))
                                                                   +
                                                                   ((z20 - 1)
                                                                    * 1)) +
                                                                  1)));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 463;
      assign(m12, rep_array(0, 256), "assigning variable m12");
      current_statement__ = 486;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 484;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 482;
          for (int z18 = 1; z18 <= 2; ++z18) {
            current_statement__ = 480;
            for (int z17 = 1; z17 <= 2; ++z17) {
              current_statement__ = 478;
              for (int z16 = 1; z16 <= 2; ++z16) {
                current_statement__ = 476;
                for (int z15 = 1; z15 <= 2; ++z15) {
                  current_statement__ = 474;
                  for (int z14 = 1; z14 <= 2; ++z14) {
                    current_statement__ = 472;
                    for (int z13 = 1; z13 <= 2; ++z13) {
                      {
                        Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                        acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                        stan::math::fill(acc0, DUMMY_VAR__);
                        
                        current_statement__ = 465;
                        assign(acc0, rep_vector(0, 2),
                          "assigning variable acc0");
                        current_statement__ = 468;
                        for (int z12_val = 1; z12_val <= 2; ++z12_val) {
                          current_statement__ = 466;
                          assign(acc0,
                            (rvalue(acc0, "acc0", index_uni(z12_val)) +
                              rvalue(m11, "m11",
                                index_uni((((((((((((z12_val - 1) * 256) +
                                                    ((z13 - 1) * 128)) +
                                                   ((z14 - 1) * 64)) +
                                                  ((z15 - 1) * 32)) +
                                                 ((z16 - 1) * 16)) +
                                                ((z17 - 1) * 8)) +
                                               ((z18 - 1) * 4)) +
                                              ((z19 - 1) * 2)) +
                                             ((z20 - 1) * 1)) + 1)))),
                            "assigning variable acc0", index_uni(z12_val));
                        }
                        current_statement__ = 469;
                        assign(m12,
                          (rvalue(m12, "m12",
                             index_uni(((((((((((z13 - 1) * 128) +
                                                ((z14 - 1) * 64)) +
                                               ((z15 - 1) * 32)) +
                                              ((z16 - 1) * 16)) +
                                             ((z17 - 1) * 8)) +
                                            ((z18 - 1) * 4)) +
                                           ((z19 - 1) * 2)) +
                                          ((z20 - 1) * 1)) + 1))) +
                            log_sum_exp(acc0)),
                          "assigning variable m12", index_uni(((((((((((z13 -
                                                                    1) * 128)
                                                                    +
                                                                    ((z14 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z16 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 8))
                                                                   +
                                                                   ((z18 - 1)
                                                                    * 4)) +
                                                                  ((z19 - 1)
                                                                    * 2)) +
                                                                 ((z20 - 1) *
                                                                   1)) + 1)));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 487;
      assign(m13, rep_array(0, 128), "assigning variable m13");
      current_statement__ = 508;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 506;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 504;
          for (int z18 = 1; z18 <= 2; ++z18) {
            current_statement__ = 502;
            for (int z17 = 1; z17 <= 2; ++z17) {
              current_statement__ = 500;
              for (int z16 = 1; z16 <= 2; ++z16) {
                current_statement__ = 498;
                for (int z15 = 1; z15 <= 2; ++z15) {
                  current_statement__ = 496;
                  for (int z14 = 1; z14 <= 2; ++z14) {
                    {
                      Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                      acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                      stan::math::fill(acc0, DUMMY_VAR__);
                      
                      current_statement__ = 489;
                      assign(acc0, rep_vector(0, 2),
                        "assigning variable acc0");
                      current_statement__ = 492;
                      for (int z13_val = 1; z13_val <= 2; ++z13_val) {
                        current_statement__ = 490;
                        assign(acc0,
                          (rvalue(acc0, "acc0", index_uni(z13_val)) +
                            rvalue(m12, "m12",
                              index_uni(((((((((((z13_val - 1) * 128) +
                                                 ((z14 - 1) * 64)) +
                                                ((z15 - 1) * 32)) +
                                               ((z16 - 1) * 16)) +
                                              ((z17 - 1) * 8)) +
                                             ((z18 - 1) * 4)) +
                                            ((z19 - 1) * 2)) +
                                           ((z20 - 1) * 1)) + 1)))),
                          "assigning variable acc0", index_uni(z13_val));
                      }
                      current_statement__ = 493;
                      assign(m13,
                        (rvalue(m13, "m13",
                           index_uni((((((((((z14 - 1) * 64) +
                                             ((z15 - 1) * 32)) +
                                            ((z16 - 1) * 16)) +
                                           ((z17 - 1) * 8)) +
                                          ((z18 - 1) * 4)) + ((z19 - 1) * 2))
                                        + ((z20 - 1) * 1)) + 1))) +
                          log_sum_exp(acc0)),
                        "assigning variable m13", index_uni((((((((((z14 - 1)
                                                                    * 64) +
                                                                    ((z15 -
                                                                    1) * 32))
                                                                   +
                                                                   ((z16 - 1)
                                                                    * 16)) +
                                                                  ((z17 - 1)
                                                                    * 8)) +
                                                                 ((z18 - 1) *
                                                                   4)) +
                                                                ((z19 - 1) *
                                                                  2)) +
                                                               ((z20 - 1) *
                                                                 1)) + 1)));
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 509;
      assign(m14, rep_array(0, 64), "assigning variable m14");
      current_statement__ = 528;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 526;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 524;
          for (int z18 = 1; z18 <= 2; ++z18) {
            current_statement__ = 522;
            for (int z17 = 1; z17 <= 2; ++z17) {
              current_statement__ = 520;
              for (int z16 = 1; z16 <= 2; ++z16) {
                current_statement__ = 518;
                for (int z15 = 1; z15 <= 2; ++z15) {
                  {
                    Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                    acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                    stan::math::fill(acc0, DUMMY_VAR__);
                    
                    current_statement__ = 511;
                    assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                    current_statement__ = 514;
                    for (int z14_val = 1; z14_val <= 2; ++z14_val) {
                      current_statement__ = 512;
                      assign(acc0,
                        (rvalue(acc0, "acc0", index_uni(z14_val)) +
                          rvalue(m13, "m13",
                            index_uni((((((((((z14_val - 1) * 64) +
                                              ((z15 - 1) * 32)) +
                                             ((z16 - 1) * 16)) +
                                            ((z17 - 1) * 8)) +
                                           ((z18 - 1) * 4)) +
                                          ((z19 - 1) * 2)) + ((z20 - 1) * 1))
                                        + 1)))),
                        "assigning variable acc0", index_uni(z14_val));
                    }
                    current_statement__ = 515;
                    assign(m14,
                      (rvalue(m14, "m14",
                         index_uni(((((((((z15 - 1) * 32) + ((z16 - 1) * 16))
                                         + ((z17 - 1) * 8)) +
                                        ((z18 - 1) * 4)) + ((z19 - 1) * 2)) +
                                      ((z20 - 1) * 1)) + 1))) +
                        log_sum_exp(acc0)),
                      "assigning variable m14", index_uni(((((((((z15 - 1) *
                                                                  32) +
                                                                 ((z16 - 1) *
                                                                   16)) +
                                                                ((z17 - 1) *
                                                                  8)) +
                                                               ((z18 - 1) *
                                                                 4)) +
                                                              ((z19 - 1) * 2))
                                                             +
                                                             ((z20 - 1) * 1))
                                                            + 1)));
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 529;
      assign(m15, rep_array(0, 32), "assigning variable m15");
      current_statement__ = 546;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 544;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 542;
          for (int z18 = 1; z18 <= 2; ++z18) {
            current_statement__ = 540;
            for (int z17 = 1; z17 <= 2; ++z17) {
              current_statement__ = 538;
              for (int z16 = 1; z16 <= 2; ++z16) {
                {
                  Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                  acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                  stan::math::fill(acc0, DUMMY_VAR__);
                  
                  current_statement__ = 531;
                  assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                  current_statement__ = 534;
                  for (int z15_val = 1; z15_val <= 2; ++z15_val) {
                    current_statement__ = 532;
                    assign(acc0,
                      (rvalue(acc0, "acc0", index_uni(z15_val)) +
                        rvalue(m14, "m14",
                          index_uni(((((((((z15_val - 1) * 32) +
                                           ((z16 - 1) * 16)) +
                                          ((z17 - 1) * 8)) + ((z18 - 1) * 4))
                                        + ((z19 - 1) * 2)) + ((z20 - 1) * 1))
                                      + 1)))),
                      "assigning variable acc0", index_uni(z15_val));
                  }
                  current_statement__ = 535;
                  assign(m15,
                    (rvalue(m15, "m15",
                       index_uni((((((((z16 - 1) * 16) + ((z17 - 1) * 8)) +
                                      ((z18 - 1) * 4)) + ((z19 - 1) * 2)) +
                                    ((z20 - 1) * 1)) + 1))) +
                      log_sum_exp(acc0)),
                    "assigning variable m15", index_uni((((((((z16 - 1) * 16)
                                                              +
                                                              ((z17 - 1) * 8))
                                                             +
                                                             ((z18 - 1) * 4))
                                                            +
                                                            ((z19 - 1) * 2))
                                                           + ((z20 - 1) * 1))
                                                          + 1)));
                }
              }
            }
          }
        }
      }
      current_statement__ = 547;
      assign(m16, rep_array(0, 16), "assigning variable m16");
      current_statement__ = 562;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 560;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 558;
          for (int z18 = 1; z18 <= 2; ++z18) {
            current_statement__ = 556;
            for (int z17 = 1; z17 <= 2; ++z17) {
              {
                Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                stan::math::fill(acc0, DUMMY_VAR__);
                
                current_statement__ = 549;
                assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                current_statement__ = 552;
                for (int z16_val = 1; z16_val <= 2; ++z16_val) {
                  current_statement__ = 550;
                  assign(acc0,
                    (rvalue(acc0, "acc0", index_uni(z16_val)) +
                      rvalue(m15, "m15",
                        index_uni((((((((z16_val - 1) * 16) +
                                        ((z17 - 1) * 8)) + ((z18 - 1) * 4)) +
                                      ((z19 - 1) * 2)) + ((z20 - 1) * 1)) +
                                    1)))),
                    "assigning variable acc0", index_uni(z16_val));
                }
                current_statement__ = 553;
                assign(m16,
                  (rvalue(m16, "m16",
                     index_uni(((((((z17 - 1) * 8) + ((z18 - 1) * 4)) +
                                   ((z19 - 1) * 2)) + ((z20 - 1) * 1)) + 1)))
                    + log_sum_exp(acc0)),
                  "assigning variable m16", index_uni(((((((z17 - 1) * 8) +
                                                           ((z18 - 1) * 4)) +
                                                          ((z19 - 1) * 2)) +
                                                         ((z20 - 1) * 1)) +
                                                        1)));
              }
            }
          }
        }
      }
      current_statement__ = 563;
      assign(m17, rep_array(0, 8), "assigning variable m17");
      current_statement__ = 576;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 574;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 572;
          for (int z18 = 1; z18 <= 2; ++z18) {
            {
              Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
              acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
              stan::math::fill(acc0, DUMMY_VAR__);
              
              current_statement__ = 565;
              assign(acc0, rep_vector(0, 2), "assigning variable acc0");
              current_statement__ = 568;
              for (int z17_val = 1; z17_val <= 2; ++z17_val) {
                current_statement__ = 566;
                assign(acc0,
                  (rvalue(acc0, "acc0", index_uni(z17_val)) +
                    rvalue(m16, "m16",
                      index_uni(((((((z17_val - 1) * 8) + ((z18 - 1) * 4)) +
                                    ((z19 - 1) * 2)) + ((z20 - 1) * 1)) + 1)))),
                  "assigning variable acc0", index_uni(z17_val));
              }
              current_statement__ = 569;
              assign(m17,
                (rvalue(m17, "m17",
                   index_uni((((((z18 - 1) * 4) + ((z19 - 1) * 2)) +
                                ((z20 - 1) * 1)) + 1))) + log_sum_exp(acc0)),
                "assigning variable m17", index_uni((((((z18 - 1) * 4) +
                                                        ((z19 - 1) * 2)) +
                                                       ((z20 - 1) * 1)) + 1)));
            }
          }
        }
      }
      current_statement__ = 577;
      assign(m18, rep_array(0, 4), "assigning variable m18");
      current_statement__ = 588;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 586;
        for (int z19 = 1; z19 <= 2; ++z19) {
          {
            Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
            acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
            stan::math::fill(acc0, DUMMY_VAR__);
            
            current_statement__ = 579;
            assign(acc0, rep_vector(0, 2), "assigning variable acc0");
            current_statement__ = 582;
            for (int z18_val = 1; z18_val <= 2; ++z18_val) {
              current_statement__ = 580;
              assign(acc0,
                (rvalue(acc0, "acc0", index_uni(z18_val)) +
                  rvalue(m17, "m17",
                    index_uni((((((z18_val - 1) * 4) + ((z19 - 1) * 2)) +
                                 ((z20 - 1) * 1)) + 1)))),
                "assigning variable acc0", index_uni(z18_val));
            }
            current_statement__ = 583;
            assign(m18,
              (rvalue(m18, "m18",
                 index_uni(((((z19 - 1) * 2) + ((z20 - 1) * 1)) + 1))) +
                log_sum_exp(acc0)),
              "assigning variable m18", index_uni(((((z19 - 1) * 2) +
                                                     ((z20 - 1) * 1)) + 1)));
          }
        }
      }
      current_statement__ = 589;
      assign(m19, rep_array(0, 2), "assigning variable m19");
      current_statement__ = 598;
      for (int z20 = 1; z20 <= 2; ++z20) {
        {
          Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
          acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
          stan::math::fill(acc0, DUMMY_VAR__);
          
          current_statement__ = 591;
          assign(acc0, rep_vector(0, 2), "assigning variable acc0");
          current_statement__ = 594;
          for (int z19_val = 1; z19_val <= 2; ++z19_val) {
            current_statement__ = 592;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z19_val)) +
                rvalue(m18, "m18",
                  index_uni(((((z19_val - 1) * 2) + ((z20 - 1) * 1)) + 1)))),
              "assigning variable acc0", index_uni(z19_val));
          }
          current_statement__ = 595;
          assign(m19,
            (rvalue(m19, "m19", index_uni(z20)) + log_sum_exp(acc0)),
            "assigning variable m19", index_uni(z20));
        }
      }
      current_statement__ = 599;
      m20 = 0;
      {
        Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
        acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
        stan::math::fill(acc0, DUMMY_VAR__);
        
        current_statement__ = 601;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 604;
        for (int z20_val = 1; z20_val <= 2; ++z20_val) {
          current_statement__ = 602;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z20_val)) +
              rvalue(m19, "m19", index_uni((((z20_val - 1) * 1) + 1)))),
            "assigning variable acc0", index_uni(z20_val));
        }
        current_statement__ = 605;
        m20 = (m20 + log_sum_exp(acc0));
      }
      {
        current_statement__ = 793;
        lp_accum__.add(beta_lpdf<propto__>(prior1, 1, 1));
        current_statement__ = 794;
        lp_accum__.add(beta_lpdf<propto__>(prior2, 1, 1));
        current_statement__ = 795;
        lp_accum__.add(beta_lpdf<propto__>(prior3, 1, 1));
        current_statement__ = 796;
        lp_accum__.add(beta_lpdf<propto__>(prior4, 1, 1));
        current_statement__ = 797;
        lp_accum__.add(beta_lpdf<propto__>(prior5, 1, 1));
        current_statement__ = 798;
        lp_accum__.add(beta_lpdf<propto__>(prior6, 1, 1));
        current_statement__ = 799;
        lp_accum__.add(beta_lpdf<propto__>(prior7, 1, 1));
        current_statement__ = 800;
        lp_accum__.add(beta_lpdf<propto__>(prior8, 1, 1));
        current_statement__ = 801;
        lp_accum__.add(beta_lpdf<propto__>(prior9, 1, 1));
        current_statement__ = 802;
        lp_accum__.add(beta_lpdf<propto__>(prior10, 1, 1));
        current_statement__ = 803;
        lp_accum__.add(beta_lpdf<propto__>(prior11, 1, 1));
        current_statement__ = 804;
        lp_accum__.add(beta_lpdf<propto__>(prior12, 1, 1));
        current_statement__ = 805;
        lp_accum__.add(beta_lpdf<propto__>(prior13, 1, 1));
        current_statement__ = 806;
        lp_accum__.add(beta_lpdf<propto__>(prior14, 1, 1));
        current_statement__ = 807;
        lp_accum__.add(beta_lpdf<propto__>(prior15, 1, 1));
        current_statement__ = 808;
        lp_accum__.add(beta_lpdf<propto__>(prior16, 1, 1));
        current_statement__ = 809;
        lp_accum__.add(beta_lpdf<propto__>(prior17, 1, 1));
        current_statement__ = 810;
        lp_accum__.add(beta_lpdf<propto__>(prior18, 1, 1));
        current_statement__ = 811;
        lp_accum__.add(beta_lpdf<propto__>(prior19, 1, 1));
        current_statement__ = 812;
        lp_accum__.add(beta_lpdf<propto__>(prior20, 1, 1));
        current_statement__ = 813;
        lp_accum__.add(m20);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "or_20_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double prior1;
      prior1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      prior1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior10;
      prior10 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      prior10 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior11;
      prior11 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      prior11 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior12;
      prior12 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      prior12 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior13;
      prior13 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      prior13 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior14;
      prior14 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      prior14 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior15;
      prior15 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      prior15 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior16;
      prior16 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      prior16 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior17;
      prior17 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      prior17 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior18;
      prior18 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      prior18 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior19;
      prior19 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      prior19 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior2;
      prior2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      prior2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior20;
      prior20 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      prior20 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior3;
      prior3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      prior3 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior4;
      prior4 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      prior4 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior5;
      prior5 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      prior5 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior6;
      prior6 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      prior6 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior7;
      prior7 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 18;
      prior7 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior8;
      prior8 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 19;
      prior8 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior9;
      prior9 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 20;
      prior9 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      std::vector<double> m1;
      m1 = std::vector<double>(524288, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m10;
      m10 = std::vector<double>(1024, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m11;
      m11 = std::vector<double>(512, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m12;
      m12 = std::vector<double>(256, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m13;
      m13 = std::vector<double>(128, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m14;
      m14 = std::vector<double>(64, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m15;
      m15 = std::vector<double>(32, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m16;
      m16 = std::vector<double>(16, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m17;
      m17 = std::vector<double>(8, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m18;
      m18 = std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m19;
      m19 = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m2;
      m2 = std::vector<double>(262144, std::numeric_limits<double>::quiet_NaN());
      
      
      double m20;
      m20 = std::numeric_limits<double>::quiet_NaN();
      
      std::vector<double> m3;
      m3 = std::vector<double>(131072, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m4;
      m4 = std::vector<double>(65536, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m5;
      m5 = std::vector<double>(32768, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m6;
      m6 = std::vector<double>(16384, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m7;
      m7 = std::vector<double>(8192, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m8;
      m8 = std::vector<double>(4096, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m9;
      m9 = std::vector<double>(2048, std::numeric_limits<double>::quiet_NaN());
      
      
      out__.write(prior1);
      out__.write(prior10);
      out__.write(prior11);
      out__.write(prior12);
      out__.write(prior13);
      out__.write(prior14);
      out__.write(prior15);
      out__.write(prior16);
      out__.write(prior17);
      out__.write(prior18);
      out__.write(prior19);
      out__.write(prior2);
      out__.write(prior20);
      out__.write(prior3);
      out__.write(prior4);
      out__.write(prior5);
      out__.write(prior6);
      out__.write(prior7);
      out__.write(prior8);
      out__.write(prior9);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 41;
      assign(m1, rep_array(0, 524288), "assigning variable m1");
      current_statement__ = 112;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 110;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 108;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 106;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 104;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 102;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 100;
                  for (int z3 = 1; z3 <= 2; ++z3) {
                    current_statement__ = 98;
                    for (int z20 = 1; z20 <= 2; ++z20) {
                      current_statement__ = 96;
                      for (int z2 = 1; z2 <= 2; ++z2) {
                        current_statement__ = 94;
                        for (int z19 = 1; z19 <= 2; ++z19) {
                          current_statement__ = 92;
                          for (int z18 = 1; z18 <= 2; ++z18) {
                            current_statement__ = 90;
                            for (int z17 = 1; z17 <= 2; ++z17) {
                              current_statement__ = 88;
                              for (int z16 = 1; z16 <= 2; ++z16) {
                                current_statement__ = 86;
                                for (int z15 = 1; z15 <= 2; ++z15) {
                                  current_statement__ = 84;
                                  for (int z14 = 1; z14 <= 2; ++z14) {
                                    current_statement__ = 82;
                                    for (int z13 = 1; z13 <= 2; ++z13) {
                                      current_statement__ = 80;
                                      for (int z12 = 1; z12 <= 2; ++z12) {
                                        current_statement__ = 78;
                                        for (int z11 = 1; z11 <= 2; ++z11) {
                                          current_statement__ = 76;
                                          for (int z10 = 1; z10 <= 2; ++z10) {
                                            {
                                              Eigen::Matrix<double, -1, 1> acc0;
                                              acc0 = Eigen::Matrix<double, -1, 1>(2);
                                              stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                              
                                              
                                              current_statement__ = 43;
                                              assign(acc0, rep_vector(0, 2),
                                                "assigning variable acc0");
                                              current_statement__ = 72;
                                              for (int z1_val = 1;
                                                   z1_val <= 2; ++z1_val) {
                                                current_statement__ = 44;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z1_val - 1), prior1)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 45;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z2 - 1), prior2)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 46;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z3 - 1), prior3)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 47;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z4 - 1), prior4)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 48;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z5 - 1), prior5)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 49;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z6 - 1), prior6)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 50;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z7 - 1), prior7)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 51;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z8 - 1), prior8)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 52;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z9 - 1), prior9)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 53;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z10 - 1), prior10)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 54;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z11 - 1), prior11)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 55;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z12 - 1), prior12)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 56;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z13 - 1), prior13)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 57;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z14 - 1), prior14)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 58;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z15 - 1), prior15)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 59;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z16 - 1), prior16)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 60;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z17 - 1), prior17)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 61;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z18 - 1), prior18)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 62;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z19 - 1), prior19)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 63;
                                                assign(acc0,
                                                  (rvalue(acc0, "acc0",
                                                     index_uni(z1_val)) +
                                                    bernoulli_lpmf<false>(
                                                      (z20 - 1), prior20)),
                                                  "assigning variable acc0", 
                                                  index_uni(z1_val));
                                                current_statement__ = 70;
                                                if (logical_gt(
                                                      ((((((((((((((((((((z1_val
                                                                    + z2) +
                                                                    z3) + z4)
                                                                    + z5) +
                                                                    z6) + z7)
                                                                    + z8) +
                                                                    z9) +
                                                                   z10) +
                                                                  z11) + z12)
                                                                + z13) + z14)
                                                              + z15) + z16) +
                                                            z17) + z18) +
                                                          z19) + z20) - 20),
                                                      0)) {
                                                  current_statement__ = 67;
                                                  assign(acc0,
                                                    (rvalue(acc0, "acc0",
                                                       index_uni(z1_val)) +
                                                      normal_lpdf<false>(d1,
                                                        135, 8)),
                                                    "assigning variable acc0", 
                                                    index_uni(z1_val));
                                                  current_statement__ = 68;
                                                  assign(acc0,
                                                    (rvalue(acc0, "acc0",
                                                       index_uni(z1_val)) +
                                                      normal_lpdf<false>(d2,
                                                        135, 8)),
                                                    "assigning variable acc0", 
                                                    index_uni(z1_val));
                                                } else {
                                                  current_statement__ = 64;
                                                  assign(acc0,
                                                    (rvalue(acc0, "acc0",
                                                       index_uni(z1_val)) +
                                                      normal_lpdf<false>(d1,
                                                        80, 8)),
                                                    "assigning variable acc0", 
                                                    index_uni(z1_val));
                                                  current_statement__ = 65;
                                                  assign(acc0,
                                                    (rvalue(acc0, "acc0",
                                                       index_uni(z1_val)) +
                                                      normal_lpdf<false>(d2,
                                                        80, 8)),
                                                    "assigning variable acc0", 
                                                    index_uni(z1_val));
                                                }
                                              }
                                              current_statement__ = 73;
                                              assign(m1,
                                                (rvalue(m1, "m1",
                                                   index_uni((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    262144) +
                                                                    ((z11 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z19 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z2 - 1)
                                                                    * 256)) +
                                                                    ((z20 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                   ((z6 - 1)
                                                                    * 8)) +
                                                                  ((z7 - 1) *
                                                                    4)) +
                                                                 ((z8 - 1) *
                                                                   2)) +
                                                                ((z9 - 1) *
                                                                  1)) + 1)))
                                                  + log_sum_exp(acc0)),
                                                "assigning variable m1", 
                                                index_uni((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    262144) +
                                                                    ((z11 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z19 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z2 - 1)
                                                                    * 256)) +
                                                                    ((z20 -
                                                                    1) * 128))
                                                                   +
                                                                   ((z3 - 1)
                                                                    * 64)) +
                                                                  ((z4 - 1) *
                                                                    32)) +
                                                                 ((z5 - 1) *
                                                                   16)) +
                                                                ((z6 - 1) *
                                                                  8)) +
                                                               ((z7 - 1) * 4))
                                                              +
                                                              ((z8 - 1) * 2))
                                                             +
                                                             ((z9 - 1) * 1))
                                                            + 1)));
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 113;
      assign(m2, rep_array(0, 262144), "assigning variable m2");
      current_statement__ = 156;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 154;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 152;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 150;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 148;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 146;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 144;
                  for (int z3 = 1; z3 <= 2; ++z3) {
                    current_statement__ = 142;
                    for (int z20 = 1; z20 <= 2; ++z20) {
                      current_statement__ = 140;
                      for (int z19 = 1; z19 <= 2; ++z19) {
                        current_statement__ = 138;
                        for (int z18 = 1; z18 <= 2; ++z18) {
                          current_statement__ = 136;
                          for (int z17 = 1; z17 <= 2; ++z17) {
                            current_statement__ = 134;
                            for (int z16 = 1; z16 <= 2; ++z16) {
                              current_statement__ = 132;
                              for (int z15 = 1; z15 <= 2; ++z15) {
                                current_statement__ = 130;
                                for (int z14 = 1; z14 <= 2; ++z14) {
                                  current_statement__ = 128;
                                  for (int z13 = 1; z13 <= 2; ++z13) {
                                    current_statement__ = 126;
                                    for (int z12 = 1; z12 <= 2; ++z12) {
                                      current_statement__ = 124;
                                      for (int z11 = 1; z11 <= 2; ++z11) {
                                        current_statement__ = 122;
                                        for (int z10 = 1; z10 <= 2; ++z10) {
                                          {
                                            Eigen::Matrix<double, -1, 1> acc0;
                                            acc0 = Eigen::Matrix<double, -1, 1>(2);
                                            stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                            
                                            
                                            current_statement__ = 115;
                                            assign(acc0, rep_vector(0, 2),
                                              "assigning variable acc0");
                                            current_statement__ = 118;
                                            for (int z2_val = 1; z2_val <= 2;
                                                 ++z2_val) {
                                              current_statement__ = 116;
                                              assign(acc0,
                                                (rvalue(acc0, "acc0",
                                                   index_uni(z2_val)) +
                                                  rvalue(m1, "m1",
                                                    index_uni((((((((((((((((((((((z10
                                                                    - 1) *
                                                                    262144) +
                                                                    ((z11 -
                                                                    1) *
                                                                    131072))
                                                                    +
                                                                    ((z12 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z18 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z19 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z2_val
                                                                    - 1) *
                                                                    256)) +
                                                                    ((z20 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                   ((z7 - 1)
                                                                    * 4)) +
                                                                  ((z8 - 1) *
                                                                    2)) +
                                                                 ((z9 - 1) *
                                                                   1)) + 1)))),
                                                "assigning variable acc0", 
                                                index_uni(z2_val));
                                            }
                                            current_statement__ = 119;
                                            assign(m2,
                                              (rvalue(m2, "m2",
                                                 index_uni(((((((((((((((((((((z10
                                                                    - 1) *
                                                                    131072) +
                                                                    ((z11 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z18 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                   ((z4 - 1)
                                                                    * 32)) +
                                                                  ((z5 - 1) *
                                                                    16)) +
                                                                 ((z6 - 1) *
                                                                   8)) +
                                                                ((z7 - 1) *
                                                                  4)) +
                                                               ((z8 - 1) * 2))
                                                              +
                                                              ((z9 - 1) * 1))
                                                             + 1))) +
                                                log_sum_exp(acc0)),
                                              "assigning variable m2", 
                                              index_uni(((((((((((((((((((((z10
                                                                    - 1) *
                                                                    131072) +
                                                                    ((z11 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z18 -
                                                                    1) * 512))
                                                                   +
                                                                   ((z19 - 1)
                                                                    * 256)) +
                                                                  ((z20 - 1)
                                                                    * 128)) +
                                                                 ((z3 - 1) *
                                                                   64)) +
                                                                ((z4 - 1) *
                                                                  32)) +
                                                               ((z5 - 1) *
                                                                 16)) +
                                                              ((z6 - 1) * 8))
                                                             +
                                                             ((z7 - 1) * 4))
                                                            + ((z8 - 1) * 2))
                                                           + ((z9 - 1) * 1))
                                                          + 1)));
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 157;
      assign(m3, rep_array(0, 131072), "assigning variable m3");
      current_statement__ = 198;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 196;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 194;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 192;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 190;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 188;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 186;
                  for (int z20 = 1; z20 <= 2; ++z20) {
                    current_statement__ = 184;
                    for (int z19 = 1; z19 <= 2; ++z19) {
                      current_statement__ = 182;
                      for (int z18 = 1; z18 <= 2; ++z18) {
                        current_statement__ = 180;
                        for (int z17 = 1; z17 <= 2; ++z17) {
                          current_statement__ = 178;
                          for (int z16 = 1; z16 <= 2; ++z16) {
                            current_statement__ = 176;
                            for (int z15 = 1; z15 <= 2; ++z15) {
                              current_statement__ = 174;
                              for (int z14 = 1; z14 <= 2; ++z14) {
                                current_statement__ = 172;
                                for (int z13 = 1; z13 <= 2; ++z13) {
                                  current_statement__ = 170;
                                  for (int z12 = 1; z12 <= 2; ++z12) {
                                    current_statement__ = 168;
                                    for (int z11 = 1; z11 <= 2; ++z11) {
                                      current_statement__ = 166;
                                      for (int z10 = 1; z10 <= 2; ++z10) {
                                        {
                                          Eigen::Matrix<double, -1, 1> acc0;
                                          acc0 = Eigen::Matrix<double, -1, 1>(2);
                                          stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                          
                                          
                                          current_statement__ = 159;
                                          assign(acc0, rep_vector(0, 2),
                                            "assigning variable acc0");
                                          current_statement__ = 162;
                                          for (int z3_val = 1; z3_val <= 2;
                                               ++z3_val) {
                                            current_statement__ = 160;
                                            assign(acc0,
                                              (rvalue(acc0, "acc0",
                                                 index_uni(z3_val)) +
                                                rvalue(m2, "m2",
                                                  index_uni(((((((((((((((((((((z10
                                                                    - 1) *
                                                                    131072) +
                                                                    ((z11 -
                                                                    1) *
                                                                    65536)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z17 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z18 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3_val
                                                                    - 1) *
                                                                    64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                   ((z5 - 1)
                                                                    * 16)) +
                                                                  ((z6 - 1) *
                                                                    8)) +
                                                                 ((z7 - 1) *
                                                                   4)) +
                                                                ((z8 - 1) *
                                                                  2)) +
                                                               ((z9 - 1) * 1))
                                                              + 1)))),
                                              "assigning variable acc0", 
                                              index_uni(z3_val));
                                          }
                                          current_statement__ = 163;
                                          assign(m3,
                                            (rvalue(m3, "m3",
                                               index_uni((((((((((((((((((((z10
                                                                    - 1) *
                                                                    65536) +
                                                                    ((z11 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z17 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 256))
                                                                   +
                                                                   ((z19 - 1)
                                                                    * 128)) +
                                                                  ((z20 - 1)
                                                                    * 64)) +
                                                                 ((z4 - 1) *
                                                                   32)) +
                                                                ((z5 - 1) *
                                                                  16)) +
                                                               ((z6 - 1) * 8))
                                                              +
                                                              ((z7 - 1) * 4))
                                                             +
                                                             ((z8 - 1) * 2))
                                                            + ((z9 - 1) * 1))
                                                           + 1))) +
                                              log_sum_exp(acc0)),
                                            "assigning variable m3", 
                                            index_uni((((((((((((((((((((z10
                                                                    - 1) *
                                                                    65536) +
                                                                    ((z11 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    2048)) +
                                                                   ((z16 - 1)
                                                                    * 1024))
                                                                  +
                                                                  ((z17 - 1)
                                                                    * 512)) +
                                                                 ((z18 - 1) *
                                                                   256)) +
                                                                ((z19 - 1) *
                                                                  128)) +
                                                               ((z20 - 1) *
                                                                 64)) +
                                                              ((z4 - 1) * 32))
                                                             +
                                                             ((z5 - 1) * 16))
                                                            + ((z6 - 1) * 8))
                                                           + ((z7 - 1) * 4))
                                                          + ((z8 - 1) * 2)) +
                                                         ((z9 - 1) * 1)) + 1)));
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 199;
      assign(m4, rep_array(0, 65536), "assigning variable m4");
      current_statement__ = 238;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 236;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 234;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 232;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 230;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 228;
                for (int z20 = 1; z20 <= 2; ++z20) {
                  current_statement__ = 226;
                  for (int z19 = 1; z19 <= 2; ++z19) {
                    current_statement__ = 224;
                    for (int z18 = 1; z18 <= 2; ++z18) {
                      current_statement__ = 222;
                      for (int z17 = 1; z17 <= 2; ++z17) {
                        current_statement__ = 220;
                        for (int z16 = 1; z16 <= 2; ++z16) {
                          current_statement__ = 218;
                          for (int z15 = 1; z15 <= 2; ++z15) {
                            current_statement__ = 216;
                            for (int z14 = 1; z14 <= 2; ++z14) {
                              current_statement__ = 214;
                              for (int z13 = 1; z13 <= 2; ++z13) {
                                current_statement__ = 212;
                                for (int z12 = 1; z12 <= 2; ++z12) {
                                  current_statement__ = 210;
                                  for (int z11 = 1; z11 <= 2; ++z11) {
                                    current_statement__ = 208;
                                    for (int z10 = 1; z10 <= 2; ++z10) {
                                      {
                                        Eigen::Matrix<double, -1, 1> acc0;
                                        acc0 = Eigen::Matrix<double, -1, 1>(2);
                                        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                        
                                        
                                        current_statement__ = 201;
                                        assign(acc0, rep_vector(0, 2),
                                          "assigning variable acc0");
                                        current_statement__ = 204;
                                        for (int z4_val = 1; z4_val <= 2;
                                             ++z4_val) {
                                          current_statement__ = 202;
                                          assign(acc0,
                                            (rvalue(acc0, "acc0",
                                               index_uni(z4_val)) +
                                              rvalue(m3, "m3",
                                                index_uni((((((((((((((((((((z10
                                                                    - 1) *
                                                                    65536) +
                                                                    ((z11 -
                                                                    1) *
                                                                    32768)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z16 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z17 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 128))
                                                                   +
                                                                   ((z20 - 1)
                                                                    * 64)) +
                                                                  ((z4_val -
                                                                    1) * 32))
                                                                 +
                                                                 ((z5 - 1) *
                                                                   16)) +
                                                                ((z6 - 1) *
                                                                  8)) +
                                                               ((z7 - 1) * 4))
                                                              +
                                                              ((z8 - 1) * 2))
                                                             +
                                                             ((z9 - 1) * 1))
                                                            + 1)))),
                                            "assigning variable acc0", 
                                            index_uni(z4_val));
                                        }
                                        current_statement__ = 205;
                                        assign(m4,
                                          (rvalue(m4, "m4",
                                             index_uni(((((((((((((((((((z10
                                                                    - 1) *
                                                                    32768) +
                                                                    ((z11 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                   ((z16 - 1)
                                                                    * 512)) +
                                                                  ((z17 - 1)
                                                                    * 256)) +
                                                                 ((z18 - 1) *
                                                                   128)) +
                                                                ((z19 - 1) *
                                                                  64)) +
                                                               ((z20 - 1) *
                                                                 32)) +
                                                              ((z5 - 1) * 16))
                                                             +
                                                             ((z6 - 1) * 8))
                                                            + ((z7 - 1) * 4))
                                                           + ((z8 - 1) * 2))
                                                          + ((z9 - 1) * 1)) +
                                                         1))) +
                                            log_sum_exp(acc0)),
                                          "assigning variable m4", index_uni(
                                                                    ((((((((((((((((((z10
                                                                    - 1) *
                                                                    32768) +
                                                                    ((z11 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                    1)));
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 239;
      assign(m5, rep_array(0, 32768), "assigning variable m5");
      current_statement__ = 276;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 274;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 272;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 270;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 268;
              for (int z20 = 1; z20 <= 2; ++z20) {
                current_statement__ = 266;
                for (int z19 = 1; z19 <= 2; ++z19) {
                  current_statement__ = 264;
                  for (int z18 = 1; z18 <= 2; ++z18) {
                    current_statement__ = 262;
                    for (int z17 = 1; z17 <= 2; ++z17) {
                      current_statement__ = 260;
                      for (int z16 = 1; z16 <= 2; ++z16) {
                        current_statement__ = 258;
                        for (int z15 = 1; z15 <= 2; ++z15) {
                          current_statement__ = 256;
                          for (int z14 = 1; z14 <= 2; ++z14) {
                            current_statement__ = 254;
                            for (int z13 = 1; z13 <= 2; ++z13) {
                              current_statement__ = 252;
                              for (int z12 = 1; z12 <= 2; ++z12) {
                                current_statement__ = 250;
                                for (int z11 = 1; z11 <= 2; ++z11) {
                                  current_statement__ = 248;
                                  for (int z10 = 1; z10 <= 2; ++z10) {
                                    {
                                      Eigen::Matrix<double, -1, 1> acc0;
                                      acc0 = Eigen::Matrix<double, -1, 1>(2);
                                      stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                      
                                      
                                      current_statement__ = 241;
                                      assign(acc0, rep_vector(0, 2),
                                        "assigning variable acc0");
                                      current_statement__ = 244;
                                      for (int z5_val = 1; z5_val <= 2;
                                           ++z5_val) {
                                        current_statement__ = 242;
                                        assign(acc0,
                                          (rvalue(acc0, "acc0",
                                             index_uni(z5_val)) +
                                            rvalue(m4, "m4",
                                              index_uni(((((((((((((((((((z10
                                                                    - 1) *
                                                                    32768) +
                                                                    ((z11 -
                                                                    1) *
                                                                    16384)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z15 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z16 -
                                                                    1) * 512))
                                                                   +
                                                                   ((z17 - 1)
                                                                    * 256)) +
                                                                  ((z18 - 1)
                                                                    * 128)) +
                                                                 ((z19 - 1) *
                                                                   64)) +
                                                                ((z20 - 1) *
                                                                  32)) +
                                                               ((z5_val - 1)
                                                                 * 16)) +
                                                              ((z6 - 1) * 8))
                                                             +
                                                             ((z7 - 1) * 4))
                                                            + ((z8 - 1) * 2))
                                                           + ((z9 - 1) * 1))
                                                          + 1)))),
                                          "assigning variable acc0", 
                                          index_uni(z5_val));
                                      }
                                      current_statement__ = 245;
                                      assign(m5,
                                        (rvalue(m5, "m5",
                                           index_uni((((((((((((((((((z10 -
                                                                    1) *
                                                                    16384) +
                                                                    ((z11 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    4096)) +
                                                                   ((z13 - 1)
                                                                    * 2048))
                                                                  +
                                                                  ((z14 - 1)
                                                                    * 1024))
                                                                 +
                                                                 ((z15 - 1) *
                                                                   512)) +
                                                                ((z16 - 1) *
                                                                  256)) +
                                                               ((z17 - 1) *
                                                                 128)) +
                                                              ((z18 - 1) *
                                                                64)) +
                                                             ((z19 - 1) * 32))
                                                            +
                                                            ((z20 - 1) * 16))
                                                           + ((z6 - 1) * 8))
                                                          + ((z7 - 1) * 4)) +
                                                         ((z8 - 1) * 2)) +
                                                        ((z9 - 1) * 1)) + 1)))
                                          + log_sum_exp(acc0)),
                                        "assigning variable m5", index_uni(
                                                                   (((((((((((((((((z10
                                                                    - 1) *
                                                                    16384) +
                                                                    ((z11 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z14 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z15 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z16 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                    1)));
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 277;
      assign(m6, rep_array(0, 16384), "assigning variable m6");
      current_statement__ = 312;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 310;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 308;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 306;
            for (int z20 = 1; z20 <= 2; ++z20) {
              current_statement__ = 304;
              for (int z19 = 1; z19 <= 2; ++z19) {
                current_statement__ = 302;
                for (int z18 = 1; z18 <= 2; ++z18) {
                  current_statement__ = 300;
                  for (int z17 = 1; z17 <= 2; ++z17) {
                    current_statement__ = 298;
                    for (int z16 = 1; z16 <= 2; ++z16) {
                      current_statement__ = 296;
                      for (int z15 = 1; z15 <= 2; ++z15) {
                        current_statement__ = 294;
                        for (int z14 = 1; z14 <= 2; ++z14) {
                          current_statement__ = 292;
                          for (int z13 = 1; z13 <= 2; ++z13) {
                            current_statement__ = 290;
                            for (int z12 = 1; z12 <= 2; ++z12) {
                              current_statement__ = 288;
                              for (int z11 = 1; z11 <= 2; ++z11) {
                                current_statement__ = 286;
                                for (int z10 = 1; z10 <= 2; ++z10) {
                                  {
                                    Eigen::Matrix<double, -1, 1> acc0;
                                    acc0 = Eigen::Matrix<double, -1, 1>(2);
                                    stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                    
                                    
                                    current_statement__ = 279;
                                    assign(acc0, rep_vector(0, 2),
                                      "assigning variable acc0");
                                    current_statement__ = 282;
                                    for (int z6_val = 1; z6_val <= 2;
                                         ++z6_val) {
                                      current_statement__ = 280;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z6_val)) +
                                          rvalue(m5, "m5",
                                            index_uni((((((((((((((((((z10 -
                                                                    1) *
                                                                    16384) +
                                                                    ((z11 -
                                                                    1) *
                                                                    8192)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    2048)) +
                                                                   ((z14 - 1)
                                                                    * 1024))
                                                                  +
                                                                  ((z15 - 1)
                                                                    * 512)) +
                                                                 ((z16 - 1) *
                                                                   256)) +
                                                                ((z17 - 1) *
                                                                  128)) +
                                                               ((z18 - 1) *
                                                                 64)) +
                                                              ((z19 - 1) *
                                                                32)) +
                                                             ((z20 - 1) * 16))
                                                            +
                                                            ((z6_val - 1) *
                                                              8)) +
                                                           ((z7 - 1) * 4)) +
                                                          ((z8 - 1) * 2)) +
                                                         ((z9 - 1) * 1)) + 1)))),
                                        "assigning variable acc0", index_uni(z6_val));
                                    }
                                    current_statement__ = 283;
                                    assign(m6,
                                      (rvalue(m6, "m6",
                                         index_uni(((((((((((((((((z10 - 1) *
                                                                   8192) +
                                                                  ((z11 - 1)
                                                                    * 4096))
                                                                 +
                                                                 ((z12 - 1) *
                                                                   2048)) +
                                                                ((z13 - 1) *
                                                                  1024)) +
                                                               ((z14 - 1) *
                                                                 512)) +
                                                              ((z15 - 1) *
                                                                256)) +
                                                             ((z16 - 1) *
                                                               128)) +
                                                            ((z17 - 1) * 64))
                                                           +
                                                           ((z18 - 1) * 32))
                                                          + ((z19 - 1) * 16))
                                                         + ((z20 - 1) * 8)) +
                                                        ((z7 - 1) * 4)) +
                                                       ((z8 - 1) * 2)) +
                                                      ((z9 - 1) * 1)) + 1)))
                                        + log_sum_exp(acc0)),
                                      "assigning variable m6", index_uni(
                                                                 ((((((((((((((((z10
                                                                    - 1) *
                                                                    8192) +
                                                                    ((z11 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z14 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z16 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                   1)));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 313;
      assign(m7, rep_array(0, 8192), "assigning variable m7");
      current_statement__ = 346;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 344;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 342;
          for (int z20 = 1; z20 <= 2; ++z20) {
            current_statement__ = 340;
            for (int z19 = 1; z19 <= 2; ++z19) {
              current_statement__ = 338;
              for (int z18 = 1; z18 <= 2; ++z18) {
                current_statement__ = 336;
                for (int z17 = 1; z17 <= 2; ++z17) {
                  current_statement__ = 334;
                  for (int z16 = 1; z16 <= 2; ++z16) {
                    current_statement__ = 332;
                    for (int z15 = 1; z15 <= 2; ++z15) {
                      current_statement__ = 330;
                      for (int z14 = 1; z14 <= 2; ++z14) {
                        current_statement__ = 328;
                        for (int z13 = 1; z13 <= 2; ++z13) {
                          current_statement__ = 326;
                          for (int z12 = 1; z12 <= 2; ++z12) {
                            current_statement__ = 324;
                            for (int z11 = 1; z11 <= 2; ++z11) {
                              current_statement__ = 322;
                              for (int z10 = 1; z10 <= 2; ++z10) {
                                {
                                  Eigen::Matrix<double, -1, 1> acc0;
                                  acc0 = Eigen::Matrix<double, -1, 1>(2);
                                  stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                  
                                  
                                  current_statement__ = 315;
                                  assign(acc0, rep_vector(0, 2),
                                    "assigning variable acc0");
                                  current_statement__ = 318;
                                  for (int z7_val = 1; z7_val <= 2; ++z7_val) {
                                    current_statement__ = 316;
                                    assign(acc0,
                                      (rvalue(acc0, "acc0",
                                         index_uni(z7_val)) +
                                        rvalue(m6, "m6",
                                          index_uni(((((((((((((((((z10 - 1)
                                                                    * 8192) +
                                                                   ((z11 - 1)
                                                                    * 4096))
                                                                  +
                                                                  ((z12 - 1)
                                                                    * 2048))
                                                                 +
                                                                 ((z13 - 1) *
                                                                   1024)) +
                                                                ((z14 - 1) *
                                                                  512)) +
                                                               ((z15 - 1) *
                                                                 256)) +
                                                              ((z16 - 1) *
                                                                128)) +
                                                             ((z17 - 1) * 64))
                                                            +
                                                            ((z18 - 1) * 32))
                                                           +
                                                           ((z19 - 1) * 16))
                                                          + ((z20 - 1) * 8))
                                                         +
                                                         ((z7_val - 1) * 4))
                                                        + ((z8 - 1) * 2)) +
                                                       ((z9 - 1) * 1)) + 1)))),
                                      "assigning variable acc0", index_uni(z7_val));
                                  }
                                  current_statement__ = 319;
                                  assign(m7,
                                    (rvalue(m7, "m7",
                                       index_uni((((((((((((((((z10 - 1) *
                                                                4096) +
                                                               ((z11 - 1) *
                                                                 2048)) +
                                                              ((z12 - 1) *
                                                                1024)) +
                                                             ((z13 - 1) *
                                                               512)) +
                                                            ((z14 - 1) * 256))
                                                           +
                                                           ((z15 - 1) * 128))
                                                          + ((z16 - 1) * 64))
                                                         + ((z17 - 1) * 32))
                                                        + ((z18 - 1) * 16)) +
                                                       ((z19 - 1) * 8)) +
                                                      ((z20 - 1) * 4)) +
                                                     ((z8 - 1) * 2)) +
                                                    ((z9 - 1) * 1)) + 1))) +
                                      log_sum_exp(acc0)),
                                    "assigning variable m7", index_uni(
                                                               (((((((((((((((z10
                                                                    - 1) *
                                                                    4096) +
                                                                    ((z11 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z13 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z16 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 4))
                                                                   +
                                                                   ((z8 - 1)
                                                                    * 2)) +
                                                                  ((z9 - 1) *
                                                                    1)) + 1)));
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 347;
      assign(m8, rep_array(0, 4096), "assigning variable m8");
      current_statement__ = 378;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 376;
        for (int z20 = 1; z20 <= 2; ++z20) {
          current_statement__ = 374;
          for (int z19 = 1; z19 <= 2; ++z19) {
            current_statement__ = 372;
            for (int z18 = 1; z18 <= 2; ++z18) {
              current_statement__ = 370;
              for (int z17 = 1; z17 <= 2; ++z17) {
                current_statement__ = 368;
                for (int z16 = 1; z16 <= 2; ++z16) {
                  current_statement__ = 366;
                  for (int z15 = 1; z15 <= 2; ++z15) {
                    current_statement__ = 364;
                    for (int z14 = 1; z14 <= 2; ++z14) {
                      current_statement__ = 362;
                      for (int z13 = 1; z13 <= 2; ++z13) {
                        current_statement__ = 360;
                        for (int z12 = 1; z12 <= 2; ++z12) {
                          current_statement__ = 358;
                          for (int z11 = 1; z11 <= 2; ++z11) {
                            current_statement__ = 356;
                            for (int z10 = 1; z10 <= 2; ++z10) {
                              {
                                Eigen::Matrix<double, -1, 1> acc0;
                                acc0 = Eigen::Matrix<double, -1, 1>(2);
                                stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                
                                
                                current_statement__ = 349;
                                assign(acc0, rep_vector(0, 2),
                                  "assigning variable acc0");
                                current_statement__ = 352;
                                for (int z8_val = 1; z8_val <= 2; ++z8_val) {
                                  current_statement__ = 350;
                                  assign(acc0,
                                    (rvalue(acc0, "acc0", index_uni(z8_val))
                                      +
                                      rvalue(m7, "m7",
                                        index_uni((((((((((((((((z10 - 1) *
                                                                 4096) +
                                                                ((z11 - 1) *
                                                                  2048)) +
                                                               ((z12 - 1) *
                                                                 1024)) +
                                                              ((z13 - 1) *
                                                                512)) +
                                                             ((z14 - 1) *
                                                               256)) +
                                                            ((z15 - 1) * 128))
                                                           +
                                                           ((z16 - 1) * 64))
                                                          + ((z17 - 1) * 32))
                                                         + ((z18 - 1) * 16))
                                                        + ((z19 - 1) * 8)) +
                                                       ((z20 - 1) * 4)) +
                                                      ((z8_val - 1) * 2)) +
                                                     ((z9 - 1) * 1)) + 1)))),
                                    "assigning variable acc0", index_uni(z8_val));
                                }
                                current_statement__ = 353;
                                assign(m8,
                                  (rvalue(m8, "m8",
                                     index_uni(((((((((((((((z10 - 1) * 2048)
                                                            +
                                                            ((z11 - 1) *
                                                              1024)) +
                                                           ((z12 - 1) * 512))
                                                          +
                                                          ((z13 - 1) * 256))
                                                         + ((z14 - 1) * 128))
                                                        + ((z15 - 1) * 64)) +
                                                       ((z16 - 1) * 32)) +
                                                      ((z17 - 1) * 16)) +
                                                     ((z18 - 1) * 8)) +
                                                    ((z19 - 1) * 4)) +
                                                   ((z20 - 1) * 2)) +
                                                  ((z9 - 1) * 1)) + 1))) +
                                    log_sum_exp(acc0)),
                                  "assigning variable m8", index_uni(
                                                             ((((((((((((((z10
                                                                    - 1) *
                                                                    2048) +
                                                                    ((z11 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z12 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z13 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z16 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 16))
                                                                   +
                                                                   ((z18 - 1)
                                                                    * 8)) +
                                                                  ((z19 - 1)
                                                                    * 4)) +
                                                                 ((z20 - 1) *
                                                                   2)) +
                                                                ((z9 - 1) *
                                                                  1)) + 1)));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 379;
      assign(m9, rep_array(0, 2048), "assigning variable m9");
      current_statement__ = 408;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 406;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 404;
          for (int z18 = 1; z18 <= 2; ++z18) {
            current_statement__ = 402;
            for (int z17 = 1; z17 <= 2; ++z17) {
              current_statement__ = 400;
              for (int z16 = 1; z16 <= 2; ++z16) {
                current_statement__ = 398;
                for (int z15 = 1; z15 <= 2; ++z15) {
                  current_statement__ = 396;
                  for (int z14 = 1; z14 <= 2; ++z14) {
                    current_statement__ = 394;
                    for (int z13 = 1; z13 <= 2; ++z13) {
                      current_statement__ = 392;
                      for (int z12 = 1; z12 <= 2; ++z12) {
                        current_statement__ = 390;
                        for (int z11 = 1; z11 <= 2; ++z11) {
                          current_statement__ = 388;
                          for (int z10 = 1; z10 <= 2; ++z10) {
                            {
                              Eigen::Matrix<double, -1, 1> acc0;
                              acc0 = Eigen::Matrix<double, -1, 1>(2);
                              stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                              
                              
                              current_statement__ = 381;
                              assign(acc0, rep_vector(0, 2),
                                "assigning variable acc0");
                              current_statement__ = 384;
                              for (int z9_val = 1; z9_val <= 2; ++z9_val) {
                                current_statement__ = 382;
                                assign(acc0,
                                  (rvalue(acc0, "acc0", index_uni(z9_val)) +
                                    rvalue(m8, "m8",
                                      index_uni(((((((((((((((z10 - 1) *
                                                              2048) +
                                                             ((z11 - 1) *
                                                               1024)) +
                                                            ((z12 - 1) * 512))
                                                           +
                                                           ((z13 - 1) * 256))
                                                          +
                                                          ((z14 - 1) * 128))
                                                         + ((z15 - 1) * 64))
                                                        + ((z16 - 1) * 32)) +
                                                       ((z17 - 1) * 16)) +
                                                      ((z18 - 1) * 8)) +
                                                     ((z19 - 1) * 4)) +
                                                    ((z20 - 1) * 2)) +
                                                   ((z9_val - 1) * 1)) + 1)))),
                                  "assigning variable acc0", index_uni(z9_val));
                              }
                              current_statement__ = 385;
                              assign(m9,
                                (rvalue(m9, "m9",
                                   index_uni((((((((((((((z10 - 1) * 1024) +
                                                         ((z11 - 1) * 512)) +
                                                        ((z12 - 1) * 256)) +
                                                       ((z13 - 1) * 128)) +
                                                      ((z14 - 1) * 64)) +
                                                     ((z15 - 1) * 32)) +
                                                    ((z16 - 1) * 16)) +
                                                   ((z17 - 1) * 8)) +
                                                  ((z18 - 1) * 4)) +
                                                 ((z19 - 1) * 2)) +
                                                ((z20 - 1) * 1)) + 1))) +
                                  log_sum_exp(acc0)),
                                "assigning variable m9", index_uni((((((((((((((z10
                                                                    - 1) *
                                                                    1024) +
                                                                    ((z11 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z12 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z13 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z16 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 2))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 1))
                                                                    + 1)));
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 409;
      assign(m10, rep_array(0, 1024), "assigning variable m10");
      current_statement__ = 436;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 434;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 432;
          for (int z18 = 1; z18 <= 2; ++z18) {
            current_statement__ = 430;
            for (int z17 = 1; z17 <= 2; ++z17) {
              current_statement__ = 428;
              for (int z16 = 1; z16 <= 2; ++z16) {
                current_statement__ = 426;
                for (int z15 = 1; z15 <= 2; ++z15) {
                  current_statement__ = 424;
                  for (int z14 = 1; z14 <= 2; ++z14) {
                    current_statement__ = 422;
                    for (int z13 = 1; z13 <= 2; ++z13) {
                      current_statement__ = 420;
                      for (int z12 = 1; z12 <= 2; ++z12) {
                        current_statement__ = 418;
                        for (int z11 = 1; z11 <= 2; ++z11) {
                          {
                            Eigen::Matrix<double, -1, 1> acc0;
                            acc0 = Eigen::Matrix<double, -1, 1>(2);
                            stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                            
                            
                            current_statement__ = 411;
                            assign(acc0, rep_vector(0, 2),
                              "assigning variable acc0");
                            current_statement__ = 414;
                            for (int z10_val = 1; z10_val <= 2; ++z10_val) {
                              current_statement__ = 412;
                              assign(acc0,
                                (rvalue(acc0, "acc0", index_uni(z10_val)) +
                                  rvalue(m9, "m9",
                                    index_uni((((((((((((((z10_val - 1) *
                                                           1024) +
                                                          ((z11 - 1) * 512))
                                                         + ((z12 - 1) * 256))
                                                        + ((z13 - 1) * 128))
                                                       + ((z14 - 1) * 64)) +
                                                      ((z15 - 1) * 32)) +
                                                     ((z16 - 1) * 16)) +
                                                    ((z17 - 1) * 8)) +
                                                   ((z18 - 1) * 4)) +
                                                  ((z19 - 1) * 2)) +
                                                 ((z20 - 1) * 1)) + 1)))),
                                "assigning variable acc0", index_uni(z10_val));
                            }
                            current_statement__ = 415;
                            assign(m10,
                              (rvalue(m10, "m10",
                                 index_uni(((((((((((((z11 - 1) * 512) +
                                                      ((z12 - 1) * 256)) +
                                                     ((z13 - 1) * 128)) +
                                                    ((z14 - 1) * 64)) +
                                                   ((z15 - 1) * 32)) +
                                                  ((z16 - 1) * 16)) +
                                                 ((z17 - 1) * 8)) +
                                                ((z18 - 1) * 4)) +
                                               ((z19 - 1) * 2)) +
                                              ((z20 - 1) * 1)) + 1))) +
                                log_sum_exp(acc0)),
                              "assigning variable m10", index_uni(((((((((((((z11
                                                                    - 1) *
                                                                    512) +
                                                                    ((z12 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z13 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z16 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 2))
                                                                    +
                                                                    ((z20 -
                                                                    1) * 1))
                                                                    + 1)));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 437;
      assign(m11, rep_array(0, 512), "assigning variable m11");
      current_statement__ = 462;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 460;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 458;
          for (int z18 = 1; z18 <= 2; ++z18) {
            current_statement__ = 456;
            for (int z17 = 1; z17 <= 2; ++z17) {
              current_statement__ = 454;
              for (int z16 = 1; z16 <= 2; ++z16) {
                current_statement__ = 452;
                for (int z15 = 1; z15 <= 2; ++z15) {
                  current_statement__ = 450;
                  for (int z14 = 1; z14 <= 2; ++z14) {
                    current_statement__ = 448;
                    for (int z13 = 1; z13 <= 2; ++z13) {
                      current_statement__ = 446;
                      for (int z12 = 1; z12 <= 2; ++z12) {
                        {
                          Eigen::Matrix<double, -1, 1> acc0;
                          acc0 = Eigen::Matrix<double, -1, 1>(2);
                          stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                          
                          
                          current_statement__ = 439;
                          assign(acc0, rep_vector(0, 2),
                            "assigning variable acc0");
                          current_statement__ = 442;
                          for (int z11_val = 1; z11_val <= 2; ++z11_val) {
                            current_statement__ = 440;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z11_val)) +
                                rvalue(m10, "m10",
                                  index_uni(((((((((((((z11_val - 1) * 512) +
                                                       ((z12 - 1) * 256)) +
                                                      ((z13 - 1) * 128)) +
                                                     ((z14 - 1) * 64)) +
                                                    ((z15 - 1) * 32)) +
                                                   ((z16 - 1) * 16)) +
                                                  ((z17 - 1) * 8)) +
                                                 ((z18 - 1) * 4)) +
                                                ((z19 - 1) * 2)) +
                                               ((z20 - 1) * 1)) + 1)))),
                              "assigning variable acc0", index_uni(z11_val));
                          }
                          current_statement__ = 443;
                          assign(m11,
                            (rvalue(m11, "m11",
                               index_uni((((((((((((z12 - 1) * 256) +
                                                   ((z13 - 1) * 128)) +
                                                  ((z14 - 1) * 64)) +
                                                 ((z15 - 1) * 32)) +
                                                ((z16 - 1) * 16)) +
                                               ((z17 - 1) * 8)) +
                                              ((z18 - 1) * 4)) +
                                             ((z19 - 1) * 2)) +
                                            ((z20 - 1) * 1)) + 1))) +
                              log_sum_exp(acc0)),
                            "assigning variable m11", index_uni((((((((((((z12
                                                                    - 1) *
                                                                    256) +
                                                                    ((z13 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z16 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z18 -
                                                                    1) * 4))
                                                                    +
                                                                    ((z19 -
                                                                    1) * 2))
                                                                   +
                                                                   ((z20 - 1)
                                                                    * 1)) +
                                                                  1)));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 463;
      assign(m12, rep_array(0, 256), "assigning variable m12");
      current_statement__ = 486;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 484;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 482;
          for (int z18 = 1; z18 <= 2; ++z18) {
            current_statement__ = 480;
            for (int z17 = 1; z17 <= 2; ++z17) {
              current_statement__ = 478;
              for (int z16 = 1; z16 <= 2; ++z16) {
                current_statement__ = 476;
                for (int z15 = 1; z15 <= 2; ++z15) {
                  current_statement__ = 474;
                  for (int z14 = 1; z14 <= 2; ++z14) {
                    current_statement__ = 472;
                    for (int z13 = 1; z13 <= 2; ++z13) {
                      {
                        Eigen::Matrix<double, -1, 1> acc0;
                        acc0 = Eigen::Matrix<double, -1, 1>(2);
                        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                        
                        
                        current_statement__ = 465;
                        assign(acc0, rep_vector(0, 2),
                          "assigning variable acc0");
                        current_statement__ = 468;
                        for (int z12_val = 1; z12_val <= 2; ++z12_val) {
                          current_statement__ = 466;
                          assign(acc0,
                            (rvalue(acc0, "acc0", index_uni(z12_val)) +
                              rvalue(m11, "m11",
                                index_uni((((((((((((z12_val - 1) * 256) +
                                                    ((z13 - 1) * 128)) +
                                                   ((z14 - 1) * 64)) +
                                                  ((z15 - 1) * 32)) +
                                                 ((z16 - 1) * 16)) +
                                                ((z17 - 1) * 8)) +
                                               ((z18 - 1) * 4)) +
                                              ((z19 - 1) * 2)) +
                                             ((z20 - 1) * 1)) + 1)))),
                            "assigning variable acc0", index_uni(z12_val));
                        }
                        current_statement__ = 469;
                        assign(m12,
                          (rvalue(m12, "m12",
                             index_uni(((((((((((z13 - 1) * 128) +
                                                ((z14 - 1) * 64)) +
                                               ((z15 - 1) * 32)) +
                                              ((z16 - 1) * 16)) +
                                             ((z17 - 1) * 8)) +
                                            ((z18 - 1) * 4)) +
                                           ((z19 - 1) * 2)) +
                                          ((z20 - 1) * 1)) + 1))) +
                            log_sum_exp(acc0)),
                          "assigning variable m12", index_uni(((((((((((z13 -
                                                                    1) * 128)
                                                                    +
                                                                    ((z14 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z16 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z17 -
                                                                    1) * 8))
                                                                   +
                                                                   ((z18 - 1)
                                                                    * 4)) +
                                                                  ((z19 - 1)
                                                                    * 2)) +
                                                                 ((z20 - 1) *
                                                                   1)) + 1)));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 487;
      assign(m13, rep_array(0, 128), "assigning variable m13");
      current_statement__ = 508;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 506;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 504;
          for (int z18 = 1; z18 <= 2; ++z18) {
            current_statement__ = 502;
            for (int z17 = 1; z17 <= 2; ++z17) {
              current_statement__ = 500;
              for (int z16 = 1; z16 <= 2; ++z16) {
                current_statement__ = 498;
                for (int z15 = 1; z15 <= 2; ++z15) {
                  current_statement__ = 496;
                  for (int z14 = 1; z14 <= 2; ++z14) {
                    {
                      Eigen::Matrix<double, -1, 1> acc0;
                      acc0 = Eigen::Matrix<double, -1, 1>(2);
                      stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                      
                      
                      current_statement__ = 489;
                      assign(acc0, rep_vector(0, 2),
                        "assigning variable acc0");
                      current_statement__ = 492;
                      for (int z13_val = 1; z13_val <= 2; ++z13_val) {
                        current_statement__ = 490;
                        assign(acc0,
                          (rvalue(acc0, "acc0", index_uni(z13_val)) +
                            rvalue(m12, "m12",
                              index_uni(((((((((((z13_val - 1) * 128) +
                                                 ((z14 - 1) * 64)) +
                                                ((z15 - 1) * 32)) +
                                               ((z16 - 1) * 16)) +
                                              ((z17 - 1) * 8)) +
                                             ((z18 - 1) * 4)) +
                                            ((z19 - 1) * 2)) +
                                           ((z20 - 1) * 1)) + 1)))),
                          "assigning variable acc0", index_uni(z13_val));
                      }
                      current_statement__ = 493;
                      assign(m13,
                        (rvalue(m13, "m13",
                           index_uni((((((((((z14 - 1) * 64) +
                                             ((z15 - 1) * 32)) +
                                            ((z16 - 1) * 16)) +
                                           ((z17 - 1) * 8)) +
                                          ((z18 - 1) * 4)) + ((z19 - 1) * 2))
                                        + ((z20 - 1) * 1)) + 1))) +
                          log_sum_exp(acc0)),
                        "assigning variable m13", index_uni((((((((((z14 - 1)
                                                                    * 64) +
                                                                    ((z15 -
                                                                    1) * 32))
                                                                   +
                                                                   ((z16 - 1)
                                                                    * 16)) +
                                                                  ((z17 - 1)
                                                                    * 8)) +
                                                                 ((z18 - 1) *
                                                                   4)) +
                                                                ((z19 - 1) *
                                                                  2)) +
                                                               ((z20 - 1) *
                                                                 1)) + 1)));
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 509;
      assign(m14, rep_array(0, 64), "assigning variable m14");
      current_statement__ = 528;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 526;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 524;
          for (int z18 = 1; z18 <= 2; ++z18) {
            current_statement__ = 522;
            for (int z17 = 1; z17 <= 2; ++z17) {
              current_statement__ = 520;
              for (int z16 = 1; z16 <= 2; ++z16) {
                current_statement__ = 518;
                for (int z15 = 1; z15 <= 2; ++z15) {
                  {
                    Eigen::Matrix<double, -1, 1> acc0;
                    acc0 = Eigen::Matrix<double, -1, 1>(2);
                    stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                    
                    
                    current_statement__ = 511;
                    assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                    current_statement__ = 514;
                    for (int z14_val = 1; z14_val <= 2; ++z14_val) {
                      current_statement__ = 512;
                      assign(acc0,
                        (rvalue(acc0, "acc0", index_uni(z14_val)) +
                          rvalue(m13, "m13",
                            index_uni((((((((((z14_val - 1) * 64) +
                                              ((z15 - 1) * 32)) +
                                             ((z16 - 1) * 16)) +
                                            ((z17 - 1) * 8)) +
                                           ((z18 - 1) * 4)) +
                                          ((z19 - 1) * 2)) + ((z20 - 1) * 1))
                                        + 1)))),
                        "assigning variable acc0", index_uni(z14_val));
                    }
                    current_statement__ = 515;
                    assign(m14,
                      (rvalue(m14, "m14",
                         index_uni(((((((((z15 - 1) * 32) + ((z16 - 1) * 16))
                                         + ((z17 - 1) * 8)) +
                                        ((z18 - 1) * 4)) + ((z19 - 1) * 2)) +
                                      ((z20 - 1) * 1)) + 1))) +
                        log_sum_exp(acc0)),
                      "assigning variable m14", index_uni(((((((((z15 - 1) *
                                                                  32) +
                                                                 ((z16 - 1) *
                                                                   16)) +
                                                                ((z17 - 1) *
                                                                  8)) +
                                                               ((z18 - 1) *
                                                                 4)) +
                                                              ((z19 - 1) * 2))
                                                             +
                                                             ((z20 - 1) * 1))
                                                            + 1)));
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 529;
      assign(m15, rep_array(0, 32), "assigning variable m15");
      current_statement__ = 546;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 544;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 542;
          for (int z18 = 1; z18 <= 2; ++z18) {
            current_statement__ = 540;
            for (int z17 = 1; z17 <= 2; ++z17) {
              current_statement__ = 538;
              for (int z16 = 1; z16 <= 2; ++z16) {
                {
                  Eigen::Matrix<double, -1, 1> acc0;
                  acc0 = Eigen::Matrix<double, -1, 1>(2);
                  stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                  
                  
                  current_statement__ = 531;
                  assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                  current_statement__ = 534;
                  for (int z15_val = 1; z15_val <= 2; ++z15_val) {
                    current_statement__ = 532;
                    assign(acc0,
                      (rvalue(acc0, "acc0", index_uni(z15_val)) +
                        rvalue(m14, "m14",
                          index_uni(((((((((z15_val - 1) * 32) +
                                           ((z16 - 1) * 16)) +
                                          ((z17 - 1) * 8)) + ((z18 - 1) * 4))
                                        + ((z19 - 1) * 2)) + ((z20 - 1) * 1))
                                      + 1)))),
                      "assigning variable acc0", index_uni(z15_val));
                  }
                  current_statement__ = 535;
                  assign(m15,
                    (rvalue(m15, "m15",
                       index_uni((((((((z16 - 1) * 16) + ((z17 - 1) * 8)) +
                                      ((z18 - 1) * 4)) + ((z19 - 1) * 2)) +
                                    ((z20 - 1) * 1)) + 1))) +
                      log_sum_exp(acc0)),
                    "assigning variable m15", index_uni((((((((z16 - 1) * 16)
                                                              +
                                                              ((z17 - 1) * 8))
                                                             +
                                                             ((z18 - 1) * 4))
                                                            +
                                                            ((z19 - 1) * 2))
                                                           + ((z20 - 1) * 1))
                                                          + 1)));
                }
              }
            }
          }
        }
      }
      current_statement__ = 547;
      assign(m16, rep_array(0, 16), "assigning variable m16");
      current_statement__ = 562;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 560;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 558;
          for (int z18 = 1; z18 <= 2; ++z18) {
            current_statement__ = 556;
            for (int z17 = 1; z17 <= 2; ++z17) {
              {
                Eigen::Matrix<double, -1, 1> acc0;
                acc0 = Eigen::Matrix<double, -1, 1>(2);
                stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                
                
                current_statement__ = 549;
                assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                current_statement__ = 552;
                for (int z16_val = 1; z16_val <= 2; ++z16_val) {
                  current_statement__ = 550;
                  assign(acc0,
                    (rvalue(acc0, "acc0", index_uni(z16_val)) +
                      rvalue(m15, "m15",
                        index_uni((((((((z16_val - 1) * 16) +
                                        ((z17 - 1) * 8)) + ((z18 - 1) * 4)) +
                                      ((z19 - 1) * 2)) + ((z20 - 1) * 1)) +
                                    1)))),
                    "assigning variable acc0", index_uni(z16_val));
                }
                current_statement__ = 553;
                assign(m16,
                  (rvalue(m16, "m16",
                     index_uni(((((((z17 - 1) * 8) + ((z18 - 1) * 4)) +
                                   ((z19 - 1) * 2)) + ((z20 - 1) * 1)) + 1)))
                    + log_sum_exp(acc0)),
                  "assigning variable m16", index_uni(((((((z17 - 1) * 8) +
                                                           ((z18 - 1) * 4)) +
                                                          ((z19 - 1) * 2)) +
                                                         ((z20 - 1) * 1)) +
                                                        1)));
              }
            }
          }
        }
      }
      current_statement__ = 563;
      assign(m17, rep_array(0, 8), "assigning variable m17");
      current_statement__ = 576;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 574;
        for (int z19 = 1; z19 <= 2; ++z19) {
          current_statement__ = 572;
          for (int z18 = 1; z18 <= 2; ++z18) {
            {
              Eigen::Matrix<double, -1, 1> acc0;
              acc0 = Eigen::Matrix<double, -1, 1>(2);
              stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
              
              
              current_statement__ = 565;
              assign(acc0, rep_vector(0, 2), "assigning variable acc0");
              current_statement__ = 568;
              for (int z17_val = 1; z17_val <= 2; ++z17_val) {
                current_statement__ = 566;
                assign(acc0,
                  (rvalue(acc0, "acc0", index_uni(z17_val)) +
                    rvalue(m16, "m16",
                      index_uni(((((((z17_val - 1) * 8) + ((z18 - 1) * 4)) +
                                    ((z19 - 1) * 2)) + ((z20 - 1) * 1)) + 1)))),
                  "assigning variable acc0", index_uni(z17_val));
              }
              current_statement__ = 569;
              assign(m17,
                (rvalue(m17, "m17",
                   index_uni((((((z18 - 1) * 4) + ((z19 - 1) * 2)) +
                                ((z20 - 1) * 1)) + 1))) + log_sum_exp(acc0)),
                "assigning variable m17", index_uni((((((z18 - 1) * 4) +
                                                        ((z19 - 1) * 2)) +
                                                       ((z20 - 1) * 1)) + 1)));
            }
          }
        }
      }
      current_statement__ = 577;
      assign(m18, rep_array(0, 4), "assigning variable m18");
      current_statement__ = 588;
      for (int z20 = 1; z20 <= 2; ++z20) {
        current_statement__ = 586;
        for (int z19 = 1; z19 <= 2; ++z19) {
          {
            Eigen::Matrix<double, -1, 1> acc0;
            acc0 = Eigen::Matrix<double, -1, 1>(2);
            stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
            
            current_statement__ = 579;
            assign(acc0, rep_vector(0, 2), "assigning variable acc0");
            current_statement__ = 582;
            for (int z18_val = 1; z18_val <= 2; ++z18_val) {
              current_statement__ = 580;
              assign(acc0,
                (rvalue(acc0, "acc0", index_uni(z18_val)) +
                  rvalue(m17, "m17",
                    index_uni((((((z18_val - 1) * 4) + ((z19 - 1) * 2)) +
                                 ((z20 - 1) * 1)) + 1)))),
                "assigning variable acc0", index_uni(z18_val));
            }
            current_statement__ = 583;
            assign(m18,
              (rvalue(m18, "m18",
                 index_uni(((((z19 - 1) * 2) + ((z20 - 1) * 1)) + 1))) +
                log_sum_exp(acc0)),
              "assigning variable m18", index_uni(((((z19 - 1) * 2) +
                                                     ((z20 - 1) * 1)) + 1)));
          }
        }
      }
      current_statement__ = 589;
      assign(m19, rep_array(0, 2), "assigning variable m19");
      current_statement__ = 598;
      for (int z20 = 1; z20 <= 2; ++z20) {
        {
          Eigen::Matrix<double, -1, 1> acc0;
          acc0 = Eigen::Matrix<double, -1, 1>(2);
          stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 591;
          assign(acc0, rep_vector(0, 2), "assigning variable acc0");
          current_statement__ = 594;
          for (int z19_val = 1; z19_val <= 2; ++z19_val) {
            current_statement__ = 592;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z19_val)) +
                rvalue(m18, "m18",
                  index_uni(((((z19_val - 1) * 2) + ((z20 - 1) * 1)) + 1)))),
              "assigning variable acc0", index_uni(z19_val));
          }
          current_statement__ = 595;
          assign(m19,
            (rvalue(m19, "m19", index_uni(z20)) + log_sum_exp(acc0)),
            "assigning variable m19", index_uni(z20));
        }
      }
      current_statement__ = 599;
      m20 = 0;
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 601;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 604;
        for (int z20_val = 1; z20_val <= 2; ++z20_val) {
          current_statement__ = 602;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z20_val)) +
              rvalue(m19, "m19", index_uni((((z20_val - 1) * 1) + 1)))),
            "assigning variable acc0", index_uni(z20_val));
        }
        current_statement__ = 605;
        m20 = (m20 + log_sum_exp(acc0));
      }
      if (emit_transformed_parameters__) {
        out__.write(m1);
        out__.write(m10);
        out__.write(m11);
        out__.write(m12);
        out__.write(m13);
        out__.write(m14);
        out__.write(m15);
        out__.write(m16);
        out__.write(m17);
        out__.write(m18);
        out__.write(m19);
        out__.write(m2);
        out__.write(m20);
        out__.write(m3);
        out__.write(m4);
        out__.write(m5);
        out__.write(m6);
        out__.write(m7);
        out__.write(m8);
        out__.write(m9);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      int z1;
      z1 = std::numeric_limits<int>::min();
      
      int z10;
      z10 = std::numeric_limits<int>::min();
      
      int z11;
      z11 = std::numeric_limits<int>::min();
      
      int z12;
      z12 = std::numeric_limits<int>::min();
      
      int z13;
      z13 = std::numeric_limits<int>::min();
      
      int z14;
      z14 = std::numeric_limits<int>::min();
      
      int z15;
      z15 = std::numeric_limits<int>::min();
      
      int z16;
      z16 = std::numeric_limits<int>::min();
      
      int z17;
      z17 = std::numeric_limits<int>::min();
      
      int z18;
      z18 = std::numeric_limits<int>::min();
      
      int z19;
      z19 = std::numeric_limits<int>::min();
      
      int z2;
      z2 = std::numeric_limits<int>::min();
      
      int z20;
      z20 = std::numeric_limits<int>::min();
      
      int z3;
      z3 = std::numeric_limits<int>::min();
      
      int z4;
      z4 = std::numeric_limits<int>::min();
      
      int z5;
      z5 = std::numeric_limits<int>::min();
      
      int z6;
      z6 = std::numeric_limits<int>::min();
      
      int z7;
      z7 = std::numeric_limits<int>::min();
      
      int z8;
      z8 = std::numeric_limits<int>::min();
      
      int z9;
      z9 = std::numeric_limits<int>::min();
      
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 628;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 631;
        for (int z20_val = 1; z20_val <= 2; ++z20_val) {
          current_statement__ = 629;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z20_val)) +
              rvalue(m19, "m19", index_uni((((z20_val - 1) * 1) + 1)))),
            "assigning variable acc0", index_uni(z20_val));
        }
        current_statement__ = 632;
        z20 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 635;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 638;
        for (int z19_val = 1; z19_val <= 2; ++z19_val) {
          current_statement__ = 636;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z19_val)) +
              rvalue(m18, "m18",
                index_uni(((((z19_val - 1) * 2) + ((z20 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z19_val));
        }
        current_statement__ = 639;
        z19 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 642;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 645;
        for (int z18_val = 1; z18_val <= 2; ++z18_val) {
          current_statement__ = 643;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z18_val)) +
              rvalue(m17, "m17",
                index_uni((((((z18_val - 1) * 4) + ((z19 - 1) * 2)) +
                             ((z20 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z18_val));
        }
        current_statement__ = 646;
        z18 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 649;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 652;
        for (int z17_val = 1; z17_val <= 2; ++z17_val) {
          current_statement__ = 650;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z17_val)) +
              rvalue(m16, "m16",
                index_uni(((((((z17_val - 1) * 8) + ((z18 - 1) * 4)) +
                              ((z19 - 1) * 2)) + ((z20 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z17_val));
        }
        current_statement__ = 653;
        z17 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 656;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 659;
        for (int z16_val = 1; z16_val <= 2; ++z16_val) {
          current_statement__ = 657;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z16_val)) +
              rvalue(m15, "m15",
                index_uni((((((((z16_val - 1) * 16) + ((z17 - 1) * 8)) +
                               ((z18 - 1) * 4)) + ((z19 - 1) * 2)) +
                             ((z20 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z16_val));
        }
        current_statement__ = 660;
        z16 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 663;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 666;
        for (int z15_val = 1; z15_val <= 2; ++z15_val) {
          current_statement__ = 664;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z15_val)) +
              rvalue(m14, "m14",
                index_uni(((((((((z15_val - 1) * 32) + ((z16 - 1) * 16)) +
                                ((z17 - 1) * 8)) + ((z18 - 1) * 4)) +
                              ((z19 - 1) * 2)) + ((z20 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z15_val));
        }
        current_statement__ = 667;
        z15 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 670;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 673;
        for (int z14_val = 1; z14_val <= 2; ++z14_val) {
          current_statement__ = 671;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z14_val)) +
              rvalue(m13, "m13",
                index_uni((((((((((z14_val - 1) * 64) + ((z15 - 1) * 32)) +
                                 ((z16 - 1) * 16)) + ((z17 - 1) * 8)) +
                               ((z18 - 1) * 4)) + ((z19 - 1) * 2)) +
                             ((z20 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z14_val));
        }
        current_statement__ = 674;
        z14 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 677;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 680;
        for (int z13_val = 1; z13_val <= 2; ++z13_val) {
          current_statement__ = 678;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z13_val)) +
              rvalue(m12, "m12",
                index_uni(((((((((((z13_val - 1) * 128) + ((z14 - 1) * 64)) +
                                  ((z15 - 1) * 32)) + ((z16 - 1) * 16)) +
                                ((z17 - 1) * 8)) + ((z18 - 1) * 4)) +
                              ((z19 - 1) * 2)) + ((z20 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z13_val));
        }
        current_statement__ = 681;
        z13 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 684;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 687;
        for (int z12_val = 1; z12_val <= 2; ++z12_val) {
          current_statement__ = 685;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z12_val)) +
              rvalue(m11, "m11",
                index_uni((((((((((((z12_val - 1) * 256) + ((z13 - 1) * 128))
                                   + ((z14 - 1) * 64)) + ((z15 - 1) * 32)) +
                                 ((z16 - 1) * 16)) + ((z17 - 1) * 8)) +
                               ((z18 - 1) * 4)) + ((z19 - 1) * 2)) +
                             ((z20 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z12_val));
        }
        current_statement__ = 688;
        z12 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 691;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 694;
        for (int z11_val = 1; z11_val <= 2; ++z11_val) {
          current_statement__ = 692;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z11_val)) +
              rvalue(m10, "m10",
                index_uni(((((((((((((z11_val - 1) * 512) +
                                     ((z12 - 1) * 256)) + ((z13 - 1) * 128))
                                   + ((z14 - 1) * 64)) + ((z15 - 1) * 32)) +
                                 ((z16 - 1) * 16)) + ((z17 - 1) * 8)) +
                               ((z18 - 1) * 4)) + ((z19 - 1) * 2)) +
                             ((z20 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z11_val));
        }
        current_statement__ = 695;
        z11 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 698;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 701;
        for (int z10_val = 1; z10_val <= 2; ++z10_val) {
          current_statement__ = 699;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z10_val)) +
              rvalue(m9, "m9",
                index_uni((((((((((((((z10_val - 1) * 1024) +
                                      ((z11 - 1) * 512)) + ((z12 - 1) * 256))
                                    + ((z13 - 1) * 128)) + ((z14 - 1) * 64))
                                  + ((z15 - 1) * 32)) + ((z16 - 1) * 16)) +
                                ((z17 - 1) * 8)) + ((z18 - 1) * 4)) +
                              ((z19 - 1) * 2)) + ((z20 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z10_val));
        }
        current_statement__ = 702;
        z10 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 705;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 708;
        for (int z9_val = 1; z9_val <= 2; ++z9_val) {
          current_statement__ = 706;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z9_val)) +
              rvalue(m8, "m8",
                index_uni(((((((((((((((z10 - 1) * 2048) +
                                       ((z11 - 1) * 1024)) +
                                      ((z12 - 1) * 512)) + ((z13 - 1) * 256))
                                    + ((z14 - 1) * 128)) + ((z15 - 1) * 64))
                                  + ((z16 - 1) * 32)) + ((z17 - 1) * 16)) +
                                ((z18 - 1) * 8)) + ((z19 - 1) * 4)) +
                              ((z20 - 1) * 2)) + ((z9_val - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z9_val));
        }
        current_statement__ = 709;
        z9 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 712;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 715;
        for (int z8_val = 1; z8_val <= 2; ++z8_val) {
          current_statement__ = 713;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z8_val)) +
              rvalue(m7, "m7",
                index_uni((((((((((((((((z10 - 1) * 4096) +
                                        ((z11 - 1) * 2048)) +
                                       ((z12 - 1) * 1024)) +
                                      ((z13 - 1) * 512)) + ((z14 - 1) * 256))
                                    + ((z15 - 1) * 128)) + ((z16 - 1) * 64))
                                  + ((z17 - 1) * 32)) + ((z18 - 1) * 16)) +
                                ((z19 - 1) * 8)) + ((z20 - 1) * 4)) +
                              ((z8_val - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z8_val));
        }
        current_statement__ = 716;
        z8 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 719;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 722;
        for (int z7_val = 1; z7_val <= 2; ++z7_val) {
          current_statement__ = 720;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z7_val)) +
              rvalue(m6, "m6",
                index_uni(((((((((((((((((z10 - 1) * 8192) +
                                         ((z11 - 1) * 4096)) +
                                        ((z12 - 1) * 2048)) +
                                       ((z13 - 1) * 1024)) +
                                      ((z14 - 1) * 512)) + ((z15 - 1) * 256))
                                    + ((z16 - 1) * 128)) + ((z17 - 1) * 64))
                                  + ((z18 - 1) * 32)) + ((z19 - 1) * 16)) +
                                ((z20 - 1) * 8)) + ((z7_val - 1) * 4)) +
                              ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z7_val));
        }
        current_statement__ = 723;
        z7 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 726;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 729;
        for (int z6_val = 1; z6_val <= 2; ++z6_val) {
          current_statement__ = 727;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z6_val)) +
              rvalue(m5, "m5",
                index_uni((((((((((((((((((z10 - 1) * 16384) +
                                          ((z11 - 1) * 8192)) +
                                         ((z12 - 1) * 4096)) +
                                        ((z13 - 1) * 2048)) +
                                       ((z14 - 1) * 1024)) +
                                      ((z15 - 1) * 512)) + ((z16 - 1) * 256))
                                    + ((z17 - 1) * 128)) + ((z18 - 1) * 64))
                                  + ((z19 - 1) * 32)) + ((z20 - 1) * 16)) +
                                ((z6_val - 1) * 8)) + ((z7 - 1) * 4)) +
                              ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z6_val));
        }
        current_statement__ = 730;
        z6 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 733;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 736;
        for (int z5_val = 1; z5_val <= 2; ++z5_val) {
          current_statement__ = 734;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z5_val)) +
              rvalue(m4, "m4",
                index_uni(((((((((((((((((((z10 - 1) * 32768) +
                                           ((z11 - 1) * 16384)) +
                                          ((z12 - 1) * 8192)) +
                                         ((z13 - 1) * 4096)) +
                                        ((z14 - 1) * 2048)) +
                                       ((z15 - 1) * 1024)) +
                                      ((z16 - 1) * 512)) + ((z17 - 1) * 256))
                                    + ((z18 - 1) * 128)) + ((z19 - 1) * 64))
                                  + ((z20 - 1) * 32)) + ((z5_val - 1) * 16))
                                + ((z6 - 1) * 8)) + ((z7 - 1) * 4)) +
                              ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z5_val));
        }
        current_statement__ = 737;
        z5 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 740;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 743;
        for (int z4_val = 1; z4_val <= 2; ++z4_val) {
          current_statement__ = 741;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z4_val)) +
              rvalue(m3, "m3",
                index_uni((((((((((((((((((((z10 - 1) * 65536) +
                                            ((z11 - 1) * 32768)) +
                                           ((z12 - 1) * 16384)) +
                                          ((z13 - 1) * 8192)) +
                                         ((z14 - 1) * 4096)) +
                                        ((z15 - 1) * 2048)) +
                                       ((z16 - 1) * 1024)) +
                                      ((z17 - 1) * 512)) + ((z18 - 1) * 256))
                                    + ((z19 - 1) * 128)) + ((z20 - 1) * 64))
                                  + ((z4_val - 1) * 32)) + ((z5 - 1) * 16)) +
                                ((z6 - 1) * 8)) + ((z7 - 1) * 4)) +
                              ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z4_val));
        }
        current_statement__ = 744;
        z4 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 747;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 750;
        for (int z3_val = 1; z3_val <= 2; ++z3_val) {
          current_statement__ = 748;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z3_val)) +
              rvalue(m2, "m2",
                index_uni(((((((((((((((((((((z10 - 1) * 131072) +
                                             ((z11 - 1) * 65536)) +
                                            ((z12 - 1) * 32768)) +
                                           ((z13 - 1) * 16384)) +
                                          ((z14 - 1) * 8192)) +
                                         ((z15 - 1) * 4096)) +
                                        ((z16 - 1) * 2048)) +
                                       ((z17 - 1) * 1024)) +
                                      ((z18 - 1) * 512)) + ((z19 - 1) * 256))
                                    + ((z20 - 1) * 128)) +
                                   ((z3_val - 1) * 64)) + ((z4 - 1) * 32)) +
                                 ((z5 - 1) * 16)) + ((z6 - 1) * 8)) +
                               ((z7 - 1) * 4)) + ((z8 - 1) * 2)) +
                             ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z3_val));
        }
        current_statement__ = 751;
        z3 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 754;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 757;
        for (int z2_val = 1; z2_val <= 2; ++z2_val) {
          current_statement__ = 755;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z2_val)) +
              rvalue(m1, "m1",
                index_uni((((((((((((((((((((((z10 - 1) * 262144) +
                                              ((z11 - 1) * 131072)) +
                                             ((z12 - 1) * 65536)) +
                                            ((z13 - 1) * 32768)) +
                                           ((z14 - 1) * 16384)) +
                                          ((z15 - 1) * 8192)) +
                                         ((z16 - 1) * 4096)) +
                                        ((z17 - 1) * 2048)) +
                                       ((z18 - 1) * 1024)) +
                                      ((z19 - 1) * 512)) +
                                     ((z2_val - 1) * 256)) +
                                    ((z20 - 1) * 128)) + ((z3 - 1) * 64)) +
                                  ((z4 - 1) * 32)) + ((z5 - 1) * 16)) +
                                ((z6 - 1) * 8)) + ((z7 - 1) * 4)) +
                              ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z2_val));
        }
        current_statement__ = 758;
        z2 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 761;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 790;
        for (int z1_val = 1; z1_val <= 2; ++z1_val) {
          current_statement__ = 762;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z1_val - 1), prior1)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 763;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z2 - 1), prior2)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 764;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z3 - 1), prior3)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 765;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z4 - 1), prior4)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 766;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z5 - 1), prior5)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 767;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z6 - 1), prior6)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 768;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z7 - 1), prior7)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 769;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z8 - 1), prior8)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 770;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z9 - 1), prior9)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 771;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z10 - 1), prior10)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 772;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z11 - 1), prior11)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 773;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z12 - 1), prior12)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 774;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z13 - 1), prior13)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 775;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z14 - 1), prior14)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 776;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z15 - 1), prior15)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 777;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z16 - 1), prior16)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 778;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z17 - 1), prior17)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 779;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z18 - 1), prior18)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 780;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z19 - 1), prior19)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 781;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z20 - 1), prior20)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 788;
          if (logical_gt(
                ((((((((((((((((((((z1_val + z2) + z3) + z4) + z5) + z6) +
                                z7) + z8) + z9) + z10) + z11) + z12) + z13) +
                         z14) + z15) + z16) + z17) + z18) + z19) + z20) - 20),
                0)) {
            current_statement__ = 785;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d1, 135, 8)),
              "assigning variable acc0", index_uni(z1_val));
            current_statement__ = 786;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d2, 135, 8)),
              "assigning variable acc0", index_uni(z1_val));
          } else {
            current_statement__ = 782;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d1, 80, 8)),
              "assigning variable acc0", index_uni(z1_val));
            current_statement__ = 783;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d2, 80, 8)),
              "assigning variable acc0", index_uni(z1_val));
          }
        }
        current_statement__ = 791;
        z1 = categorical_logit_rng(acc0, base_rng__);
      }
      out__.write(z1);
      out__.write(z10);
      out__.write(z11);
      out__.write(z12);
      out__.write(z13);
      out__.write(z14);
      out__.write(z15);
      out__.write(z16);
      out__.write(z17);
      out__.write(z18);
      out__.write(z19);
      out__.write(z2);
      out__.write(z20);
      out__.write(z3);
      out__.write(z4);
      out__.write(z5);
      out__.write(z6);
      out__.write(z7);
      out__.write(z8);
      out__.write(z9);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      local_scalar_t__ prior1;
      prior1 = DUMMY_VAR__;
      
      prior1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior1);
      local_scalar_t__ prior10;
      prior10 = DUMMY_VAR__;
      
      prior10 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior10);
      local_scalar_t__ prior11;
      prior11 = DUMMY_VAR__;
      
      prior11 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior11);
      local_scalar_t__ prior12;
      prior12 = DUMMY_VAR__;
      
      prior12 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior12);
      local_scalar_t__ prior13;
      prior13 = DUMMY_VAR__;
      
      prior13 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior13);
      local_scalar_t__ prior14;
      prior14 = DUMMY_VAR__;
      
      prior14 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior14);
      local_scalar_t__ prior15;
      prior15 = DUMMY_VAR__;
      
      prior15 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior15);
      local_scalar_t__ prior16;
      prior16 = DUMMY_VAR__;
      
      prior16 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior16);
      local_scalar_t__ prior17;
      prior17 = DUMMY_VAR__;
      
      prior17 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior17);
      local_scalar_t__ prior18;
      prior18 = DUMMY_VAR__;
      
      prior18 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior18);
      local_scalar_t__ prior19;
      prior19 = DUMMY_VAR__;
      
      prior19 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior19);
      local_scalar_t__ prior2;
      prior2 = DUMMY_VAR__;
      
      prior2 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior2);
      local_scalar_t__ prior20;
      prior20 = DUMMY_VAR__;
      
      prior20 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior20);
      local_scalar_t__ prior3;
      prior3 = DUMMY_VAR__;
      
      prior3 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior3);
      local_scalar_t__ prior4;
      prior4 = DUMMY_VAR__;
      
      prior4 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior4);
      local_scalar_t__ prior5;
      prior5 = DUMMY_VAR__;
      
      prior5 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior5);
      local_scalar_t__ prior6;
      prior6 = DUMMY_VAR__;
      
      prior6 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior6);
      local_scalar_t__ prior7;
      prior7 = DUMMY_VAR__;
      
      prior7 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior7);
      local_scalar_t__ prior8;
      prior8 = DUMMY_VAR__;
      
      prior8 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior8);
      local_scalar_t__ prior9;
      prior9 = DUMMY_VAR__;
      
      prior9 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior9);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"prior1", "prior10", "prior11",
      "prior12", "prior13", "prior14", "prior15", "prior16", "prior17",
      "prior18", "prior19", "prior2", "prior20", "prior3", "prior4",
      "prior5", "prior6", "prior7", "prior8", "prior9", "m1", "m10", "m11",
      "m12", "m13", "m14", "m15", "m16", "m17", "m18", "m19", "m2", "m20",
      "m3", "m4", "m5", "m6", "m7", "m8", "m9", "z1", "z10", "z11", "z12",
      "z13", "z14", "z15", "z16", "z17", "z18", "z19", "z2", "z20", "z3",
      "z4", "z5", "z6", "z7", "z8", "z9"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(524288)},
      std::vector<size_t>{static_cast<size_t>(1024)},
      std::vector<size_t>{static_cast<size_t>(512)},
      std::vector<size_t>{static_cast<size_t>(256)},
      std::vector<size_t>{static_cast<size_t>(128)},
      std::vector<size_t>{static_cast<size_t>(64)},
      std::vector<size_t>{static_cast<size_t>(32)},
      std::vector<size_t>{static_cast<size_t>(16)},
      std::vector<size_t>{static_cast<size_t>(8)},
      std::vector<size_t>{static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(262144)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(131072)},
      std::vector<size_t>{static_cast<size_t>(65536)},
      std::vector<size_t>{static_cast<size_t>(32768)},
      std::vector<size_t>{static_cast<size_t>(16384)},
      std::vector<size_t>{static_cast<size_t>(8192)},
      std::vector<size_t>{static_cast<size_t>(4096)},
      std::vector<size_t>{static_cast<size_t>(2048)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "prior1");
    param_names__.emplace_back(std::string() + "prior10");
    param_names__.emplace_back(std::string() + "prior11");
    param_names__.emplace_back(std::string() + "prior12");
    param_names__.emplace_back(std::string() + "prior13");
    param_names__.emplace_back(std::string() + "prior14");
    param_names__.emplace_back(std::string() + "prior15");
    param_names__.emplace_back(std::string() + "prior16");
    param_names__.emplace_back(std::string() + "prior17");
    param_names__.emplace_back(std::string() + "prior18");
    param_names__.emplace_back(std::string() + "prior19");
    param_names__.emplace_back(std::string() + "prior2");
    param_names__.emplace_back(std::string() + "prior20");
    param_names__.emplace_back(std::string() + "prior3");
    param_names__.emplace_back(std::string() + "prior4");
    param_names__.emplace_back(std::string() + "prior5");
    param_names__.emplace_back(std::string() + "prior6");
    param_names__.emplace_back(std::string() + "prior7");
    param_names__.emplace_back(std::string() + "prior8");
    param_names__.emplace_back(std::string() + "prior9");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 524288; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 1024; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m10" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 512; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m11" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 256; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m12" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 128; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m13" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 64; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m14" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 32; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m15" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 16; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m16" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m17" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m18" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m19" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 262144; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m2" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "m20");
      for (int sym1__ = 1; sym1__ <= 131072; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m3" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 65536; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m4" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 32768; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m5" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 16384; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m6" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 8192; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m7" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4096; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m8" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2048; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m9" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "z1");
      param_names__.emplace_back(std::string() + "z10");
      param_names__.emplace_back(std::string() + "z11");
      param_names__.emplace_back(std::string() + "z12");
      param_names__.emplace_back(std::string() + "z13");
      param_names__.emplace_back(std::string() + "z14");
      param_names__.emplace_back(std::string() + "z15");
      param_names__.emplace_back(std::string() + "z16");
      param_names__.emplace_back(std::string() + "z17");
      param_names__.emplace_back(std::string() + "z18");
      param_names__.emplace_back(std::string() + "z19");
      param_names__.emplace_back(std::string() + "z2");
      param_names__.emplace_back(std::string() + "z20");
      param_names__.emplace_back(std::string() + "z3");
      param_names__.emplace_back(std::string() + "z4");
      param_names__.emplace_back(std::string() + "z5");
      param_names__.emplace_back(std::string() + "z6");
      param_names__.emplace_back(std::string() + "z7");
      param_names__.emplace_back(std::string() + "z8");
      param_names__.emplace_back(std::string() + "z9");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "prior1");
    param_names__.emplace_back(std::string() + "prior10");
    param_names__.emplace_back(std::string() + "prior11");
    param_names__.emplace_back(std::string() + "prior12");
    param_names__.emplace_back(std::string() + "prior13");
    param_names__.emplace_back(std::string() + "prior14");
    param_names__.emplace_back(std::string() + "prior15");
    param_names__.emplace_back(std::string() + "prior16");
    param_names__.emplace_back(std::string() + "prior17");
    param_names__.emplace_back(std::string() + "prior18");
    param_names__.emplace_back(std::string() + "prior19");
    param_names__.emplace_back(std::string() + "prior2");
    param_names__.emplace_back(std::string() + "prior20");
    param_names__.emplace_back(std::string() + "prior3");
    param_names__.emplace_back(std::string() + "prior4");
    param_names__.emplace_back(std::string() + "prior5");
    param_names__.emplace_back(std::string() + "prior6");
    param_names__.emplace_back(std::string() + "prior7");
    param_names__.emplace_back(std::string() + "prior8");
    param_names__.emplace_back(std::string() + "prior9");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 524288; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 1024; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m10" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 512; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m11" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 256; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m12" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 128; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m13" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 64; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m14" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 32; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m15" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 16; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m16" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m17" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m18" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m19" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 262144; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m2" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "m20");
      for (int sym1__ = 1; sym1__ <= 131072; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m3" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 65536; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m4" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 32768; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m5" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 16384; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m6" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 8192; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m7" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4096; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m8" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2048; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m9" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "z1");
      param_names__.emplace_back(std::string() + "z10");
      param_names__.emplace_back(std::string() + "z11");
      param_names__.emplace_back(std::string() + "z12");
      param_names__.emplace_back(std::string() + "z13");
      param_names__.emplace_back(std::string() + "z14");
      param_names__.emplace_back(std::string() + "z15");
      param_names__.emplace_back(std::string() + "z16");
      param_names__.emplace_back(std::string() + "z17");
      param_names__.emplace_back(std::string() + "z18");
      param_names__.emplace_back(std::string() + "z19");
      param_names__.emplace_back(std::string() + "z2");
      param_names__.emplace_back(std::string() + "z20");
      param_names__.emplace_back(std::string() + "z3");
      param_names__.emplace_back(std::string() + "z4");
      param_names__.emplace_back(std::string() + "z5");
      param_names__.emplace_back(std::string() + "z6");
      param_names__.emplace_back(std::string() + "z7");
      param_names__.emplace_back(std::string() + "z8");
      param_names__.emplace_back(std::string() + "z9");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"prior1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior10\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior11\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior12\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior13\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior14\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior15\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior16\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior17\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior18\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior19\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior20\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior5\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior6\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior7\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior8\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior9\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(524288) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m10\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1024) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m11\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(512) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m12\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(256) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m13\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(128) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m14\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(64) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m15\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(32) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m16\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(16) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m17\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m18\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m19\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(262144) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m20\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"m3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(131072) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(65536) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(32768) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(16384) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8192) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4096) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m9\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2048) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"z1\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z10\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z11\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z12\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z13\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z14\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z15\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z16\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z17\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z18\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z19\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z2\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z20\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z3\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z4\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z5\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z6\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z7\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z8\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z9\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"prior1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior10\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior11\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior12\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior13\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior14\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior15\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior16\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior17\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior18\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior19\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior20\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior5\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior6\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior7\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior8\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior9\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(524288) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m10\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1024) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m11\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(512) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m12\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(256) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m13\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(128) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m14\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(64) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m15\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(32) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m16\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(16) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m17\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m18\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m19\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(262144) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m20\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"m3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(131072) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(65536) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(32768) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(16384) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8192) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4096) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m9\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2048) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"z1\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z10\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z11\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z12\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z13\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z14\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z15\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z16\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z17\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z18\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z19\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z2\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z20\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z3\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z4\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z5\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z6\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z7\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z8\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z9\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
           + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  (((((((((((((((((((524288 + 1024) + 512) + 256) + 128) + 64) + 32) + 16) +
               8) + 4) + 2) + 262144) + 1) + 131072) + 65536) + 32768) +
       16384) + 8192) + 4096) + 2048);
      const size_t num_gen_quantities = 
  (((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
           + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
           + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  (((((((((((((((((((524288 + 1024) + 512) + 256) + 128) + 64) + 32) + 16) +
               8) + 4) + 2) + 262144) + 1) + 131072) + 65536) + 32768) +
       16384) + 8192) + 4096) + 2048);
      const size_t num_gen_quantities = 
  (((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
           + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 20> names__{"prior1", "prior10",
      "prior11", "prior12", "prior13", "prior14", "prior15", "prior16",
      "prior17", "prior18", "prior19", "prior2", "prior20", "prior3",
      "prior4", "prior5", "prior6", "prior7", "prior8", "prior9"};
      const std::array<Eigen::Index, 20> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = or_20_model_namespace::or_20_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return or_20_model_namespace::profiles__;
}

#endif


