
// Code generated by stanc v2.28.1
#include <stan/model/model_header.hpp>
namespace or_15_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 541> locations_array__ = 
{" (found before start of program)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 7, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 8, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 9, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 10, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 11, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 12, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 13, column 2 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 14, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 15, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 16, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 17, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 18, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 19, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 20, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 21, column 2 to column 32)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 25, column 1 to column 16)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 101, column 1 to column 14)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 102, column 1 to column 14)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 103, column 1 to column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 104, column 1 to column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 105, column 1 to column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 106, column 2 to column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 107, column 1 to column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 108, column 1 to column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 109, column 1 to column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 110, column 1 to column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 111, column 1 to column 14)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 112, column 1 to column 14)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 113, column 1 to column 14)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 114, column 1 to column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 26, column 2 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 41, column 32 to column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 42, column 32 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 44, column 34 to column 87)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 45, column 34 to column 83)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 46, column 34 to column 83)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 47, column 34 to column 83)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 48, column 34 to column 83)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 49, column 34 to column 83)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 50, column 34 to column 83)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 51, column 34 to column 83)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 52, column 34 to column 83)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 53, column 34 to column 85)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 54, column 34 to column 85)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 55, column 34 to column 85)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 56, column 34 to column 85)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 57, column 34 to column 85)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 58, column 34 to column 85)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 65, column 36 to column 75)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 66, column 36 to column 75)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 64, column 38 to line 68, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 60, column 36 to column 76)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 61, column 36 to column 76)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 59, column 161 to line 63, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 59, column 34 to line 68, column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 43, column 52 to line 69, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 43, column 32 to line 69, column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 70, column 32 to column 214)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 41, column 30 to line 71, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 40, column 45 to line 73, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 40, column 28 to line 73, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 39, column 43 to line 75, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 39, column 26 to line 75, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 38, column 41 to line 77, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 38, column 24 to line 77, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 37, column 39 to line 79, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 37, column 22 to line 79, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 36, column 37 to line 81, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 36, column 20 to line 81, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 35, column 35 to line 83, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 35, column 18 to line 83, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 34, column 32 to line 85, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 34, column 16 to line 85, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 33, column 30 to line 87, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 33, column 14 to line 87, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 32, column 28 to line 89, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 32, column 12 to line 89, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 31, column 26 to line 91, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 31, column 10 to line 91, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 30, column 24 to line 93, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 30, column 8 to line 93, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 29, column 22 to line 95, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 29, column 6 to line 95, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 28, column 20 to line 97, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 28, column 4 to line 97, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 27, column 18 to line 99, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 27, column 2 to line 99, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 115, column 2 to column 26)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 129, column 30 to column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 130, column 30 to column 53)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 132, column 32 to column 213)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 131, column 50 to line 134, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 131, column 30 to line 134, column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 135, column 30 to column 200)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 129, column 28 to line 136, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 128, column 43 to line 138, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 128, column 26 to line 138, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 127, column 41 to line 140, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 127, column 24 to line 140, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 126, column 39 to line 142, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 126, column 22 to line 142, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 125, column 37 to line 144, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 125, column 20 to line 144, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 124, column 35 to line 146, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 124, column 18 to line 146, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 123, column 33 to line 148, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 123, column 16 to line 148, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 122, column 30 to line 150, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 122, column 14 to line 150, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 121, column 28 to line 152, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 121, column 12 to line 152, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 120, column 26 to line 154, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 120, column 10 to line 154, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 119, column 24 to line 156, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 119, column 8 to line 156, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 118, column 22 to line 158, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 118, column 6 to line 158, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 117, column 20 to line 160, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 117, column 4 to line 160, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 116, column 18 to line 162, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 116, column 2 to line 162, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 163, column 2 to column 26)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 176, column 28 to column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 177, column 28 to column 51)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 179, column 30 to column 199)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 178, column 48 to line 181, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 178, column 28 to line 181, column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 182, column 28 to column 186)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 176, column 26 to line 183, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 175, column 41 to line 185, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 175, column 24 to line 185, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 174, column 39 to line 187, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 174, column 22 to line 187, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 173, column 37 to line 189, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 173, column 20 to line 189, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 172, column 35 to line 191, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 172, column 18 to line 191, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 171, column 33 to line 193, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 171, column 16 to line 193, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 170, column 31 to line 195, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 170, column 14 to line 195, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 169, column 28 to line 197, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 169, column 12 to line 197, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 168, column 26 to line 199, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 168, column 10 to line 199, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 167, column 24 to line 201, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 167, column 8 to line 201, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 166, column 22 to line 203, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 166, column 6 to line 203, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 165, column 20 to line 205, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 165, column 4 to line 205, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 164, column 18 to line 207, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 164, column 2 to line 207, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 208, column 2 to column 26)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 220, column 26 to column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 221, column 26 to column 49)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 223, column 28 to column 185)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 222, column 46 to line 225, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 222, column 26 to line 225, column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 226, column 26 to column 172)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 220, column 24 to line 227, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 219, column 39 to line 229, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 219, column 22 to line 229, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 218, column 37 to line 231, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 218, column 20 to line 231, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 217, column 35 to line 233, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 217, column 18 to line 233, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 216, column 33 to line 235, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 216, column 16 to line 235, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 215, column 31 to line 237, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 215, column 14 to line 237, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 214, column 29 to line 239, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 214, column 12 to line 239, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 213, column 26 to line 241, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 213, column 10 to line 241, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 212, column 24 to line 243, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 212, column 8 to line 243, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 211, column 22 to line 245, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 211, column 6 to line 245, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 210, column 20 to line 247, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 210, column 4 to line 247, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 209, column 18 to line 249, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 209, column 2 to line 249, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 250, column 2 to column 26)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 261, column 24 to column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 262, column 24 to column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 264, column 26 to column 171)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 263, column 44 to line 266, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 263, column 24 to line 266, column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 267, column 24 to column 158)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 261, column 22 to line 268, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 260, column 37 to line 270, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 260, column 20 to line 270, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 259, column 35 to line 272, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 259, column 18 to line 272, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 258, column 33 to line 274, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 258, column 16 to line 274, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 257, column 31 to line 276, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 257, column 14 to line 276, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 256, column 29 to line 278, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 256, column 12 to line 278, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 255, column 27 to line 280, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 255, column 10 to line 280, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 254, column 24 to line 282, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 254, column 8 to line 282, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 253, column 22 to line 284, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 253, column 6 to line 284, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 252, column 20 to line 286, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 252, column 4 to line 286, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 251, column 18 to line 288, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 251, column 2 to line 288, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 289, column 2 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 299, column 22 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 300, column 22 to column 45)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 302, column 24 to column 157)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 301, column 42 to line 304, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 301, column 22 to line 304, column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 305, column 22 to column 145)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 299, column 20 to line 306, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 298, column 35 to line 308, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 298, column 18 to line 308, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 297, column 33 to line 310, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 297, column 16 to line 310, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 296, column 31 to line 312, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 296, column 14 to line 312, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 295, column 29 to line 314, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 295, column 12 to line 314, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 294, column 27 to line 316, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 294, column 10 to line 316, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 293, column 25 to line 318, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 293, column 8 to line 318, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 292, column 22 to line 320, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 292, column 6 to line 320, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 291, column 20 to line 322, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 291, column 4 to line 322, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 290, column 18 to line 324, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 290, column 2 to line 324, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 325, column 2 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 334, column 20 to column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 335, column 20 to column 43)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 337, column 22 to column 144)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 336, column 40 to line 339, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 336, column 20 to line 339, column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 340, column 20 to column 132)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 334, column 18 to line 341, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 333, column 33 to line 343, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 333, column 16 to line 343, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 332, column 31 to line 345, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 332, column 14 to line 345, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 331, column 29 to line 347, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 331, column 12 to line 347, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 330, column 27 to line 349, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 330, column 10 to line 349, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 329, column 25 to line 351, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 329, column 8 to line 351, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 328, column 23 to line 353, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 328, column 6 to line 353, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 327, column 20 to line 355, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 327, column 4 to line 355, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 326, column 18 to line 357, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 326, column 2 to line 357, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 358, column 2 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 366, column 18 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 367, column 18 to column 41)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 369, column 20 to column 131)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 368, column 38 to line 371, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 368, column 18 to line 371, column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 372, column 18 to column 119)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 366, column 16 to line 373, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 365, column 31 to line 375, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 365, column 14 to line 375, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 364, column 29 to line 377, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 364, column 12 to line 377, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 363, column 27 to line 379, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 363, column 10 to line 379, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 362, column 25 to line 381, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 362, column 8 to line 381, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 361, column 23 to line 383, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 361, column 6 to line 383, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 360, column 21 to line 385, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 360, column 4 to line 385, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 359, column 18 to line 387, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 359, column 2 to line 387, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 388, column 2 to column 24)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 395, column 16 to column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 396, column 16 to column 39)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 398, column 18 to column 118)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 397, column 36 to line 400, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 397, column 16 to line 400, column 17)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 401, column 16 to column 107)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 395, column 14 to line 402, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 394, column 29 to line 404, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 394, column 12 to line 404, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 393, column 27 to line 406, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 393, column 10 to line 406, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 392, column 25 to line 408, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 392, column 8 to line 408, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 391, column 23 to line 410, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 391, column 6 to line 410, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 390, column 21 to line 412, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 390, column 4 to line 412, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 389, column 19 to line 414, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 389, column 2 to line 414, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 415, column 2 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 421, column 14 to column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 422, column 14 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 424, column 16 to column 107)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 423, column 35 to line 426, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 423, column 14 to line 426, column 15)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 427, column 14 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 421, column 12 to line 428, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 420, column 27 to line 430, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 420, column 10 to line 430, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 419, column 25 to line 432, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 419, column 8 to line 432, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 418, column 23 to line 434, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 418, column 6 to line 434, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 417, column 21 to line 436, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 417, column 4 to line 436, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 416, column 19 to line 438, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 416, column 2 to line 438, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 439, column 2 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 444, column 12 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 445, column 12 to column 35)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 447, column 14 to column 95)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 446, column 33 to line 449, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 446, column 12 to line 449, column 13)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 450, column 12 to column 82)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 444, column 10 to line 451, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 443, column 25 to line 453, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 443, column 8 to line 453, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 442, column 23 to line 455, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 442, column 6 to line 455, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 441, column 21 to line 457, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 441, column 4 to line 457, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 440, column 19 to line 459, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 440, column 2 to line 459, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 460, column 2 to column 24)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 464, column 10 to column 25)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 465, column 10 to column 33)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 467, column 12 to column 82)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 466, column 31 to line 469, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 466, column 10 to line 469, column 11)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 470, column 10 to column 70)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 464, column 8 to line 471, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 463, column 23 to line 473, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 463, column 6 to line 473, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 462, column 21 to line 475, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 462, column 4 to line 475, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 461, column 19 to line 477, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 461, column 2 to line 477, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 478, column 2 to column 24)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 481, column 8 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 482, column 8 to column 31)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 484, column 10 to column 70)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 483, column 29 to line 486, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 483, column 8 to line 486, column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 487, column 8 to column 58)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 481, column 6 to line 488, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 480, column 21 to line 490, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 480, column 4 to line 490, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 479, column 19 to line 492, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 479, column 2 to line 492, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 493, column 2 to column 24)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 495, column 6 to column 21)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 496, column 6 to column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 498, column 8 to column 58)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 497, column 27 to line 500, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 497, column 6 to line 500, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 501, column 6 to column 36)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 495, column 4 to line 502, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 494, column 19 to line 504, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 494, column 2 to line 504, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 505, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 506, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 507, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 509, column 6 to column 46)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 508, column 25 to line 511, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 508, column 4 to line 511, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 512, column 4 to column 29)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 506, column 2 to line 513, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 537, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 538, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 539, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 540, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 541, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 542, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 543, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 544, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 545, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 546, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 547, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 548, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 549, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 550, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 551, column 2 to column 9)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 552, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 553, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 555, column 6 to column 46)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 554, column 25 to line 557, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 554, column 4 to line 557, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 558, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 552, column 2 to line 559, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 560, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 561, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 563, column 6 to column 56)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 562, column 25 to line 565, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 562, column 4 to line 565, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 566, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 560, column 2 to line 567, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 568, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 569, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 571, column 6 to column 66)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 570, column 25 to line 573, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 570, column 4 to line 573, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 574, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 568, column 2 to line 575, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 576, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 577, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 579, column 6 to column 76)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 578, column 25 to line 581, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 578, column 4 to line 581, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 582, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 576, column 2 to line 583, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 584, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 585, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 587, column 6 to column 87)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 586, column 25 to line 589, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 586, column 4 to line 589, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 590, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 584, column 2 to line 591, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 592, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 593, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 595, column 6 to column 97)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 594, column 25 to line 597, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 594, column 4 to line 597, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 598, column 4 to column 38)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 592, column 2 to line 599, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 600, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 601, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 603, column 6 to column 106)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 602, column 24 to line 605, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 602, column 4 to line 605, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 606, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 600, column 2 to line 607, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 608, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 609, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 611, column 6 to column 117)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 610, column 24 to line 613, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 610, column 4 to line 613, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 614, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 608, column 2 to line 615, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 616, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 617, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 619, column 6 to column 128)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 618, column 24 to line 621, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 618, column 4 to line 621, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 622, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 616, column 2 to line 623, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 624, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 625, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 627, column 6 to column 139)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 626, column 24 to line 629, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 626, column 4 to line 629, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 630, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 624, column 2 to line 631, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 632, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 633, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 635, column 6 to column 151)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 634, column 24 to line 637, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 634, column 4 to line 637, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 638, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 632, column 2 to line 639, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 640, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 641, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 643, column 6 to column 163)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 642, column 24 to line 645, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 642, column 4 to line 645, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 646, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 640, column 2 to line 647, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 648, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 649, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 651, column 6 to column 175)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 650, column 24 to line 653, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 650, column 4 to line 653, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 654, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 648, column 2 to line 655, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 656, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 657, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 659, column 6 to column 187)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 658, column 24 to line 661, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 658, column 4 to line 661, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 662, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 656, column 2 to line 663, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 664, column 4 to column 19)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 665, column 4 to column 27)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 667, column 6 to column 59)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 668, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 669, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 670, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 671, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 672, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 673, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 674, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 675, column 6 to column 55)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 676, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 677, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 678, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 679, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 680, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 681, column 6 to column 57)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 688, column 8 to column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 689, column 8 to column 47)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 687, column 10 to line 691, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 683, column 8 to column 48)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 684, column 8 to column 48)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 682, column 133 to line 686, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 682, column 6 to line 691, column 7)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 666, column 24 to line 692, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 666, column 4 to line 692, column 5)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 693, column 4 to column 37)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 664, column 2 to line 694, column 3)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 518, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 519, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 520, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 521, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 522, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 523, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 524, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 525, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 526, column 2 to column 22)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 527, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 528, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 529, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 530, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 531, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 532, column 2 to column 23)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 533, column 2 to column 16)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 2, column 2 to column 10)",
 " (in '/space/poorvagarg/benchmarks_stan/or/or_15.stan', line 3, column 2 to column 10)"};



class or_15_model final : public model_base_crtp<or_15_model> {

 private:
  double d1;
  double d2; 
  
 
 public:
  ~or_15_model() { }
  
  inline std::string model_name() const final { return "or_15_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.1", "stancflags = "};
  }
  
  
  or_15_model(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "or_15_model_namespace::or_15_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 539;
      context__.validate_dims("data initialization","d1","double",
           std::vector<size_t>{});
      d1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 539;
      d1 = context__.vals_r("d1")[(1 - 1)];
      current_statement__ = 540;
      context__.validate_dims("data initialization","d2","double",
           std::vector<size_t>{});
      d2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 540;
      d2 = context__.vals_r("d2")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 
      1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "or_15_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ prior1;
      prior1 = DUMMY_VAR__;
      
      current_statement__ = 1;
      prior1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior10;
      prior10 = DUMMY_VAR__;
      
      current_statement__ = 2;
      prior10 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior11;
      prior11 = DUMMY_VAR__;
      
      current_statement__ = 3;
      prior11 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior12;
      prior12 = DUMMY_VAR__;
      
      current_statement__ = 4;
      prior12 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior13;
      prior13 = DUMMY_VAR__;
      
      current_statement__ = 5;
      prior13 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior14;
      prior14 = DUMMY_VAR__;
      
      current_statement__ = 6;
      prior14 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior15;
      prior15 = DUMMY_VAR__;
      
      current_statement__ = 7;
      prior15 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      local_scalar_t__ prior2;
      prior2 = DUMMY_VAR__;
      
      current_statement__ = 8;
      prior2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior3;
      prior3 = DUMMY_VAR__;
      
      current_statement__ = 9;
      prior3 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior4;
      prior4 = DUMMY_VAR__;
      
      current_statement__ = 10;
      prior4 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior5;
      prior5 = DUMMY_VAR__;
      
      current_statement__ = 11;
      prior5 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior6;
      prior6 = DUMMY_VAR__;
      
      current_statement__ = 12;
      prior6 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior7;
      prior7 = DUMMY_VAR__;
      
      current_statement__ = 13;
      prior7 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior8;
      prior8 = DUMMY_VAR__;
      
      current_statement__ = 14;
      prior8 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ prior9;
      prior9 = DUMMY_VAR__;
      
      current_statement__ = 15;
      prior9 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      std::vector<local_scalar_t__> m1;
      m1 = std::vector<local_scalar_t__>(16384, DUMMY_VAR__);
      
      current_statement__ = 31;
      assign(m1, rep_array(0, 16384), "assigning variable m1");
      current_statement__ = 87;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 85;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 83;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 81;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 79;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 77;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 75;
                  for (int z3 = 1; z3 <= 2; ++z3) {
                    current_statement__ = 73;
                    for (int z2 = 1; z2 <= 2; ++z2) {
                      current_statement__ = 71;
                      for (int z15 = 1; z15 <= 2; ++z15) {
                        current_statement__ = 69;
                        for (int z14 = 1; z14 <= 2; ++z14) {
                          current_statement__ = 67;
                          for (int z13 = 1; z13 <= 2; ++z13) {
                            current_statement__ = 65;
                            for (int z12 = 1; z12 <= 2; ++z12) {
                              current_statement__ = 63;
                              for (int z11 = 1; z11 <= 2; ++z11) {
                                current_statement__ = 61;
                                for (int z10 = 1; z10 <= 2; ++z10) {
                                  {
                                    Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                    acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                    stan::math::fill(acc0, DUMMY_VAR__);
                                    
                                    current_statement__ = 33;
                                    assign(acc0, rep_vector(0, 2),
                                      "assigning variable acc0");
                                    current_statement__ = 57;
                                    for (int z1_val = 1; z1_val <= 2;
                                         ++z1_val) {
                                      current_statement__ = 34;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z1_val - 1),
                                            prior1)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 35;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z2 - 1),
                                            prior2)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 36;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z3 - 1),
                                            prior3)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 37;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z4 - 1),
                                            prior4)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 38;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z5 - 1),
                                            prior5)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 39;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z6 - 1),
                                            prior6)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 40;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z7 - 1),
                                            prior7)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 41;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z8 - 1),
                                            prior8)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 42;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z9 - 1),
                                            prior9)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 43;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z10 - 1),
                                            prior10)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 44;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z11 - 1),
                                            prior11)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 45;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z12 - 1),
                                            prior12)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 46;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z13 - 1),
                                            prior13)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 47;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z14 - 1),
                                            prior14)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 48;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z15 - 1),
                                            prior15)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 55;
                                      if (logical_gt(
                                            (((((((((((((((z1_val + z2) + z3)
                                                          + z4) + z5) + z6) +
                                                       z7) + z8) + z9) + z10)
                                                   + z11) + z12) + z13) +
                                                z14) + z15) - 15), 0)) {
                                        current_statement__ = 52;
                                        assign(acc0,
                                          (rvalue(acc0, "acc0",
                                             index_uni(z1_val)) +
                                            normal_lpdf<false>(d1, 135, 8)),
                                          "assigning variable acc0", 
                                          index_uni(z1_val));
                                        current_statement__ = 53;
                                        assign(acc0,
                                          (rvalue(acc0, "acc0",
                                             index_uni(z1_val)) +
                                            normal_lpdf<false>(d2, 135, 8)),
                                          "assigning variable acc0", 
                                          index_uni(z1_val));
                                      } else {
                                        current_statement__ = 49;
                                        assign(acc0,
                                          (rvalue(acc0, "acc0",
                                             index_uni(z1_val)) +
                                            normal_lpdf<false>(d1, 80, 8)),
                                          "assigning variable acc0", 
                                          index_uni(z1_val));
                                        current_statement__ = 50;
                                        assign(acc0,
                                          (rvalue(acc0, "acc0",
                                             index_uni(z1_val)) +
                                            normal_lpdf<false>(d2, 80, 8)),
                                          "assigning variable acc0", 
                                          index_uni(z1_val));
                                      }
                                    }
                                    current_statement__ = 58;
                                    assign(m1,
                                      (rvalue(m1, "m1",
                                         index_uni(((((((((((((((((z10 - 1) *
                                                                   8192) +
                                                                  ((z11 - 1)
                                                                    * 4096))
                                                                 +
                                                                 ((z12 - 1) *
                                                                   2048)) +
                                                                ((z13 - 1) *
                                                                  1024)) +
                                                               ((z14 - 1) *
                                                                 512)) +
                                                              ((z15 - 1) *
                                                                256)) +
                                                             ((z2 - 1) * 128))
                                                            +
                                                            ((z3 - 1) * 64))
                                                           + ((z4 - 1) * 32))
                                                          + ((z5 - 1) * 16))
                                                         + ((z6 - 1) * 8)) +
                                                        ((z7 - 1) * 4)) +
                                                       ((z8 - 1) * 2)) +
                                                      ((z9 - 1) * 1)) + 1)))
                                        + log_sum_exp(acc0)),
                                      "assigning variable m1", index_uni(
                                                                 ((((((((((((((((z10
                                                                    - 1) *
                                                                    8192) +
                                                                    ((z11 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z14 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z2 - 1)
                                                                    * 128)) +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                   1)));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      std::vector<local_scalar_t__> m10;
      m10 = std::vector<local_scalar_t__>(32, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m11;
      m11 = std::vector<local_scalar_t__>(16, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m12;
      m12 = std::vector<local_scalar_t__>(8, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m13;
      m13 = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m14;
      m14 = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
      
      local_scalar_t__ m15;
      m15 = DUMMY_VAR__;
      
      std::vector<local_scalar_t__> m2;
      m2 = std::vector<local_scalar_t__>(8192, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m3;
      m3 = std::vector<local_scalar_t__>(4096, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m4;
      m4 = std::vector<local_scalar_t__>(2048, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m5;
      m5 = std::vector<local_scalar_t__>(1024, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m6;
      m6 = std::vector<local_scalar_t__>(512, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m7;
      m7 = std::vector<local_scalar_t__>(256, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m8;
      m8 = std::vector<local_scalar_t__>(128, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> m9;
      m9 = std::vector<local_scalar_t__>(64, DUMMY_VAR__);
      
      current_statement__ = 88;
      assign(m2, rep_array(0, 8192), "assigning variable m2");
      current_statement__ = 121;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 119;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 117;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 115;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 113;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 111;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 109;
                  for (int z3 = 1; z3 <= 2; ++z3) {
                    current_statement__ = 107;
                    for (int z15 = 1; z15 <= 2; ++z15) {
                      current_statement__ = 105;
                      for (int z14 = 1; z14 <= 2; ++z14) {
                        current_statement__ = 103;
                        for (int z13 = 1; z13 <= 2; ++z13) {
                          current_statement__ = 101;
                          for (int z12 = 1; z12 <= 2; ++z12) {
                            current_statement__ = 99;
                            for (int z11 = 1; z11 <= 2; ++z11) {
                              current_statement__ = 97;
                              for (int z10 = 1; z10 <= 2; ++z10) {
                                {
                                  Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                  acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                  stan::math::fill(acc0, DUMMY_VAR__);
                                  
                                  current_statement__ = 90;
                                  assign(acc0, rep_vector(0, 2),
                                    "assigning variable acc0");
                                  current_statement__ = 93;
                                  for (int z2_val = 1; z2_val <= 2; ++z2_val) {
                                    current_statement__ = 91;
                                    assign(acc0,
                                      (rvalue(acc0, "acc0",
                                         index_uni(z2_val)) +
                                        rvalue(m1, "m1",
                                          index_uni(((((((((((((((((z10 - 1)
                                                                    * 8192) +
                                                                   ((z11 - 1)
                                                                    * 4096))
                                                                  +
                                                                  ((z12 - 1)
                                                                    * 2048))
                                                                 +
                                                                 ((z13 - 1) *
                                                                   1024)) +
                                                                ((z14 - 1) *
                                                                  512)) +
                                                               ((z15 - 1) *
                                                                 256)) +
                                                              ((z2_val - 1) *
                                                                128)) +
                                                             ((z3 - 1) * 64))
                                                            +
                                                            ((z4 - 1) * 32))
                                                           + ((z5 - 1) * 16))
                                                          + ((z6 - 1) * 8)) +
                                                         ((z7 - 1) * 4)) +
                                                        ((z8 - 1) * 2)) +
                                                       ((z9 - 1) * 1)) + 1)))),
                                      "assigning variable acc0", index_uni(z2_val));
                                  }
                                  current_statement__ = 94;
                                  assign(m2,
                                    (rvalue(m2, "m2",
                                       index_uni((((((((((((((((z10 - 1) *
                                                                4096) +
                                                               ((z11 - 1) *
                                                                 2048)) +
                                                              ((z12 - 1) *
                                                                1024)) +
                                                             ((z13 - 1) *
                                                               512)) +
                                                            ((z14 - 1) * 256))
                                                           +
                                                           ((z15 - 1) * 128))
                                                          + ((z3 - 1) * 64))
                                                         + ((z4 - 1) * 32)) +
                                                        ((z5 - 1) * 16)) +
                                                       ((z6 - 1) * 8)) +
                                                      ((z7 - 1) * 4)) +
                                                     ((z8 - 1) * 2)) +
                                                    ((z9 - 1) * 1)) + 1))) +
                                      log_sum_exp(acc0)),
                                    "assigning variable m2", index_uni(
                                                               (((((((((((((((z10
                                                                    - 1) *
                                                                    4096) +
                                                                    ((z11 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z13 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                   ((z8 - 1)
                                                                    * 2)) +
                                                                  ((z9 - 1) *
                                                                    1)) + 1)));
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 122;
      assign(m3, rep_array(0, 4096), "assigning variable m3");
      current_statement__ = 153;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 151;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 149;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 147;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 145;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 143;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 141;
                  for (int z15 = 1; z15 <= 2; ++z15) {
                    current_statement__ = 139;
                    for (int z14 = 1; z14 <= 2; ++z14) {
                      current_statement__ = 137;
                      for (int z13 = 1; z13 <= 2; ++z13) {
                        current_statement__ = 135;
                        for (int z12 = 1; z12 <= 2; ++z12) {
                          current_statement__ = 133;
                          for (int z11 = 1; z11 <= 2; ++z11) {
                            current_statement__ = 131;
                            for (int z10 = 1; z10 <= 2; ++z10) {
                              {
                                Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                                acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                                stan::math::fill(acc0, DUMMY_VAR__);
                                
                                current_statement__ = 124;
                                assign(acc0, rep_vector(0, 2),
                                  "assigning variable acc0");
                                current_statement__ = 127;
                                for (int z3_val = 1; z3_val <= 2; ++z3_val) {
                                  current_statement__ = 125;
                                  assign(acc0,
                                    (rvalue(acc0, "acc0", index_uni(z3_val))
                                      +
                                      rvalue(m2, "m2",
                                        index_uni((((((((((((((((z10 - 1) *
                                                                 4096) +
                                                                ((z11 - 1) *
                                                                  2048)) +
                                                               ((z12 - 1) *
                                                                 1024)) +
                                                              ((z13 - 1) *
                                                                512)) +
                                                             ((z14 - 1) *
                                                               256)) +
                                                            ((z15 - 1) * 128))
                                                           +
                                                           ((z3_val - 1) *
                                                             64)) +
                                                          ((z4 - 1) * 32)) +
                                                         ((z5 - 1) * 16)) +
                                                        ((z6 - 1) * 8)) +
                                                       ((z7 - 1) * 4)) +
                                                      ((z8 - 1) * 2)) +
                                                     ((z9 - 1) * 1)) + 1)))),
                                    "assigning variable acc0", index_uni(z3_val));
                                }
                                current_statement__ = 128;
                                assign(m3,
                                  (rvalue(m3, "m3",
                                     index_uni(((((((((((((((z10 - 1) * 2048)
                                                            +
                                                            ((z11 - 1) *
                                                              1024)) +
                                                           ((z12 - 1) * 512))
                                                          +
                                                          ((z13 - 1) * 256))
                                                         + ((z14 - 1) * 128))
                                                        + ((z15 - 1) * 64)) +
                                                       ((z4 - 1) * 32)) +
                                                      ((z5 - 1) * 16)) +
                                                     ((z6 - 1) * 8)) +
                                                    ((z7 - 1) * 4)) +
                                                   ((z8 - 1) * 2)) +
                                                  ((z9 - 1) * 1)) + 1))) +
                                    log_sum_exp(acc0)),
                                  "assigning variable m3", index_uni(
                                                             ((((((((((((((z10
                                                                    - 1) *
                                                                    2048) +
                                                                    ((z11 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z12 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z13 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                   ((z6 - 1)
                                                                    * 8)) +
                                                                  ((z7 - 1) *
                                                                    4)) +
                                                                 ((z8 - 1) *
                                                                   2)) +
                                                                ((z9 - 1) *
                                                                  1)) + 1)));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 154;
      assign(m4, rep_array(0, 2048), "assigning variable m4");
      current_statement__ = 183;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 181;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 179;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 177;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 175;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 173;
                for (int z15 = 1; z15 <= 2; ++z15) {
                  current_statement__ = 171;
                  for (int z14 = 1; z14 <= 2; ++z14) {
                    current_statement__ = 169;
                    for (int z13 = 1; z13 <= 2; ++z13) {
                      current_statement__ = 167;
                      for (int z12 = 1; z12 <= 2; ++z12) {
                        current_statement__ = 165;
                        for (int z11 = 1; z11 <= 2; ++z11) {
                          current_statement__ = 163;
                          for (int z10 = 1; z10 <= 2; ++z10) {
                            {
                              Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                              acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                              stan::math::fill(acc0, DUMMY_VAR__);
                              
                              current_statement__ = 156;
                              assign(acc0, rep_vector(0, 2),
                                "assigning variable acc0");
                              current_statement__ = 159;
                              for (int z4_val = 1; z4_val <= 2; ++z4_val) {
                                current_statement__ = 157;
                                assign(acc0,
                                  (rvalue(acc0, "acc0", index_uni(z4_val)) +
                                    rvalue(m3, "m3",
                                      index_uni(((((((((((((((z10 - 1) *
                                                              2048) +
                                                             ((z11 - 1) *
                                                               1024)) +
                                                            ((z12 - 1) * 512))
                                                           +
                                                           ((z13 - 1) * 256))
                                                          +
                                                          ((z14 - 1) * 128))
                                                         + ((z15 - 1) * 64))
                                                        +
                                                        ((z4_val - 1) * 32))
                                                       + ((z5 - 1) * 16)) +
                                                      ((z6 - 1) * 8)) +
                                                     ((z7 - 1) * 4)) +
                                                    ((z8 - 1) * 2)) +
                                                   ((z9 - 1) * 1)) + 1)))),
                                  "assigning variable acc0", index_uni(z4_val));
                              }
                              current_statement__ = 160;
                              assign(m4,
                                (rvalue(m4, "m4",
                                   index_uni((((((((((((((z10 - 1) * 1024) +
                                                         ((z11 - 1) * 512)) +
                                                        ((z12 - 1) * 256)) +
                                                       ((z13 - 1) * 128)) +
                                                      ((z14 - 1) * 64)) +
                                                     ((z15 - 1) * 32)) +
                                                    ((z5 - 1) * 16)) +
                                                   ((z6 - 1) * 8)) +
                                                  ((z7 - 1) * 4)) +
                                                 ((z8 - 1) * 2)) +
                                                ((z9 - 1) * 1)) + 1))) +
                                  log_sum_exp(acc0)),
                                "assigning variable m4", index_uni((((((((((((((z10
                                                                    - 1) *
                                                                    1024) +
                                                                    ((z11 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z12 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z13 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                    1)));
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 184;
      assign(m5, rep_array(0, 1024), "assigning variable m5");
      current_statement__ = 211;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 209;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 207;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 205;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 203;
              for (int z15 = 1; z15 <= 2; ++z15) {
                current_statement__ = 201;
                for (int z14 = 1; z14 <= 2; ++z14) {
                  current_statement__ = 199;
                  for (int z13 = 1; z13 <= 2; ++z13) {
                    current_statement__ = 197;
                    for (int z12 = 1; z12 <= 2; ++z12) {
                      current_statement__ = 195;
                      for (int z11 = 1; z11 <= 2; ++z11) {
                        current_statement__ = 193;
                        for (int z10 = 1; z10 <= 2; ++z10) {
                          {
                            Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                            acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                            stan::math::fill(acc0, DUMMY_VAR__);
                            
                            current_statement__ = 186;
                            assign(acc0, rep_vector(0, 2),
                              "assigning variable acc0");
                            current_statement__ = 189;
                            for (int z5_val = 1; z5_val <= 2; ++z5_val) {
                              current_statement__ = 187;
                              assign(acc0,
                                (rvalue(acc0, "acc0", index_uni(z5_val)) +
                                  rvalue(m4, "m4",
                                    index_uni((((((((((((((z10 - 1) * 1024) +
                                                          ((z11 - 1) * 512))
                                                         + ((z12 - 1) * 256))
                                                        + ((z13 - 1) * 128))
                                                       + ((z14 - 1) * 64)) +
                                                      ((z15 - 1) * 32)) +
                                                     ((z5_val - 1) * 16)) +
                                                    ((z6 - 1) * 8)) +
                                                   ((z7 - 1) * 4)) +
                                                  ((z8 - 1) * 2)) +
                                                 ((z9 - 1) * 1)) + 1)))),
                                "assigning variable acc0", index_uni(z5_val));
                            }
                            current_statement__ = 190;
                            assign(m5,
                              (rvalue(m5, "m5",
                                 index_uni(((((((((((((z10 - 1) * 512) +
                                                      ((z11 - 1) * 256)) +
                                                     ((z12 - 1) * 128)) +
                                                    ((z13 - 1) * 64)) +
                                                   ((z14 - 1) * 32)) +
                                                  ((z15 - 1) * 16)) +
                                                 ((z6 - 1) * 8)) +
                                                ((z7 - 1) * 4)) +
                                               ((z8 - 1) * 2)) +
                                              ((z9 - 1) * 1)) + 1))) +
                                log_sum_exp(acc0)),
                              "assigning variable m5", index_uni(((((((((((((z10
                                                                    - 1) *
                                                                    512) +
                                                                    ((z11 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z12 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z13 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                   1)));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 212;
      assign(m6, rep_array(0, 512), "assigning variable m6");
      current_statement__ = 237;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 235;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 233;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 231;
            for (int z15 = 1; z15 <= 2; ++z15) {
              current_statement__ = 229;
              for (int z14 = 1; z14 <= 2; ++z14) {
                current_statement__ = 227;
                for (int z13 = 1; z13 <= 2; ++z13) {
                  current_statement__ = 225;
                  for (int z12 = 1; z12 <= 2; ++z12) {
                    current_statement__ = 223;
                    for (int z11 = 1; z11 <= 2; ++z11) {
                      current_statement__ = 221;
                      for (int z10 = 1; z10 <= 2; ++z10) {
                        {
                          Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                          acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                          stan::math::fill(acc0, DUMMY_VAR__);
                          
                          current_statement__ = 214;
                          assign(acc0, rep_vector(0, 2),
                            "assigning variable acc0");
                          current_statement__ = 217;
                          for (int z6_val = 1; z6_val <= 2; ++z6_val) {
                            current_statement__ = 215;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z6_val)) +
                                rvalue(m5, "m5",
                                  index_uni(((((((((((((z10 - 1) * 512) +
                                                       ((z11 - 1) * 256)) +
                                                      ((z12 - 1) * 128)) +
                                                     ((z13 - 1) * 64)) +
                                                    ((z14 - 1) * 32)) +
                                                   ((z15 - 1) * 16)) +
                                                  ((z6_val - 1) * 8)) +
                                                 ((z7 - 1) * 4)) +
                                                ((z8 - 1) * 2)) +
                                               ((z9 - 1) * 1)) + 1)))),
                              "assigning variable acc0", index_uni(z6_val));
                          }
                          current_statement__ = 218;
                          assign(m6,
                            (rvalue(m6, "m6",
                               index_uni((((((((((((z10 - 1) * 256) +
                                                   ((z11 - 1) * 128)) +
                                                  ((z12 - 1) * 64)) +
                                                 ((z13 - 1) * 32)) +
                                                ((z14 - 1) * 16)) +
                                               ((z15 - 1) * 8)) +
                                              ((z7 - 1) * 4)) +
                                             ((z8 - 1) * 2)) +
                                            ((z9 - 1) * 1)) + 1))) +
                              log_sum_exp(acc0)),
                            "assigning variable m6", index_uni((((((((((((z10
                                                                    - 1) *
                                                                    256) +
                                                                    ((z11 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z12 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z13 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                   ((z8 - 1)
                                                                    * 2)) +
                                                                  ((z9 - 1) *
                                                                    1)) + 1)));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 238;
      assign(m7, rep_array(0, 256), "assigning variable m7");
      current_statement__ = 261;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 259;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 257;
          for (int z15 = 1; z15 <= 2; ++z15) {
            current_statement__ = 255;
            for (int z14 = 1; z14 <= 2; ++z14) {
              current_statement__ = 253;
              for (int z13 = 1; z13 <= 2; ++z13) {
                current_statement__ = 251;
                for (int z12 = 1; z12 <= 2; ++z12) {
                  current_statement__ = 249;
                  for (int z11 = 1; z11 <= 2; ++z11) {
                    current_statement__ = 247;
                    for (int z10 = 1; z10 <= 2; ++z10) {
                      {
                        Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                        acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                        stan::math::fill(acc0, DUMMY_VAR__);
                        
                        current_statement__ = 240;
                        assign(acc0, rep_vector(0, 2),
                          "assigning variable acc0");
                        current_statement__ = 243;
                        for (int z7_val = 1; z7_val <= 2; ++z7_val) {
                          current_statement__ = 241;
                          assign(acc0,
                            (rvalue(acc0, "acc0", index_uni(z7_val)) +
                              rvalue(m6, "m6",
                                index_uni((((((((((((z10 - 1) * 256) +
                                                    ((z11 - 1) * 128)) +
                                                   ((z12 - 1) * 64)) +
                                                  ((z13 - 1) * 32)) +
                                                 ((z14 - 1) * 16)) +
                                                ((z15 - 1) * 8)) +
                                               ((z7_val - 1) * 4)) +
                                              ((z8 - 1) * 2)) +
                                             ((z9 - 1) * 1)) + 1)))),
                            "assigning variable acc0", index_uni(z7_val));
                        }
                        current_statement__ = 244;
                        assign(m7,
                          (rvalue(m7, "m7",
                             index_uni(((((((((((z10 - 1) * 128) +
                                                ((z11 - 1) * 64)) +
                                               ((z12 - 1) * 32)) +
                                              ((z13 - 1) * 16)) +
                                             ((z14 - 1) * 8)) +
                                            ((z15 - 1) * 4)) +
                                           ((z8 - 1) * 2)) + ((z9 - 1) * 1))
                                         + 1))) + log_sum_exp(acc0)),
                          "assigning variable m7", index_uni(((((((((((z10 -
                                                                    1) * 128)
                                                                    +
                                                                    ((z11 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z12 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z13 -
                                                                    1) * 16))
                                                                   +
                                                                   ((z14 - 1)
                                                                    * 8)) +
                                                                  ((z15 - 1)
                                                                    * 4)) +
                                                                 ((z8 - 1) *
                                                                   2)) +
                                                                ((z9 - 1) *
                                                                  1)) + 1)));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 262;
      assign(m8, rep_array(0, 128), "assigning variable m8");
      current_statement__ = 283;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 281;
        for (int z15 = 1; z15 <= 2; ++z15) {
          current_statement__ = 279;
          for (int z14 = 1; z14 <= 2; ++z14) {
            current_statement__ = 277;
            for (int z13 = 1; z13 <= 2; ++z13) {
              current_statement__ = 275;
              for (int z12 = 1; z12 <= 2; ++z12) {
                current_statement__ = 273;
                for (int z11 = 1; z11 <= 2; ++z11) {
                  current_statement__ = 271;
                  for (int z10 = 1; z10 <= 2; ++z10) {
                    {
                      Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                      acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                      stan::math::fill(acc0, DUMMY_VAR__);
                      
                      current_statement__ = 264;
                      assign(acc0, rep_vector(0, 2),
                        "assigning variable acc0");
                      current_statement__ = 267;
                      for (int z8_val = 1; z8_val <= 2; ++z8_val) {
                        current_statement__ = 265;
                        assign(acc0,
                          (rvalue(acc0, "acc0", index_uni(z8_val)) +
                            rvalue(m7, "m7",
                              index_uni(((((((((((z10 - 1) * 128) +
                                                 ((z11 - 1) * 64)) +
                                                ((z12 - 1) * 32)) +
                                               ((z13 - 1) * 16)) +
                                              ((z14 - 1) * 8)) +
                                             ((z15 - 1) * 4)) +
                                            ((z8_val - 1) * 2)) +
                                           ((z9 - 1) * 1)) + 1)))),
                          "assigning variable acc0", index_uni(z8_val));
                      }
                      current_statement__ = 268;
                      assign(m8,
                        (rvalue(m8, "m8",
                           index_uni((((((((((z10 - 1) * 64) +
                                             ((z11 - 1) * 32)) +
                                            ((z12 - 1) * 16)) +
                                           ((z13 - 1) * 8)) +
                                          ((z14 - 1) * 4)) + ((z15 - 1) * 2))
                                        + ((z9 - 1) * 1)) + 1))) +
                          log_sum_exp(acc0)),
                        "assigning variable m8", index_uni((((((((((z10 - 1)
                                                                    * 64) +
                                                                   ((z11 - 1)
                                                                    * 32)) +
                                                                  ((z12 - 1)
                                                                    * 16)) +
                                                                 ((z13 - 1) *
                                                                   8)) +
                                                                ((z14 - 1) *
                                                                  4)) +
                                                               ((z15 - 1) *
                                                                 2)) +
                                                              ((z9 - 1) * 1))
                                                             + 1)));
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 284;
      assign(m9, rep_array(0, 64), "assigning variable m9");
      current_statement__ = 303;
      for (int z15 = 1; z15 <= 2; ++z15) {
        current_statement__ = 301;
        for (int z14 = 1; z14 <= 2; ++z14) {
          current_statement__ = 299;
          for (int z13 = 1; z13 <= 2; ++z13) {
            current_statement__ = 297;
            for (int z12 = 1; z12 <= 2; ++z12) {
              current_statement__ = 295;
              for (int z11 = 1; z11 <= 2; ++z11) {
                current_statement__ = 293;
                for (int z10 = 1; z10 <= 2; ++z10) {
                  {
                    Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                    acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                    stan::math::fill(acc0, DUMMY_VAR__);
                    
                    current_statement__ = 286;
                    assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                    current_statement__ = 289;
                    for (int z9_val = 1; z9_val <= 2; ++z9_val) {
                      current_statement__ = 287;
                      assign(acc0,
                        (rvalue(acc0, "acc0", index_uni(z9_val)) +
                          rvalue(m8, "m8",
                            index_uni((((((((((z10 - 1) * 64) +
                                              ((z11 - 1) * 32)) +
                                             ((z12 - 1) * 16)) +
                                            ((z13 - 1) * 8)) +
                                           ((z14 - 1) * 4)) +
                                          ((z15 - 1) * 2)) +
                                         ((z9_val - 1) * 1)) + 1)))),
                        "assigning variable acc0", index_uni(z9_val));
                    }
                    current_statement__ = 290;
                    assign(m9,
                      (rvalue(m9, "m9",
                         index_uni(((((((((z10 - 1) * 32) + ((z11 - 1) * 16))
                                         + ((z12 - 1) * 8)) +
                                        ((z13 - 1) * 4)) + ((z14 - 1) * 2)) +
                                      ((z15 - 1) * 1)) + 1))) +
                        log_sum_exp(acc0)),
                      "assigning variable m9", index_uni(((((((((z10 - 1) *
                                                                 32) +
                                                                ((z11 - 1) *
                                                                  16)) +
                                                               ((z12 - 1) *
                                                                 8)) +
                                                              ((z13 - 1) * 4))
                                                             +
                                                             ((z14 - 1) * 2))
                                                            +
                                                            ((z15 - 1) * 1))
                                                           + 1)));
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 304;
      assign(m10, rep_array(0, 32), "assigning variable m10");
      current_statement__ = 321;
      for (int z15 = 1; z15 <= 2; ++z15) {
        current_statement__ = 319;
        for (int z14 = 1; z14 <= 2; ++z14) {
          current_statement__ = 317;
          for (int z13 = 1; z13 <= 2; ++z13) {
            current_statement__ = 315;
            for (int z12 = 1; z12 <= 2; ++z12) {
              current_statement__ = 313;
              for (int z11 = 1; z11 <= 2; ++z11) {
                {
                  Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                  acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                  stan::math::fill(acc0, DUMMY_VAR__);
                  
                  current_statement__ = 306;
                  assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                  current_statement__ = 309;
                  for (int z10_val = 1; z10_val <= 2; ++z10_val) {
                    current_statement__ = 307;
                    assign(acc0,
                      (rvalue(acc0, "acc0", index_uni(z10_val)) +
                        rvalue(m9, "m9",
                          index_uni(((((((((z10_val - 1) * 32) +
                                           ((z11 - 1) * 16)) +
                                          ((z12 - 1) * 8)) + ((z13 - 1) * 4))
                                        + ((z14 - 1) * 2)) + ((z15 - 1) * 1))
                                      + 1)))),
                      "assigning variable acc0", index_uni(z10_val));
                  }
                  current_statement__ = 310;
                  assign(m10,
                    (rvalue(m10, "m10",
                       index_uni((((((((z11 - 1) * 16) + ((z12 - 1) * 8)) +
                                      ((z13 - 1) * 4)) + ((z14 - 1) * 2)) +
                                    ((z15 - 1) * 1)) + 1))) +
                      log_sum_exp(acc0)),
                    "assigning variable m10", index_uni((((((((z11 - 1) * 16)
                                                              +
                                                              ((z12 - 1) * 8))
                                                             +
                                                             ((z13 - 1) * 4))
                                                            +
                                                            ((z14 - 1) * 2))
                                                           + ((z15 - 1) * 1))
                                                          + 1)));
                }
              }
            }
          }
        }
      }
      current_statement__ = 322;
      assign(m11, rep_array(0, 16), "assigning variable m11");
      current_statement__ = 337;
      for (int z15 = 1; z15 <= 2; ++z15) {
        current_statement__ = 335;
        for (int z14 = 1; z14 <= 2; ++z14) {
          current_statement__ = 333;
          for (int z13 = 1; z13 <= 2; ++z13) {
            current_statement__ = 331;
            for (int z12 = 1; z12 <= 2; ++z12) {
              {
                Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
                acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
                stan::math::fill(acc0, DUMMY_VAR__);
                
                current_statement__ = 324;
                assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                current_statement__ = 327;
                for (int z11_val = 1; z11_val <= 2; ++z11_val) {
                  current_statement__ = 325;
                  assign(acc0,
                    (rvalue(acc0, "acc0", index_uni(z11_val)) +
                      rvalue(m10, "m10",
                        index_uni((((((((z11_val - 1) * 16) +
                                        ((z12 - 1) * 8)) + ((z13 - 1) * 4)) +
                                      ((z14 - 1) * 2)) + ((z15 - 1) * 1)) +
                                    1)))),
                    "assigning variable acc0", index_uni(z11_val));
                }
                current_statement__ = 328;
                assign(m11,
                  (rvalue(m11, "m11",
                     index_uni(((((((z12 - 1) * 8) + ((z13 - 1) * 4)) +
                                   ((z14 - 1) * 2)) + ((z15 - 1) * 1)) + 1)))
                    + log_sum_exp(acc0)),
                  "assigning variable m11", index_uni(((((((z12 - 1) * 8) +
                                                           ((z13 - 1) * 4)) +
                                                          ((z14 - 1) * 2)) +
                                                         ((z15 - 1) * 1)) +
                                                        1)));
              }
            }
          }
        }
      }
      current_statement__ = 338;
      assign(m12, rep_array(0, 8), "assigning variable m12");
      current_statement__ = 351;
      for (int z15 = 1; z15 <= 2; ++z15) {
        current_statement__ = 349;
        for (int z14 = 1; z14 <= 2; ++z14) {
          current_statement__ = 347;
          for (int z13 = 1; z13 <= 2; ++z13) {
            {
              Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
              acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
              stan::math::fill(acc0, DUMMY_VAR__);
              
              current_statement__ = 340;
              assign(acc0, rep_vector(0, 2), "assigning variable acc0");
              current_statement__ = 343;
              for (int z12_val = 1; z12_val <= 2; ++z12_val) {
                current_statement__ = 341;
                assign(acc0,
                  (rvalue(acc0, "acc0", index_uni(z12_val)) +
                    rvalue(m11, "m11",
                      index_uni(((((((z12_val - 1) * 8) + ((z13 - 1) * 4)) +
                                    ((z14 - 1) * 2)) + ((z15 - 1) * 1)) + 1)))),
                  "assigning variable acc0", index_uni(z12_val));
              }
              current_statement__ = 344;
              assign(m12,
                (rvalue(m12, "m12",
                   index_uni((((((z13 - 1) * 4) + ((z14 - 1) * 2)) +
                                ((z15 - 1) * 1)) + 1))) + log_sum_exp(acc0)),
                "assigning variable m12", index_uni((((((z13 - 1) * 4) +
                                                        ((z14 - 1) * 2)) +
                                                       ((z15 - 1) * 1)) + 1)));
            }
          }
        }
      }
      current_statement__ = 352;
      assign(m13, rep_array(0, 4), "assigning variable m13");
      current_statement__ = 363;
      for (int z15 = 1; z15 <= 2; ++z15) {
        current_statement__ = 361;
        for (int z14 = 1; z14 <= 2; ++z14) {
          {
            Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
            acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
            stan::math::fill(acc0, DUMMY_VAR__);
            
            current_statement__ = 354;
            assign(acc0, rep_vector(0, 2), "assigning variable acc0");
            current_statement__ = 357;
            for (int z13_val = 1; z13_val <= 2; ++z13_val) {
              current_statement__ = 355;
              assign(acc0,
                (rvalue(acc0, "acc0", index_uni(z13_val)) +
                  rvalue(m12, "m12",
                    index_uni((((((z13_val - 1) * 4) + ((z14 - 1) * 2)) +
                                 ((z15 - 1) * 1)) + 1)))),
                "assigning variable acc0", index_uni(z13_val));
            }
            current_statement__ = 358;
            assign(m13,
              (rvalue(m13, "m13",
                 index_uni(((((z14 - 1) * 2) + ((z15 - 1) * 1)) + 1))) +
                log_sum_exp(acc0)),
              "assigning variable m13", index_uni(((((z14 - 1) * 2) +
                                                     ((z15 - 1) * 1)) + 1)));
          }
        }
      }
      current_statement__ = 364;
      assign(m14, rep_array(0, 2), "assigning variable m14");
      current_statement__ = 373;
      for (int z15 = 1; z15 <= 2; ++z15) {
        {
          Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
          acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
          stan::math::fill(acc0, DUMMY_VAR__);
          
          current_statement__ = 366;
          assign(acc0, rep_vector(0, 2), "assigning variable acc0");
          current_statement__ = 369;
          for (int z14_val = 1; z14_val <= 2; ++z14_val) {
            current_statement__ = 367;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z14_val)) +
                rvalue(m13, "m13",
                  index_uni(((((z14_val - 1) * 2) + ((z15 - 1) * 1)) + 1)))),
              "assigning variable acc0", index_uni(z14_val));
          }
          current_statement__ = 370;
          assign(m14,
            (rvalue(m14, "m14", index_uni(z15)) + log_sum_exp(acc0)),
            "assigning variable m14", index_uni(z15));
        }
      }
      current_statement__ = 374;
      m15 = 0;
      {
        Eigen::Matrix<local_scalar_t__, -1, 1> acc0;
        acc0 = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
        stan::math::fill(acc0, DUMMY_VAR__);
        
        current_statement__ = 376;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 379;
        for (int z15_val = 1; z15_val <= 2; ++z15_val) {
          current_statement__ = 377;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z15_val)) +
              rvalue(m14, "m14", index_uni((((z15_val - 1) * 1) + 1)))),
            "assigning variable acc0", index_uni(z15_val));
        }
        current_statement__ = 380;
        m15 = (m15 + log_sum_exp(acc0));
      }
      {
        current_statement__ = 523;
        lp_accum__.add(beta_lpdf<propto__>(prior1, 1, 1));
        current_statement__ = 524;
        lp_accum__.add(beta_lpdf<propto__>(prior2, 1, 1));
        current_statement__ = 525;
        lp_accum__.add(beta_lpdf<propto__>(prior3, 1, 1));
        current_statement__ = 526;
        lp_accum__.add(beta_lpdf<propto__>(prior4, 1, 1));
        current_statement__ = 527;
        lp_accum__.add(beta_lpdf<propto__>(prior5, 1, 1));
        current_statement__ = 528;
        lp_accum__.add(beta_lpdf<propto__>(prior6, 1, 1));
        current_statement__ = 529;
        lp_accum__.add(beta_lpdf<propto__>(prior7, 1, 1));
        current_statement__ = 530;
        lp_accum__.add(beta_lpdf<propto__>(prior8, 1, 1));
        current_statement__ = 531;
        lp_accum__.add(beta_lpdf<propto__>(prior9, 1, 1));
        current_statement__ = 532;
        lp_accum__.add(beta_lpdf<propto__>(prior10, 1, 1));
        current_statement__ = 533;
        lp_accum__.add(beta_lpdf<propto__>(prior11, 1, 1));
        current_statement__ = 534;
        lp_accum__.add(beta_lpdf<propto__>(prior12, 1, 1));
        current_statement__ = 535;
        lp_accum__.add(beta_lpdf<propto__>(prior13, 1, 1));
        current_statement__ = 536;
        lp_accum__.add(beta_lpdf<propto__>(prior14, 1, 1));
        current_statement__ = 537;
        lp_accum__.add(beta_lpdf<propto__>(prior15, 1, 1));
        current_statement__ = 538;
        lp_accum__.add(m15);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "or_15_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double prior1;
      prior1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      prior1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior10;
      prior10 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      prior10 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior11;
      prior11 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      prior11 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior12;
      prior12 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      prior12 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior13;
      prior13 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      prior13 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior14;
      prior14 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      prior14 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior15;
      prior15 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      prior15 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 1, lp__);
      double prior2;
      prior2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      prior2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior3;
      prior3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      prior3 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior4;
      prior4 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      prior4 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior5;
      prior5 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      prior5 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior6;
      prior6 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      prior6 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior7;
      prior7 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      prior7 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior8;
      prior8 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      prior8 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double prior9;
      prior9 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      prior9 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      std::vector<double> m1;
      m1 = std::vector<double>(16384, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m10;
      m10 = std::vector<double>(32, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m11;
      m11 = std::vector<double>(16, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m12;
      m12 = std::vector<double>(8, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m13;
      m13 = std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m14;
      m14 = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      double m15;
      m15 = std::numeric_limits<double>::quiet_NaN();
      
      std::vector<double> m2;
      m2 = std::vector<double>(8192, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m3;
      m3 = std::vector<double>(4096, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m4;
      m4 = std::vector<double>(2048, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m5;
      m5 = std::vector<double>(1024, std::numeric_limits<double>::quiet_NaN());
      
      
      std::vector<double> m6;
      m6 = std::vector<double>(512, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m7;
      m7 = std::vector<double>(256, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m8;
      m8 = std::vector<double>(128, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> m9;
      m9 = std::vector<double>(64, std::numeric_limits<double>::quiet_NaN());
      
      out__.write(prior1);
      out__.write(prior10);
      out__.write(prior11);
      out__.write(prior12);
      out__.write(prior13);
      out__.write(prior14);
      out__.write(prior15);
      out__.write(prior2);
      out__.write(prior3);
      out__.write(prior4);
      out__.write(prior5);
      out__.write(prior6);
      out__.write(prior7);
      out__.write(prior8);
      out__.write(prior9);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 31;
      assign(m1, rep_array(0, 16384), "assigning variable m1");
      current_statement__ = 87;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 85;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 83;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 81;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 79;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 77;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 75;
                  for (int z3 = 1; z3 <= 2; ++z3) {
                    current_statement__ = 73;
                    for (int z2 = 1; z2 <= 2; ++z2) {
                      current_statement__ = 71;
                      for (int z15 = 1; z15 <= 2; ++z15) {
                        current_statement__ = 69;
                        for (int z14 = 1; z14 <= 2; ++z14) {
                          current_statement__ = 67;
                          for (int z13 = 1; z13 <= 2; ++z13) {
                            current_statement__ = 65;
                            for (int z12 = 1; z12 <= 2; ++z12) {
                              current_statement__ = 63;
                              for (int z11 = 1; z11 <= 2; ++z11) {
                                current_statement__ = 61;
                                for (int z10 = 1; z10 <= 2; ++z10) {
                                  {
                                    Eigen::Matrix<double, -1, 1> acc0;
                                    acc0 = Eigen::Matrix<double, -1, 1>(2);
                                    stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                    
                                    
                                    current_statement__ = 33;
                                    assign(acc0, rep_vector(0, 2),
                                      "assigning variable acc0");
                                    current_statement__ = 57;
                                    for (int z1_val = 1; z1_val <= 2;
                                         ++z1_val) {
                                      current_statement__ = 34;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z1_val - 1),
                                            prior1)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 35;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z2 - 1),
                                            prior2)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 36;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z3 - 1),
                                            prior3)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 37;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z4 - 1),
                                            prior4)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 38;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z5 - 1),
                                            prior5)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 39;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z6 - 1),
                                            prior6)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 40;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z7 - 1),
                                            prior7)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 41;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z8 - 1),
                                            prior8)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 42;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z9 - 1),
                                            prior9)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 43;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z10 - 1),
                                            prior10)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 44;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z11 - 1),
                                            prior11)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 45;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z12 - 1),
                                            prior12)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 46;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z13 - 1),
                                            prior13)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 47;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z14 - 1),
                                            prior14)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 48;
                                      assign(acc0,
                                        (rvalue(acc0, "acc0",
                                           index_uni(z1_val)) +
                                          bernoulli_lpmf<false>((z15 - 1),
                                            prior15)),
                                        "assigning variable acc0", index_uni(z1_val));
                                      current_statement__ = 55;
                                      if (logical_gt(
                                            (((((((((((((((z1_val + z2) + z3)
                                                          + z4) + z5) + z6) +
                                                       z7) + z8) + z9) + z10)
                                                   + z11) + z12) + z13) +
                                                z14) + z15) - 15), 0)) {
                                        current_statement__ = 52;
                                        assign(acc0,
                                          (rvalue(acc0, "acc0",
                                             index_uni(z1_val)) +
                                            normal_lpdf<false>(d1, 135, 8)),
                                          "assigning variable acc0", 
                                          index_uni(z1_val));
                                        current_statement__ = 53;
                                        assign(acc0,
                                          (rvalue(acc0, "acc0",
                                             index_uni(z1_val)) +
                                            normal_lpdf<false>(d2, 135, 8)),
                                          "assigning variable acc0", 
                                          index_uni(z1_val));
                                      } else {
                                        current_statement__ = 49;
                                        assign(acc0,
                                          (rvalue(acc0, "acc0",
                                             index_uni(z1_val)) +
                                            normal_lpdf<false>(d1, 80, 8)),
                                          "assigning variable acc0", 
                                          index_uni(z1_val));
                                        current_statement__ = 50;
                                        assign(acc0,
                                          (rvalue(acc0, "acc0",
                                             index_uni(z1_val)) +
                                            normal_lpdf<false>(d2, 80, 8)),
                                          "assigning variable acc0", 
                                          index_uni(z1_val));
                                      }
                                    }
                                    current_statement__ = 58;
                                    assign(m1,
                                      (rvalue(m1, "m1",
                                         index_uni(((((((((((((((((z10 - 1) *
                                                                   8192) +
                                                                  ((z11 - 1)
                                                                    * 4096))
                                                                 +
                                                                 ((z12 - 1) *
                                                                   2048)) +
                                                                ((z13 - 1) *
                                                                  1024)) +
                                                               ((z14 - 1) *
                                                                 512)) +
                                                              ((z15 - 1) *
                                                                256)) +
                                                             ((z2 - 1) * 128))
                                                            +
                                                            ((z3 - 1) * 64))
                                                           + ((z4 - 1) * 32))
                                                          + ((z5 - 1) * 16))
                                                         + ((z6 - 1) * 8)) +
                                                        ((z7 - 1) * 4)) +
                                                       ((z8 - 1) * 2)) +
                                                      ((z9 - 1) * 1)) + 1)))
                                        + log_sum_exp(acc0)),
                                      "assigning variable m1", index_uni(
                                                                 ((((((((((((((((z10
                                                                    - 1) *
                                                                    8192) +
                                                                    ((z11 -
                                                                    1) *
                                                                    4096)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z13 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z14 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z2 - 1)
                                                                    * 128)) +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                   1)));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 88;
      assign(m2, rep_array(0, 8192), "assigning variable m2");
      current_statement__ = 121;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 119;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 117;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 115;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 113;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 111;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 109;
                  for (int z3 = 1; z3 <= 2; ++z3) {
                    current_statement__ = 107;
                    for (int z15 = 1; z15 <= 2; ++z15) {
                      current_statement__ = 105;
                      for (int z14 = 1; z14 <= 2; ++z14) {
                        current_statement__ = 103;
                        for (int z13 = 1; z13 <= 2; ++z13) {
                          current_statement__ = 101;
                          for (int z12 = 1; z12 <= 2; ++z12) {
                            current_statement__ = 99;
                            for (int z11 = 1; z11 <= 2; ++z11) {
                              current_statement__ = 97;
                              for (int z10 = 1; z10 <= 2; ++z10) {
                                {
                                  Eigen::Matrix<double, -1, 1> acc0;
                                  acc0 = Eigen::Matrix<double, -1, 1>(2);
                                  stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                  
                                  
                                  current_statement__ = 90;
                                  assign(acc0, rep_vector(0, 2),
                                    "assigning variable acc0");
                                  current_statement__ = 93;
                                  for (int z2_val = 1; z2_val <= 2; ++z2_val) {
                                    current_statement__ = 91;
                                    assign(acc0,
                                      (rvalue(acc0, "acc0",
                                         index_uni(z2_val)) +
                                        rvalue(m1, "m1",
                                          index_uni(((((((((((((((((z10 - 1)
                                                                    * 8192) +
                                                                   ((z11 - 1)
                                                                    * 4096))
                                                                  +
                                                                  ((z12 - 1)
                                                                    * 2048))
                                                                 +
                                                                 ((z13 - 1) *
                                                                   1024)) +
                                                                ((z14 - 1) *
                                                                  512)) +
                                                               ((z15 - 1) *
                                                                 256)) +
                                                              ((z2_val - 1) *
                                                                128)) +
                                                             ((z3 - 1) * 64))
                                                            +
                                                            ((z4 - 1) * 32))
                                                           + ((z5 - 1) * 16))
                                                          + ((z6 - 1) * 8)) +
                                                         ((z7 - 1) * 4)) +
                                                        ((z8 - 1) * 2)) +
                                                       ((z9 - 1) * 1)) + 1)))),
                                      "assigning variable acc0", index_uni(z2_val));
                                  }
                                  current_statement__ = 94;
                                  assign(m2,
                                    (rvalue(m2, "m2",
                                       index_uni((((((((((((((((z10 - 1) *
                                                                4096) +
                                                               ((z11 - 1) *
                                                                 2048)) +
                                                              ((z12 - 1) *
                                                                1024)) +
                                                             ((z13 - 1) *
                                                               512)) +
                                                            ((z14 - 1) * 256))
                                                           +
                                                           ((z15 - 1) * 128))
                                                          + ((z3 - 1) * 64))
                                                         + ((z4 - 1) * 32)) +
                                                        ((z5 - 1) * 16)) +
                                                       ((z6 - 1) * 8)) +
                                                      ((z7 - 1) * 4)) +
                                                     ((z8 - 1) * 2)) +
                                                    ((z9 - 1) * 1)) + 1))) +
                                      log_sum_exp(acc0)),
                                    "assigning variable m2", index_uni(
                                                               (((((((((((((((z10
                                                                    - 1) *
                                                                    4096) +
                                                                    ((z11 -
                                                                    1) *
                                                                    2048)) +
                                                                    ((z12 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z13 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z3 - 1)
                                                                    * 64)) +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                   ((z8 - 1)
                                                                    * 2)) +
                                                                  ((z9 - 1) *
                                                                    1)) + 1)));
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 122;
      assign(m3, rep_array(0, 4096), "assigning variable m3");
      current_statement__ = 153;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 151;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 149;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 147;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 145;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 143;
                for (int z4 = 1; z4 <= 2; ++z4) {
                  current_statement__ = 141;
                  for (int z15 = 1; z15 <= 2; ++z15) {
                    current_statement__ = 139;
                    for (int z14 = 1; z14 <= 2; ++z14) {
                      current_statement__ = 137;
                      for (int z13 = 1; z13 <= 2; ++z13) {
                        current_statement__ = 135;
                        for (int z12 = 1; z12 <= 2; ++z12) {
                          current_statement__ = 133;
                          for (int z11 = 1; z11 <= 2; ++z11) {
                            current_statement__ = 131;
                            for (int z10 = 1; z10 <= 2; ++z10) {
                              {
                                Eigen::Matrix<double, -1, 1> acc0;
                                acc0 = Eigen::Matrix<double, -1, 1>(2);
                                stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                                
                                
                                current_statement__ = 124;
                                assign(acc0, rep_vector(0, 2),
                                  "assigning variable acc0");
                                current_statement__ = 127;
                                for (int z3_val = 1; z3_val <= 2; ++z3_val) {
                                  current_statement__ = 125;
                                  assign(acc0,
                                    (rvalue(acc0, "acc0", index_uni(z3_val))
                                      +
                                      rvalue(m2, "m2",
                                        index_uni((((((((((((((((z10 - 1) *
                                                                 4096) +
                                                                ((z11 - 1) *
                                                                  2048)) +
                                                               ((z12 - 1) *
                                                                 1024)) +
                                                              ((z13 - 1) *
                                                                512)) +
                                                             ((z14 - 1) *
                                                               256)) +
                                                            ((z15 - 1) * 128))
                                                           +
                                                           ((z3_val - 1) *
                                                             64)) +
                                                          ((z4 - 1) * 32)) +
                                                         ((z5 - 1) * 16)) +
                                                        ((z6 - 1) * 8)) +
                                                       ((z7 - 1) * 4)) +
                                                      ((z8 - 1) * 2)) +
                                                     ((z9 - 1) * 1)) + 1)))),
                                    "assigning variable acc0", index_uni(z3_val));
                                }
                                current_statement__ = 128;
                                assign(m3,
                                  (rvalue(m3, "m3",
                                     index_uni(((((((((((((((z10 - 1) * 2048)
                                                            +
                                                            ((z11 - 1) *
                                                              1024)) +
                                                           ((z12 - 1) * 512))
                                                          +
                                                          ((z13 - 1) * 256))
                                                         + ((z14 - 1) * 128))
                                                        + ((z15 - 1) * 64)) +
                                                       ((z4 - 1) * 32)) +
                                                      ((z5 - 1) * 16)) +
                                                     ((z6 - 1) * 8)) +
                                                    ((z7 - 1) * 4)) +
                                                   ((z8 - 1) * 2)) +
                                                  ((z9 - 1) * 1)) + 1))) +
                                    log_sum_exp(acc0)),
                                  "assigning variable m3", index_uni(
                                                             ((((((((((((((z10
                                                                    - 1) *
                                                                    2048) +
                                                                    ((z11 -
                                                                    1) *
                                                                    1024)) +
                                                                    ((z12 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z13 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z4 - 1)
                                                                    * 32)) +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                   ((z6 - 1)
                                                                    * 8)) +
                                                                  ((z7 - 1) *
                                                                    4)) +
                                                                 ((z8 - 1) *
                                                                   2)) +
                                                                ((z9 - 1) *
                                                                  1)) + 1)));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 154;
      assign(m4, rep_array(0, 2048), "assigning variable m4");
      current_statement__ = 183;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 181;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 179;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 177;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 175;
              for (int z5 = 1; z5 <= 2; ++z5) {
                current_statement__ = 173;
                for (int z15 = 1; z15 <= 2; ++z15) {
                  current_statement__ = 171;
                  for (int z14 = 1; z14 <= 2; ++z14) {
                    current_statement__ = 169;
                    for (int z13 = 1; z13 <= 2; ++z13) {
                      current_statement__ = 167;
                      for (int z12 = 1; z12 <= 2; ++z12) {
                        current_statement__ = 165;
                        for (int z11 = 1; z11 <= 2; ++z11) {
                          current_statement__ = 163;
                          for (int z10 = 1; z10 <= 2; ++z10) {
                            {
                              Eigen::Matrix<double, -1, 1> acc0;
                              acc0 = Eigen::Matrix<double, -1, 1>(2);
                              stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                              
                              
                              current_statement__ = 156;
                              assign(acc0, rep_vector(0, 2),
                                "assigning variable acc0");
                              current_statement__ = 159;
                              for (int z4_val = 1; z4_val <= 2; ++z4_val) {
                                current_statement__ = 157;
                                assign(acc0,
                                  (rvalue(acc0, "acc0", index_uni(z4_val)) +
                                    rvalue(m3, "m3",
                                      index_uni(((((((((((((((z10 - 1) *
                                                              2048) +
                                                             ((z11 - 1) *
                                                               1024)) +
                                                            ((z12 - 1) * 512))
                                                           +
                                                           ((z13 - 1) * 256))
                                                          +
                                                          ((z14 - 1) * 128))
                                                         + ((z15 - 1) * 64))
                                                        +
                                                        ((z4_val - 1) * 32))
                                                       + ((z5 - 1) * 16)) +
                                                      ((z6 - 1) * 8)) +
                                                     ((z7 - 1) * 4)) +
                                                    ((z8 - 1) * 2)) +
                                                   ((z9 - 1) * 1)) + 1)))),
                                  "assigning variable acc0", index_uni(z4_val));
                              }
                              current_statement__ = 160;
                              assign(m4,
                                (rvalue(m4, "m4",
                                   index_uni((((((((((((((z10 - 1) * 1024) +
                                                         ((z11 - 1) * 512)) +
                                                        ((z12 - 1) * 256)) +
                                                       ((z13 - 1) * 128)) +
                                                      ((z14 - 1) * 64)) +
                                                     ((z15 - 1) * 32)) +
                                                    ((z5 - 1) * 16)) +
                                                   ((z6 - 1) * 8)) +
                                                  ((z7 - 1) * 4)) +
                                                 ((z8 - 1) * 2)) +
                                                ((z9 - 1) * 1)) + 1))) +
                                  log_sum_exp(acc0)),
                                "assigning variable m4", index_uni((((((((((((((z10
                                                                    - 1) *
                                                                    1024) +
                                                                    ((z11 -
                                                                    1) * 512))
                                                                    +
                                                                    ((z12 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z13 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z5 - 1)
                                                                    * 16)) +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                    1)));
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 184;
      assign(m5, rep_array(0, 1024), "assigning variable m5");
      current_statement__ = 211;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 209;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 207;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 205;
            for (int z6 = 1; z6 <= 2; ++z6) {
              current_statement__ = 203;
              for (int z15 = 1; z15 <= 2; ++z15) {
                current_statement__ = 201;
                for (int z14 = 1; z14 <= 2; ++z14) {
                  current_statement__ = 199;
                  for (int z13 = 1; z13 <= 2; ++z13) {
                    current_statement__ = 197;
                    for (int z12 = 1; z12 <= 2; ++z12) {
                      current_statement__ = 195;
                      for (int z11 = 1; z11 <= 2; ++z11) {
                        current_statement__ = 193;
                        for (int z10 = 1; z10 <= 2; ++z10) {
                          {
                            Eigen::Matrix<double, -1, 1> acc0;
                            acc0 = Eigen::Matrix<double, -1, 1>(2);
                            stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                            
                            
                            current_statement__ = 186;
                            assign(acc0, rep_vector(0, 2),
                              "assigning variable acc0");
                            current_statement__ = 189;
                            for (int z5_val = 1; z5_val <= 2; ++z5_val) {
                              current_statement__ = 187;
                              assign(acc0,
                                (rvalue(acc0, "acc0", index_uni(z5_val)) +
                                  rvalue(m4, "m4",
                                    index_uni((((((((((((((z10 - 1) * 1024) +
                                                          ((z11 - 1) * 512))
                                                         + ((z12 - 1) * 256))
                                                        + ((z13 - 1) * 128))
                                                       + ((z14 - 1) * 64)) +
                                                      ((z15 - 1) * 32)) +
                                                     ((z5_val - 1) * 16)) +
                                                    ((z6 - 1) * 8)) +
                                                   ((z7 - 1) * 4)) +
                                                  ((z8 - 1) * 2)) +
                                                 ((z9 - 1) * 1)) + 1)))),
                                "assigning variable acc0", index_uni(z5_val));
                            }
                            current_statement__ = 190;
                            assign(m5,
                              (rvalue(m5, "m5",
                                 index_uni(((((((((((((z10 - 1) * 512) +
                                                      ((z11 - 1) * 256)) +
                                                     ((z12 - 1) * 128)) +
                                                    ((z13 - 1) * 64)) +
                                                   ((z14 - 1) * 32)) +
                                                  ((z15 - 1) * 16)) +
                                                 ((z6 - 1) * 8)) +
                                                ((z7 - 1) * 4)) +
                                               ((z8 - 1) * 2)) +
                                              ((z9 - 1) * 1)) + 1))) +
                                log_sum_exp(acc0)),
                              "assigning variable m5", index_uni(((((((((((((z10
                                                                    - 1) *
                                                                    512) +
                                                                    ((z11 -
                                                                    1) * 256))
                                                                    +
                                                                    ((z12 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z13 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z6 - 1)
                                                                    * 8)) +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                    ((z8 - 1)
                                                                    * 2)) +
                                                                    ((z9 - 1)
                                                                    * 1)) +
                                                                   1)));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 212;
      assign(m6, rep_array(0, 512), "assigning variable m6");
      current_statement__ = 237;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 235;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 233;
          for (int z7 = 1; z7 <= 2; ++z7) {
            current_statement__ = 231;
            for (int z15 = 1; z15 <= 2; ++z15) {
              current_statement__ = 229;
              for (int z14 = 1; z14 <= 2; ++z14) {
                current_statement__ = 227;
                for (int z13 = 1; z13 <= 2; ++z13) {
                  current_statement__ = 225;
                  for (int z12 = 1; z12 <= 2; ++z12) {
                    current_statement__ = 223;
                    for (int z11 = 1; z11 <= 2; ++z11) {
                      current_statement__ = 221;
                      for (int z10 = 1; z10 <= 2; ++z10) {
                        {
                          Eigen::Matrix<double, -1, 1> acc0;
                          acc0 = Eigen::Matrix<double, -1, 1>(2);
                          stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                          
                          
                          current_statement__ = 214;
                          assign(acc0, rep_vector(0, 2),
                            "assigning variable acc0");
                          current_statement__ = 217;
                          for (int z6_val = 1; z6_val <= 2; ++z6_val) {
                            current_statement__ = 215;
                            assign(acc0,
                              (rvalue(acc0, "acc0", index_uni(z6_val)) +
                                rvalue(m5, "m5",
                                  index_uni(((((((((((((z10 - 1) * 512) +
                                                       ((z11 - 1) * 256)) +
                                                      ((z12 - 1) * 128)) +
                                                     ((z13 - 1) * 64)) +
                                                    ((z14 - 1) * 32)) +
                                                   ((z15 - 1) * 16)) +
                                                  ((z6_val - 1) * 8)) +
                                                 ((z7 - 1) * 4)) +
                                                ((z8 - 1) * 2)) +
                                               ((z9 - 1) * 1)) + 1)))),
                              "assigning variable acc0", index_uni(z6_val));
                          }
                          current_statement__ = 218;
                          assign(m6,
                            (rvalue(m6, "m6",
                               index_uni((((((((((((z10 - 1) * 256) +
                                                   ((z11 - 1) * 128)) +
                                                  ((z12 - 1) * 64)) +
                                                 ((z13 - 1) * 32)) +
                                                ((z14 - 1) * 16)) +
                                               ((z15 - 1) * 8)) +
                                              ((z7 - 1) * 4)) +
                                             ((z8 - 1) * 2)) +
                                            ((z9 - 1) * 1)) + 1))) +
                              log_sum_exp(acc0)),
                            "assigning variable m6", index_uni((((((((((((z10
                                                                    - 1) *
                                                                    256) +
                                                                    ((z11 -
                                                                    1) * 128))
                                                                    +
                                                                    ((z12 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z13 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z14 -
                                                                    1) * 16))
                                                                    +
                                                                    ((z15 -
                                                                    1) * 8))
                                                                    +
                                                                    ((z7 - 1)
                                                                    * 4)) +
                                                                   ((z8 - 1)
                                                                    * 2)) +
                                                                  ((z9 - 1) *
                                                                    1)) + 1)));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 238;
      assign(m7, rep_array(0, 256), "assigning variable m7");
      current_statement__ = 261;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 259;
        for (int z8 = 1; z8 <= 2; ++z8) {
          current_statement__ = 257;
          for (int z15 = 1; z15 <= 2; ++z15) {
            current_statement__ = 255;
            for (int z14 = 1; z14 <= 2; ++z14) {
              current_statement__ = 253;
              for (int z13 = 1; z13 <= 2; ++z13) {
                current_statement__ = 251;
                for (int z12 = 1; z12 <= 2; ++z12) {
                  current_statement__ = 249;
                  for (int z11 = 1; z11 <= 2; ++z11) {
                    current_statement__ = 247;
                    for (int z10 = 1; z10 <= 2; ++z10) {
                      {
                        Eigen::Matrix<double, -1, 1> acc0;
                        acc0 = Eigen::Matrix<double, -1, 1>(2);
                        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                        
                        
                        current_statement__ = 240;
                        assign(acc0, rep_vector(0, 2),
                          "assigning variable acc0");
                        current_statement__ = 243;
                        for (int z7_val = 1; z7_val <= 2; ++z7_val) {
                          current_statement__ = 241;
                          assign(acc0,
                            (rvalue(acc0, "acc0", index_uni(z7_val)) +
                              rvalue(m6, "m6",
                                index_uni((((((((((((z10 - 1) * 256) +
                                                    ((z11 - 1) * 128)) +
                                                   ((z12 - 1) * 64)) +
                                                  ((z13 - 1) * 32)) +
                                                 ((z14 - 1) * 16)) +
                                                ((z15 - 1) * 8)) +
                                               ((z7_val - 1) * 4)) +
                                              ((z8 - 1) * 2)) +
                                             ((z9 - 1) * 1)) + 1)))),
                            "assigning variable acc0", index_uni(z7_val));
                        }
                        current_statement__ = 244;
                        assign(m7,
                          (rvalue(m7, "m7",
                             index_uni(((((((((((z10 - 1) * 128) +
                                                ((z11 - 1) * 64)) +
                                               ((z12 - 1) * 32)) +
                                              ((z13 - 1) * 16)) +
                                             ((z14 - 1) * 8)) +
                                            ((z15 - 1) * 4)) +
                                           ((z8 - 1) * 2)) + ((z9 - 1) * 1))
                                         + 1))) + log_sum_exp(acc0)),
                          "assigning variable m7", index_uni(((((((((((z10 -
                                                                    1) * 128)
                                                                    +
                                                                    ((z11 -
                                                                    1) * 64))
                                                                    +
                                                                    ((z12 -
                                                                    1) * 32))
                                                                    +
                                                                    ((z13 -
                                                                    1) * 16))
                                                                   +
                                                                   ((z14 - 1)
                                                                    * 8)) +
                                                                  ((z15 - 1)
                                                                    * 4)) +
                                                                 ((z8 - 1) *
                                                                   2)) +
                                                                ((z9 - 1) *
                                                                  1)) + 1)));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 262;
      assign(m8, rep_array(0, 128), "assigning variable m8");
      current_statement__ = 283;
      for (int z9 = 1; z9 <= 2; ++z9) {
        current_statement__ = 281;
        for (int z15 = 1; z15 <= 2; ++z15) {
          current_statement__ = 279;
          for (int z14 = 1; z14 <= 2; ++z14) {
            current_statement__ = 277;
            for (int z13 = 1; z13 <= 2; ++z13) {
              current_statement__ = 275;
              for (int z12 = 1; z12 <= 2; ++z12) {
                current_statement__ = 273;
                for (int z11 = 1; z11 <= 2; ++z11) {
                  current_statement__ = 271;
                  for (int z10 = 1; z10 <= 2; ++z10) {
                    {
                      Eigen::Matrix<double, -1, 1> acc0;
                      acc0 = Eigen::Matrix<double, -1, 1>(2);
                      stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                      
                      
                      current_statement__ = 264;
                      assign(acc0, rep_vector(0, 2),
                        "assigning variable acc0");
                      current_statement__ = 267;
                      for (int z8_val = 1; z8_val <= 2; ++z8_val) {
                        current_statement__ = 265;
                        assign(acc0,
                          (rvalue(acc0, "acc0", index_uni(z8_val)) +
                            rvalue(m7, "m7",
                              index_uni(((((((((((z10 - 1) * 128) +
                                                 ((z11 - 1) * 64)) +
                                                ((z12 - 1) * 32)) +
                                               ((z13 - 1) * 16)) +
                                              ((z14 - 1) * 8)) +
                                             ((z15 - 1) * 4)) +
                                            ((z8_val - 1) * 2)) +
                                           ((z9 - 1) * 1)) + 1)))),
                          "assigning variable acc0", index_uni(z8_val));
                      }
                      current_statement__ = 268;
                      assign(m8,
                        (rvalue(m8, "m8",
                           index_uni((((((((((z10 - 1) * 64) +
                                             ((z11 - 1) * 32)) +
                                            ((z12 - 1) * 16)) +
                                           ((z13 - 1) * 8)) +
                                          ((z14 - 1) * 4)) + ((z15 - 1) * 2))
                                        + ((z9 - 1) * 1)) + 1))) +
                          log_sum_exp(acc0)),
                        "assigning variable m8", index_uni((((((((((z10 - 1)
                                                                    * 64) +
                                                                   ((z11 - 1)
                                                                    * 32)) +
                                                                  ((z12 - 1)
                                                                    * 16)) +
                                                                 ((z13 - 1) *
                                                                   8)) +
                                                                ((z14 - 1) *
                                                                  4)) +
                                                               ((z15 - 1) *
                                                                 2)) +
                                                              ((z9 - 1) * 1))
                                                             + 1)));
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 284;
      assign(m9, rep_array(0, 64), "assigning variable m9");
      current_statement__ = 303;
      for (int z15 = 1; z15 <= 2; ++z15) {
        current_statement__ = 301;
        for (int z14 = 1; z14 <= 2; ++z14) {
          current_statement__ = 299;
          for (int z13 = 1; z13 <= 2; ++z13) {
            current_statement__ = 297;
            for (int z12 = 1; z12 <= 2; ++z12) {
              current_statement__ = 295;
              for (int z11 = 1; z11 <= 2; ++z11) {
                current_statement__ = 293;
                for (int z10 = 1; z10 <= 2; ++z10) {
                  {
                    Eigen::Matrix<double, -1, 1> acc0;
                    acc0 = Eigen::Matrix<double, -1, 1>(2);
                    stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                    
                    
                    current_statement__ = 286;
                    assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                    current_statement__ = 289;
                    for (int z9_val = 1; z9_val <= 2; ++z9_val) {
                      current_statement__ = 287;
                      assign(acc0,
                        (rvalue(acc0, "acc0", index_uni(z9_val)) +
                          rvalue(m8, "m8",
                            index_uni((((((((((z10 - 1) * 64) +
                                              ((z11 - 1) * 32)) +
                                             ((z12 - 1) * 16)) +
                                            ((z13 - 1) * 8)) +
                                           ((z14 - 1) * 4)) +
                                          ((z15 - 1) * 2)) +
                                         ((z9_val - 1) * 1)) + 1)))),
                        "assigning variable acc0", index_uni(z9_val));
                    }
                    current_statement__ = 290;
                    assign(m9,
                      (rvalue(m9, "m9",
                         index_uni(((((((((z10 - 1) * 32) + ((z11 - 1) * 16))
                                         + ((z12 - 1) * 8)) +
                                        ((z13 - 1) * 4)) + ((z14 - 1) * 2)) +
                                      ((z15 - 1) * 1)) + 1))) +
                        log_sum_exp(acc0)),
                      "assigning variable m9", index_uni(((((((((z10 - 1) *
                                                                 32) +
                                                                ((z11 - 1) *
                                                                  16)) +
                                                               ((z12 - 1) *
                                                                 8)) +
                                                              ((z13 - 1) * 4))
                                                             +
                                                             ((z14 - 1) * 2))
                                                            +
                                                            ((z15 - 1) * 1))
                                                           + 1)));
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 304;
      assign(m10, rep_array(0, 32), "assigning variable m10");
      current_statement__ = 321;
      for (int z15 = 1; z15 <= 2; ++z15) {
        current_statement__ = 319;
        for (int z14 = 1; z14 <= 2; ++z14) {
          current_statement__ = 317;
          for (int z13 = 1; z13 <= 2; ++z13) {
            current_statement__ = 315;
            for (int z12 = 1; z12 <= 2; ++z12) {
              current_statement__ = 313;
              for (int z11 = 1; z11 <= 2; ++z11) {
                {
                  Eigen::Matrix<double, -1, 1> acc0;
                  acc0 = Eigen::Matrix<double, -1, 1>(2);
                  stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                  
                  
                  current_statement__ = 306;
                  assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                  current_statement__ = 309;
                  for (int z10_val = 1; z10_val <= 2; ++z10_val) {
                    current_statement__ = 307;
                    assign(acc0,
                      (rvalue(acc0, "acc0", index_uni(z10_val)) +
                        rvalue(m9, "m9",
                          index_uni(((((((((z10_val - 1) * 32) +
                                           ((z11 - 1) * 16)) +
                                          ((z12 - 1) * 8)) + ((z13 - 1) * 4))
                                        + ((z14 - 1) * 2)) + ((z15 - 1) * 1))
                                      + 1)))),
                      "assigning variable acc0", index_uni(z10_val));
                  }
                  current_statement__ = 310;
                  assign(m10,
                    (rvalue(m10, "m10",
                       index_uni((((((((z11 - 1) * 16) + ((z12 - 1) * 8)) +
                                      ((z13 - 1) * 4)) + ((z14 - 1) * 2)) +
                                    ((z15 - 1) * 1)) + 1))) +
                      log_sum_exp(acc0)),
                    "assigning variable m10", index_uni((((((((z11 - 1) * 16)
                                                              +
                                                              ((z12 - 1) * 8))
                                                             +
                                                             ((z13 - 1) * 4))
                                                            +
                                                            ((z14 - 1) * 2))
                                                           + ((z15 - 1) * 1))
                                                          + 1)));
                }
              }
            }
          }
        }
      }
      current_statement__ = 322;
      assign(m11, rep_array(0, 16), "assigning variable m11");
      current_statement__ = 337;
      for (int z15 = 1; z15 <= 2; ++z15) {
        current_statement__ = 335;
        for (int z14 = 1; z14 <= 2; ++z14) {
          current_statement__ = 333;
          for (int z13 = 1; z13 <= 2; ++z13) {
            current_statement__ = 331;
            for (int z12 = 1; z12 <= 2; ++z12) {
              {
                Eigen::Matrix<double, -1, 1> acc0;
                acc0 = Eigen::Matrix<double, -1, 1>(2);
                stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
                
                
                current_statement__ = 324;
                assign(acc0, rep_vector(0, 2), "assigning variable acc0");
                current_statement__ = 327;
                for (int z11_val = 1; z11_val <= 2; ++z11_val) {
                  current_statement__ = 325;
                  assign(acc0,
                    (rvalue(acc0, "acc0", index_uni(z11_val)) +
                      rvalue(m10, "m10",
                        index_uni((((((((z11_val - 1) * 16) +
                                        ((z12 - 1) * 8)) + ((z13 - 1) * 4)) +
                                      ((z14 - 1) * 2)) + ((z15 - 1) * 1)) +
                                    1)))),
                    "assigning variable acc0", index_uni(z11_val));
                }
                current_statement__ = 328;
                assign(m11,
                  (rvalue(m11, "m11",
                     index_uni(((((((z12 - 1) * 8) + ((z13 - 1) * 4)) +
                                   ((z14 - 1) * 2)) + ((z15 - 1) * 1)) + 1)))
                    + log_sum_exp(acc0)),
                  "assigning variable m11", index_uni(((((((z12 - 1) * 8) +
                                                           ((z13 - 1) * 4)) +
                                                          ((z14 - 1) * 2)) +
                                                         ((z15 - 1) * 1)) +
                                                        1)));
              }
            }
          }
        }
      }
      current_statement__ = 338;
      assign(m12, rep_array(0, 8), "assigning variable m12");
      current_statement__ = 351;
      for (int z15 = 1; z15 <= 2; ++z15) {
        current_statement__ = 349;
        for (int z14 = 1; z14 <= 2; ++z14) {
          current_statement__ = 347;
          for (int z13 = 1; z13 <= 2; ++z13) {
            {
              Eigen::Matrix<double, -1, 1> acc0;
              acc0 = Eigen::Matrix<double, -1, 1>(2);
              stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
              
              
              current_statement__ = 340;
              assign(acc0, rep_vector(0, 2), "assigning variable acc0");
              current_statement__ = 343;
              for (int z12_val = 1; z12_val <= 2; ++z12_val) {
                current_statement__ = 341;
                assign(acc0,
                  (rvalue(acc0, "acc0", index_uni(z12_val)) +
                    rvalue(m11, "m11",
                      index_uni(((((((z12_val - 1) * 8) + ((z13 - 1) * 4)) +
                                    ((z14 - 1) * 2)) + ((z15 - 1) * 1)) + 1)))),
                  "assigning variable acc0", index_uni(z12_val));
              }
              current_statement__ = 344;
              assign(m12,
                (rvalue(m12, "m12",
                   index_uni((((((z13 - 1) * 4) + ((z14 - 1) * 2)) +
                                ((z15 - 1) * 1)) + 1))) + log_sum_exp(acc0)),
                "assigning variable m12", index_uni((((((z13 - 1) * 4) +
                                                        ((z14 - 1) * 2)) +
                                                       ((z15 - 1) * 1)) + 1)));
            }
          }
        }
      }
      current_statement__ = 352;
      assign(m13, rep_array(0, 4), "assigning variable m13");
      current_statement__ = 363;
      for (int z15 = 1; z15 <= 2; ++z15) {
        current_statement__ = 361;
        for (int z14 = 1; z14 <= 2; ++z14) {
          {
            Eigen::Matrix<double, -1, 1> acc0;
            acc0 = Eigen::Matrix<double, -1, 1>(2);
            stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
            
            current_statement__ = 354;
            assign(acc0, rep_vector(0, 2), "assigning variable acc0");
            current_statement__ = 357;
            for (int z13_val = 1; z13_val <= 2; ++z13_val) {
              current_statement__ = 355;
              assign(acc0,
                (rvalue(acc0, "acc0", index_uni(z13_val)) +
                  rvalue(m12, "m12",
                    index_uni((((((z13_val - 1) * 4) + ((z14 - 1) * 2)) +
                                 ((z15 - 1) * 1)) + 1)))),
                "assigning variable acc0", index_uni(z13_val));
            }
            current_statement__ = 358;
            assign(m13,
              (rvalue(m13, "m13",
                 index_uni(((((z14 - 1) * 2) + ((z15 - 1) * 1)) + 1))) +
                log_sum_exp(acc0)),
              "assigning variable m13", index_uni(((((z14 - 1) * 2) +
                                                     ((z15 - 1) * 1)) + 1)));
          }
        }
      }
      current_statement__ = 364;
      assign(m14, rep_array(0, 2), "assigning variable m14");
      current_statement__ = 373;
      for (int z15 = 1; z15 <= 2; ++z15) {
        {
          Eigen::Matrix<double, -1, 1> acc0;
          acc0 = Eigen::Matrix<double, -1, 1>(2);
          stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 366;
          assign(acc0, rep_vector(0, 2), "assigning variable acc0");
          current_statement__ = 369;
          for (int z14_val = 1; z14_val <= 2; ++z14_val) {
            current_statement__ = 367;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z14_val)) +
                rvalue(m13, "m13",
                  index_uni(((((z14_val - 1) * 2) + ((z15 - 1) * 1)) + 1)))),
              "assigning variable acc0", index_uni(z14_val));
          }
          current_statement__ = 370;
          assign(m14,
            (rvalue(m14, "m14", index_uni(z15)) + log_sum_exp(acc0)),
            "assigning variable m14", index_uni(z15));
        }
      }
      current_statement__ = 374;
      m15 = 0;
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 376;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 379;
        for (int z15_val = 1; z15_val <= 2; ++z15_val) {
          current_statement__ = 377;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z15_val)) +
              rvalue(m14, "m14", index_uni((((z15_val - 1) * 1) + 1)))),
            "assigning variable acc0", index_uni(z15_val));
        }
        current_statement__ = 380;
        m15 = (m15 + log_sum_exp(acc0));
      }
      if (emit_transformed_parameters__) {
        out__.write(m1);
        out__.write(m10);
        out__.write(m11);
        out__.write(m12);
        out__.write(m13);
        out__.write(m14);
        out__.write(m15);
        out__.write(m2);
        out__.write(m3);
        out__.write(m4);
        out__.write(m5);
        out__.write(m6);
        out__.write(m7);
        out__.write(m8);
        out__.write(m9);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      int z1;
      z1 = std::numeric_limits<int>::min();
      
      int z10;
      z10 = std::numeric_limits<int>::min();
      
      int z11;
      z11 = std::numeric_limits<int>::min();
      
      int z12;
      z12 = std::numeric_limits<int>::min();
      
      int z13;
      z13 = std::numeric_limits<int>::min();
      
      int z14;
      z14 = std::numeric_limits<int>::min();
      
      int z15;
      z15 = std::numeric_limits<int>::min();
      
      int z2;
      z2 = std::numeric_limits<int>::min();
      
      int z3;
      z3 = std::numeric_limits<int>::min();
      
      int z4;
      z4 = std::numeric_limits<int>::min();
      
      int z5;
      z5 = std::numeric_limits<int>::min();
      
      int z6;
      z6 = std::numeric_limits<int>::min();
      
      int z7;
      z7 = std::numeric_limits<int>::min();
      
      int z8;
      z8 = std::numeric_limits<int>::min();
      
      int z9;
      z9 = std::numeric_limits<int>::min();
      
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 398;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 401;
        for (int z15_val = 1; z15_val <= 2; ++z15_val) {
          current_statement__ = 399;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z15_val)) +
              rvalue(m14, "m14", index_uni((((z15_val - 1) * 1) + 1)))),
            "assigning variable acc0", index_uni(z15_val));
        }
        current_statement__ = 402;
        z15 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 405;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 408;
        for (int z14_val = 1; z14_val <= 2; ++z14_val) {
          current_statement__ = 406;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z14_val)) +
              rvalue(m13, "m13",
                index_uni(((((z14_val - 1) * 2) + ((z15 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z14_val));
        }
        current_statement__ = 409;
        z14 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 412;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 415;
        for (int z13_val = 1; z13_val <= 2; ++z13_val) {
          current_statement__ = 413;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z13_val)) +
              rvalue(m12, "m12",
                index_uni((((((z13_val - 1) * 4) + ((z14 - 1) * 2)) +
                             ((z15 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z13_val));
        }
        current_statement__ = 416;
        z13 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 419;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 422;
        for (int z12_val = 1; z12_val <= 2; ++z12_val) {
          current_statement__ = 420;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z12_val)) +
              rvalue(m11, "m11",
                index_uni(((((((z12_val - 1) * 8) + ((z13 - 1) * 4)) +
                              ((z14 - 1) * 2)) + ((z15 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z12_val));
        }
        current_statement__ = 423;
        z12 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 426;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 429;
        for (int z11_val = 1; z11_val <= 2; ++z11_val) {
          current_statement__ = 427;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z11_val)) +
              rvalue(m10, "m10",
                index_uni((((((((z11_val - 1) * 16) + ((z12 - 1) * 8)) +
                               ((z13 - 1) * 4)) + ((z14 - 1) * 2)) +
                             ((z15 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z11_val));
        }
        current_statement__ = 430;
        z11 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 433;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 436;
        for (int z10_val = 1; z10_val <= 2; ++z10_val) {
          current_statement__ = 434;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z10_val)) +
              rvalue(m9, "m9",
                index_uni(((((((((z10_val - 1) * 32) + ((z11 - 1) * 16)) +
                                ((z12 - 1) * 8)) + ((z13 - 1) * 4)) +
                              ((z14 - 1) * 2)) + ((z15 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z10_val));
        }
        current_statement__ = 437;
        z10 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 440;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 443;
        for (int z9_val = 1; z9_val <= 2; ++z9_val) {
          current_statement__ = 441;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z9_val)) +
              rvalue(m8, "m8",
                index_uni((((((((((z10 - 1) * 64) + ((z11 - 1) * 32)) +
                                 ((z12 - 1) * 16)) + ((z13 - 1) * 8)) +
                               ((z14 - 1) * 4)) + ((z15 - 1) * 2)) +
                             ((z9_val - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z9_val));
        }
        current_statement__ = 444;
        z9 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 447;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 450;
        for (int z8_val = 1; z8_val <= 2; ++z8_val) {
          current_statement__ = 448;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z8_val)) +
              rvalue(m7, "m7",
                index_uni(((((((((((z10 - 1) * 128) + ((z11 - 1) * 64)) +
                                  ((z12 - 1) * 32)) + ((z13 - 1) * 16)) +
                                ((z14 - 1) * 8)) + ((z15 - 1) * 4)) +
                              ((z8_val - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z8_val));
        }
        current_statement__ = 451;
        z8 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 454;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 457;
        for (int z7_val = 1; z7_val <= 2; ++z7_val) {
          current_statement__ = 455;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z7_val)) +
              rvalue(m6, "m6",
                index_uni((((((((((((z10 - 1) * 256) + ((z11 - 1) * 128)) +
                                   ((z12 - 1) * 64)) + ((z13 - 1) * 32)) +
                                 ((z14 - 1) * 16)) + ((z15 - 1) * 8)) +
                               ((z7_val - 1) * 4)) + ((z8 - 1) * 2)) +
                             ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z7_val));
        }
        current_statement__ = 458;
        z7 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 461;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 464;
        for (int z6_val = 1; z6_val <= 2; ++z6_val) {
          current_statement__ = 462;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z6_val)) +
              rvalue(m5, "m5",
                index_uni(((((((((((((z10 - 1) * 512) + ((z11 - 1) * 256)) +
                                    ((z12 - 1) * 128)) + ((z13 - 1) * 64)) +
                                  ((z14 - 1) * 32)) + ((z15 - 1) * 16)) +
                                ((z6_val - 1) * 8)) + ((z7 - 1) * 4)) +
                              ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z6_val));
        }
        current_statement__ = 465;
        z6 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 468;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 471;
        for (int z5_val = 1; z5_val <= 2; ++z5_val) {
          current_statement__ = 469;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z5_val)) +
              rvalue(m4, "m4",
                index_uni((((((((((((((z10 - 1) * 1024) + ((z11 - 1) * 512))
                                     + ((z12 - 1) * 256)) +
                                    ((z13 - 1) * 128)) + ((z14 - 1) * 64)) +
                                  ((z15 - 1) * 32)) + ((z5_val - 1) * 16)) +
                                ((z6 - 1) * 8)) + ((z7 - 1) * 4)) +
                              ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z5_val));
        }
        current_statement__ = 472;
        z5 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 475;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 478;
        for (int z4_val = 1; z4_val <= 2; ++z4_val) {
          current_statement__ = 476;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z4_val)) +
              rvalue(m3, "m3",
                index_uni(((((((((((((((z10 - 1) * 2048) +
                                       ((z11 - 1) * 1024)) +
                                      ((z12 - 1) * 512)) + ((z13 - 1) * 256))
                                    + ((z14 - 1) * 128)) + ((z15 - 1) * 64))
                                  + ((z4_val - 1) * 32)) + ((z5 - 1) * 16)) +
                                ((z6 - 1) * 8)) + ((z7 - 1) * 4)) +
                              ((z8 - 1) * 2)) + ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z4_val));
        }
        current_statement__ = 479;
        z4 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 482;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 485;
        for (int z3_val = 1; z3_val <= 2; ++z3_val) {
          current_statement__ = 483;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z3_val)) +
              rvalue(m2, "m2",
                index_uni((((((((((((((((z10 - 1) * 4096) +
                                        ((z11 - 1) * 2048)) +
                                       ((z12 - 1) * 1024)) +
                                      ((z13 - 1) * 512)) + ((z14 - 1) * 256))
                                    + ((z15 - 1) * 128)) +
                                   ((z3_val - 1) * 64)) + ((z4 - 1) * 32)) +
                                 ((z5 - 1) * 16)) + ((z6 - 1) * 8)) +
                               ((z7 - 1) * 4)) + ((z8 - 1) * 2)) +
                             ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z3_val));
        }
        current_statement__ = 486;
        z3 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 489;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 492;
        for (int z2_val = 1; z2_val <= 2; ++z2_val) {
          current_statement__ = 490;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z2_val)) +
              rvalue(m1, "m1",
                index_uni(((((((((((((((((z10 - 1) * 8192) +
                                         ((z11 - 1) * 4096)) +
                                        ((z12 - 1) * 2048)) +
                                       ((z13 - 1) * 1024)) +
                                      ((z14 - 1) * 512)) + ((z15 - 1) * 256))
                                    + ((z2_val - 1) * 128)) +
                                   ((z3 - 1) * 64)) + ((z4 - 1) * 32)) +
                                 ((z5 - 1) * 16)) + ((z6 - 1) * 8)) +
                               ((z7 - 1) * 4)) + ((z8 - 1) * 2)) +
                             ((z9 - 1) * 1)) + 1)))),
            "assigning variable acc0", index_uni(z2_val));
        }
        current_statement__ = 493;
        z2 = categorical_logit_rng(acc0, base_rng__);
      }
      {
        Eigen::Matrix<double, -1, 1> acc0;
        acc0 = Eigen::Matrix<double, -1, 1>(2);
        stan::math::fill(acc0, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 496;
        assign(acc0, rep_vector(0, 2), "assigning variable acc0");
        current_statement__ = 520;
        for (int z1_val = 1; z1_val <= 2; ++z1_val) {
          current_statement__ = 497;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z1_val - 1), prior1)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 498;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z2 - 1), prior2)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 499;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z3 - 1), prior3)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 500;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z4 - 1), prior4)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 501;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z5 - 1), prior5)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 502;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z6 - 1), prior6)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 503;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z7 - 1), prior7)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 504;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z8 - 1), prior8)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 505;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z9 - 1), prior9)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 506;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z10 - 1), prior10)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 507;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z11 - 1), prior11)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 508;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z12 - 1), prior12)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 509;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z13 - 1), prior13)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 510;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z14 - 1), prior14)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 511;
          assign(acc0,
            (rvalue(acc0, "acc0", index_uni(z1_val)) +
              bernoulli_lpmf<false>((z15 - 1), prior15)),
            "assigning variable acc0", index_uni(z1_val));
          current_statement__ = 518;
          if (logical_gt(
                (((((((((((((((z1_val + z2) + z3) + z4) + z5) + z6) + z7) +
                          z8) + z9) + z10) + z11) + z12) + z13) + z14) + z15)
                  - 15), 0)) {
            current_statement__ = 515;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d1, 135, 8)),
              "assigning variable acc0", index_uni(z1_val));
            current_statement__ = 516;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d2, 135, 8)),
              "assigning variable acc0", index_uni(z1_val));
          } else {
            current_statement__ = 512;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d1, 80, 8)),
              "assigning variable acc0", index_uni(z1_val));
            current_statement__ = 513;
            assign(acc0,
              (rvalue(acc0, "acc0", index_uni(z1_val)) +
                normal_lpdf<false>(d2, 80, 8)),
              "assigning variable acc0", index_uni(z1_val));
          }
        }
        current_statement__ = 521;
        z1 = categorical_logit_rng(acc0, base_rng__);
      }
      out__.write(z1);
      out__.write(z10);
      out__.write(z11);
      out__.write(z12);
      out__.write(z13);
      out__.write(z14);
      out__.write(z15);
      out__.write(z2);
      out__.write(z3);
      out__.write(z4);
      out__.write(z5);
      out__.write(z6);
      out__.write(z7);
      out__.write(z8);
      out__.write(z9);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      local_scalar_t__ prior1;
      prior1 = DUMMY_VAR__;
      
      prior1 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior1);
      local_scalar_t__ prior10;
      prior10 = DUMMY_VAR__;
      
      prior10 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior10);
      local_scalar_t__ prior11;
      prior11 = DUMMY_VAR__;
      
      prior11 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior11);
      local_scalar_t__ prior12;
      prior12 = DUMMY_VAR__;
      
      prior12 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior12);
      local_scalar_t__ prior13;
      prior13 = DUMMY_VAR__;
      
      prior13 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior13);
      local_scalar_t__ prior14;
      prior14 = DUMMY_VAR__;
      
      prior14 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior14);
      local_scalar_t__ prior15;
      prior15 = DUMMY_VAR__;
      
      prior15 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior15);
      local_scalar_t__ prior2;
      prior2 = DUMMY_VAR__;
      
      prior2 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior2);
      local_scalar_t__ prior3;
      prior3 = DUMMY_VAR__;
      
      prior3 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior3);
      local_scalar_t__ prior4;
      prior4 = DUMMY_VAR__;
      
      prior4 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior4);
      local_scalar_t__ prior5;
      prior5 = DUMMY_VAR__;
      
      prior5 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior5);
      local_scalar_t__ prior6;
      prior6 = DUMMY_VAR__;
      
      prior6 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior6);
      local_scalar_t__ prior7;
      prior7 = DUMMY_VAR__;
      
      prior7 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior7);
      local_scalar_t__ prior8;
      prior8 = DUMMY_VAR__;
      
      prior8 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior8);
      local_scalar_t__ prior9;
      prior9 = DUMMY_VAR__;
      
      prior9 = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, prior9);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"prior1", "prior10", "prior11",
      "prior12", "prior13", "prior14", "prior15", "prior2", "prior3",
      "prior4", "prior5", "prior6", "prior7", "prior8", "prior9", "m1",
      "m10", "m11", "m12", "m13", "m14", "m15", "m2", "m3", "m4", "m5", "m6",
      "m7", "m8", "m9", "z1", "z10", "z11", "z12", "z13", "z14", "z15", "z2",
      "z3", "z4", "z5", "z6", "z7", "z8", "z9"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(16384)},
      std::vector<size_t>{static_cast<size_t>(32)},
      std::vector<size_t>{static_cast<size_t>(16)},
      std::vector<size_t>{static_cast<size_t>(8)},
      std::vector<size_t>{static_cast<size_t>(4)},
      std::vector<size_t>{static_cast<size_t>(2)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(8192)},
      std::vector<size_t>{static_cast<size_t>(4096)},
      std::vector<size_t>{static_cast<size_t>(2048)},
      std::vector<size_t>{static_cast<size_t>(1024)},
      std::vector<size_t>{static_cast<size_t>(512)},
      std::vector<size_t>{static_cast<size_t>(256)},
      std::vector<size_t>{static_cast<size_t>(128)},
      std::vector<size_t>{static_cast<size_t>(64)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "prior1");
    param_names__.emplace_back(std::string() + "prior10");
    param_names__.emplace_back(std::string() + "prior11");
    param_names__.emplace_back(std::string() + "prior12");
    param_names__.emplace_back(std::string() + "prior13");
    param_names__.emplace_back(std::string() + "prior14");
    param_names__.emplace_back(std::string() + "prior15");
    param_names__.emplace_back(std::string() + "prior2");
    param_names__.emplace_back(std::string() + "prior3");
    param_names__.emplace_back(std::string() + "prior4");
    param_names__.emplace_back(std::string() + "prior5");
    param_names__.emplace_back(std::string() + "prior6");
    param_names__.emplace_back(std::string() + "prior7");
    param_names__.emplace_back(std::string() + "prior8");
    param_names__.emplace_back(std::string() + "prior9");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 16384; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 32; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m10" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 16; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m11" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m12" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m13" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m14" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "m15");
      for (int sym1__ = 1; sym1__ <= 8192; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4096; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m3" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2048; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m4" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 1024; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m5" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 512; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m6" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 256; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m7" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 128; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m8" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 64; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m9" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "z1");
      param_names__.emplace_back(std::string() + "z10");
      param_names__.emplace_back(std::string() + "z11");
      param_names__.emplace_back(std::string() + "z12");
      param_names__.emplace_back(std::string() + "z13");
      param_names__.emplace_back(std::string() + "z14");
      param_names__.emplace_back(std::string() + "z15");
      param_names__.emplace_back(std::string() + "z2");
      param_names__.emplace_back(std::string() + "z3");
      param_names__.emplace_back(std::string() + "z4");
      param_names__.emplace_back(std::string() + "z5");
      param_names__.emplace_back(std::string() + "z6");
      param_names__.emplace_back(std::string() + "z7");
      param_names__.emplace_back(std::string() + "z8");
      param_names__.emplace_back(std::string() + "z9");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "prior1");
    param_names__.emplace_back(std::string() + "prior10");
    param_names__.emplace_back(std::string() + "prior11");
    param_names__.emplace_back(std::string() + "prior12");
    param_names__.emplace_back(std::string() + "prior13");
    param_names__.emplace_back(std::string() + "prior14");
    param_names__.emplace_back(std::string() + "prior15");
    param_names__.emplace_back(std::string() + "prior2");
    param_names__.emplace_back(std::string() + "prior3");
    param_names__.emplace_back(std::string() + "prior4");
    param_names__.emplace_back(std::string() + "prior5");
    param_names__.emplace_back(std::string() + "prior6");
    param_names__.emplace_back(std::string() + "prior7");
    param_names__.emplace_back(std::string() + "prior8");
    param_names__.emplace_back(std::string() + "prior9");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 16384; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 32; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m10" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 16; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m11" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m12" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m13" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m14" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "m15");
      for (int sym1__ = 1; sym1__ <= 8192; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 4096; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m3" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2048; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m4" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 1024; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m5" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 512; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m6" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 256; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m7" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 128; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m8" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 64; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "m9" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "z1");
      param_names__.emplace_back(std::string() + "z10");
      param_names__.emplace_back(std::string() + "z11");
      param_names__.emplace_back(std::string() + "z12");
      param_names__.emplace_back(std::string() + "z13");
      param_names__.emplace_back(std::string() + "z14");
      param_names__.emplace_back(std::string() + "z15");
      param_names__.emplace_back(std::string() + "z2");
      param_names__.emplace_back(std::string() + "z3");
      param_names__.emplace_back(std::string() + "z4");
      param_names__.emplace_back(std::string() + "z5");
      param_names__.emplace_back(std::string() + "z6");
      param_names__.emplace_back(std::string() + "z7");
      param_names__.emplace_back(std::string() + "z8");
      param_names__.emplace_back(std::string() + "z9");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"prior1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior10\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior11\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior12\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior13\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior14\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior15\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior5\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior6\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior7\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior8\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior9\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(16384) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m10\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(32) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m11\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(16) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m12\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m13\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m14\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m15\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"m2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8192) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4096) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2048) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1024) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(512) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(256) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(128) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m9\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(64) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"z1\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z10\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z11\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z12\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z13\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z14\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z15\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z2\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z3\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z4\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z5\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z6\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z7\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z8\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z9\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"prior1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior10\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior11\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior12\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior13\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior14\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior15\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior5\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior6\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior7\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior8\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"prior9\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(16384) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m10\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(32) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m11\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(16) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m12\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m13\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m14\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m15\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"m2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(8192) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(4096) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m4\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2048) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m5\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1024) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m6\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(512) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m7\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(256) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m8\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(128) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"m9\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(64) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"z1\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z10\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z11\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z12\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z13\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z14\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z15\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z2\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z3\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z4\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z5\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z6\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z7\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z8\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"z9\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
     + 1) + 1);
      const size_t num_transformed = ((((((((((((((16384 +
                                                                    32) + 16)
                                                                  + 8) + 4) +
                                                                2) + 1) +
                                                              8192) + 4096) +
                                                            2048) + 1024) +
                                                          512) + 256) + 128)
                                                       + 64);
      const size_t num_gen_quantities = 
  ((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
     + 1) + 1);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
     + 1) + 1);
      const size_t num_transformed = ((((((((((((((16384 +
                                                                    32) + 16)
                                                                  + 8) + 4) +
                                                                2) + 1) +
                                                              8192) + 4096) +
                                                            2048) + 1024) +
                                                          512) + 256) + 128)
                                                       + 64);
      const size_t num_gen_quantities = 
  ((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1)
     + 1) + 1);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 15> names__{"prior1", "prior10",
      "prior11", "prior12", "prior13", "prior14", "prior15", "prior2",
      "prior3", "prior4", "prior5", "prior6", "prior7", "prior8", "prior9"};
      const std::array<Eigen::Index, 15> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = or_15_model_namespace::or_15_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return or_15_model_namespace::profiles__;
}

#endif


